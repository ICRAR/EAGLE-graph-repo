{
    "modelData": {
        "filePath": "numpy_matlib_random.palette",
        "fileType": "Palette",
        "shortDescription": "",
        "detailedDescription": "========================\nRandom Number Generation\n========================\n\nUse ``default_rng()`` to create a `Generator` and call its methods.\n\n=============== =========================================================\nGenerator\n--------------- ---------------------------------------------------------\nGenerator       Class implementing all of the random number distributions\ndefault_rng     Default constructor for ``Generator``\n=============== =========================================================\n\n============================================= ===\nBitGenerator Streams that work with Generator\n--------------------------------------------- ---\nMT19937\nPCG64\nPCG64DXSM\nPhilox\nSFC64\n============================================= ===\n\n============================================= ===\nGetting entropy to initialize a BitGenerator\n--------------------------------------------- ---\nSeedSequence\n============================================= ===\n\n\nLegacy\n------\n\nFor backwards compatibility with previous versions of numpy before 1.17, the\nvarious aliases to the global `RandomState` methods are left alone and do not\nuse the new `Generator` API.\n\n==================== =========================================================\nUtility functions\n-------------------- ---------------------------------------------------------\nrandom               Uniformly distributed floats over ``[0, 1)``\nbytes                Uniformly distributed random bytes.\npermutation          Randomly permute a sequence / generate a random sequence.\nshuffle              Randomly permute a sequence in place.\nchoice               Random sample from 1-D array.\n==================== =========================================================\n\n==================== =========================================================\nCompatibility\nfunctions - removed\nin the new API\n-------------------- ---------------------------------------------------------\nrand                 Uniformly distributed values.\nrandn                Normally distributed values.\nranf                 Uniformly distributed floating point numbers.\nrandom_integers      Uniformly distributed integers in a given range.\n                     (deprecated, use ``integers(..., closed=True)`` instead)\nrandom_sample        Alias for `random_sample`\nrandint              Uniformly distributed integers in a given range\nseed                 Seed the legacy random number generator.\n==================== =========================================================\n\n==================== =========================================================\nUnivariate\ndistributions\n-------------------- ---------------------------------------------------------\nbeta                 Beta distribution over ``[0, 1]``.\nbinomial             Binomial distribution.\nchisquare            :math:`\\chi^2` distribution.\nexponential          Exponential distribution.\nf                    F (Fisher-Snedecor) distribution.\ngamma                Gamma distribution.\ngeometric            Geometric distribution.\ngumbel               Gumbel distribution.\nhypergeometric       Hypergeometric distribution.\nlaplace              Laplace distribution.\nlogistic             Logistic distribution.\nlognormal            Log-normal distribution.\nlogseries            Logarithmic series distribution.\nnegative_binomial    Negative binomial distribution.\nnoncentral_chisquare Non-central chi-square distribution.\nnoncentral_f         Non-central F distribution.\nnormal               Normal / Gaussian distribution.\npareto               Pareto distribution.\npoisson              Poisson distribution.\npower                Power distribution.\nrayleigh             Rayleigh distribution.\ntriangular           Triangular distribution.\nuniform              Uniform distribution.\nvonmises             Von Mises circular distribution.\nwald                 Wald (inverse Gaussian) distribution.\nweibull              Weibull distribution.\nzipf                 Zipf's distribution over ranked data.\n==================== =========================================================\n\n==================== ==========================================================\nMultivariate\ndistributions\n-------------------- ----------------------------------------------------------\ndirichlet            Multivariate generalization of Beta distribution.\nmultinomial          Multivariate generalization of the binomial distribution.\nmultivariate_normal  Multivariate generalization of the normal distribution.\n==================== ==========================================================\n\n==================== =========================================================\nStandard\ndistributions\n-------------------- ---------------------------------------------------------\nstandard_cauchy      Standard Cauchy-Lorentz distribution.\nstandard_exponential Standard exponential distribution.\nstandard_gamma       Standard Gamma distribution.\nstandard_normal      Standard normal distribution.\nstandard_t           Standard Student's t-distribution.\n==================== =========================================================\n\n==================== =========================================================\nInternal functions\n-------------------- ---------------------------------------------------------\nget_state            Get tuple representing internal state of generator.\nset_state            Set state of generator.\n==================== =========================================================",
        "repoService": "",
        "repoBranch": "",
        "repo": "",
        "generatorName": "dlg_paletteGen",
        "generatorVersion": "0.6.3",
        "generatorCommitHash": "",
        "schemaVersion": "AppRef",
        "readonly": true,
        "repositoryUrl": "matlib",
        "commitHash": "0.1",
        "downloadUrl": "",
        "signature": "f15560557243c87881cfc7316b4bec86874d9ee2375b4a69c76df59931296b2d",
        "lastModifiedName": "wici",
        "lastModifiedEmail": "",
        "lastModifiedDatetime": 1755100314.465577,
        "numLGNodes": 226
    },
    "nodeDataArray": [
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "euafjczl",
            "name": "BitGenerator.__init__",
            "description": "\nBitGenerator(seed=None)\n    \n    Base Class for generic BitGenerators, which provide a stream\n    of random bits based on different algorithms. Must be overridden.\n    \n    Parameters\n    ----------\n    seed : {None, int, array_like[ints], SeedSequence}, optional\n        A seed to initialize the `BitGenerator`. If None, then fresh,\n        unpredictable entropy will be pulled from the OS. If an ``int`` or\n        ``array_like[ints]`` is passed, then it will be passed to\n        `~numpy.random.SeedSequence` to derive the initial `BitGenerator` state.\n        One may also pass in a `SeedSequence` instance.\n        All integer values must be non-negative.\n    \n    Attributes\n    ----------\n    lock : threading.Lock\n        Lock instance that is shared so that the same BitGenerator can\n        be used in multiple Generators without corrupting the state. Code that\n        generates values from a bit generator should hold the bit generator's\n        lock.\n    \n    See Also\n    --------\n    SeedSequence",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "acf2bf08774a84c73c54e17be0618876b986d47320ea96839a34ab4802c1d354",
            "fields": [
                {
                    "id": "ki86hhkf",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to BitGenerator object",
                    "type": "Object:numpy.random.bit_generator.BitGenerator",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "s5olwd6x",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "buibedts",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ddq6v3ew",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.bit_generator.BitGenerator.__init__",
                    "defaultValue": "numpy.matlib.numpy.random.bit_generator.BitGenerator.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ut6rwke4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "prysahsv",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "b_6ctmm8",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2ajcsb15",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.bit_generator.BitGenerator",
                    "defaultValue": "numpy.random.bit_generator.BitGenerator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d2w1n5cs",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n85qqhzr",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "m9ud7k2z",
            "name": "BitGenerator.random_raw",
            "description": "random_raw(self, size=None)\n    \n    Return randoms as generated by the underlying BitGenerator\n    \n    Parameters\n    ----------\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    output : bool, optional\n        Output values.  Used for performance testing since the generated\n        values are not returned.\n    \n    Returns\n    -------\n    out : uint or ndarray\n        Drawn samples.\n    \n    Notes\n    -----\n    This method directly exposes the raw underlying pseudo-random\n    number generator. All values are returned as unsigned 64-bit\n    values irrespective of the number of bits produced by the PRNG.\n    \n    See the class docstring for the number of bits returned.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6d6cbce3bc6213ec88ea5ca6ad116758d5f9af00cd1047ec4fcaf1cc40e4713a",
            "fields": [
                {
                    "id": "y2yd6tjy",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.bit_generator.BitGenerator.random_raw object",
                    "type": "Object:numpy.random.bit_generator.BitGenerator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r2gixuvk",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j4mgz27p",
                    "encoding": "",
                    "name": "output",
                    "value": true,
                    "defaultValue": true,
                    "description": "Output values.  Used for performance testing since the generated\nvalues are not returned.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qp_dv1v2",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.bit_generator.BitGenerator.random_raw",
                    "defaultValue": "numpy.matlib.numpy.random.bit_generator.BitGenerator.random_raw",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z5n0x585",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zf7qiuac",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "cj63tm4f",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "046xr0g4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.bit_generator.BitGenerator",
                    "defaultValue": "numpy.random.bit_generator.BitGenerator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d00hfg3p",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vnrcsi19",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "_0zy785m",
            "name": "BitGenerator.spawn",
            "description": "spawn(n_children)\n    \n    Create new independent child bit generators.\n    \n    See :ref:`seedsequence-spawn` for additional notes on spawning\n    children.  Some bit generators also implement ``jumped``\n    as a different approach for creating independent streams.\n    \n    .. versionadded:: 1.25.0\n    \n    Parameters\n    ----------\n    n_children : int\n    \n    Returns\n    -------\n    child_bit_generators : list of BitGenerators\n    \n    Raises\n    ------\n    TypeError\n        When the underlying SeedSequence does not implement spawning.\n    \n    See Also\n    --------\n    random.Generator.spawn, random.SeedSequence.spawn :\n        Equivalent method on the generator and seed sequence.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6c26fe5515c9e5257d222a8700cf3e2eb747d001e43f37b0bc43e289f208142b",
            "fields": [
                {
                    "id": "vh88vxzm",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.bit_generator.BitGenerator.spawn object",
                    "type": "Object:numpy.random.bit_generator.BitGenerator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f42s7r5c",
                    "encoding": "",
                    "name": "n_children",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7akqwj82",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.bit_generator.BitGenerator.spawn",
                    "defaultValue": "numpy.matlib.numpy.random.bit_generator.BitGenerator.spawn",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yiewfg37",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l1paa2dj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "y7p5nlgg",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9yad5ntj",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.bit_generator.BitGenerator",
                    "defaultValue": "numpy.random.bit_generator.BitGenerator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vbiizw2q",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zqomj0xd",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "zpuh3vtn",
            "name": "Generator.__init__",
            "description": "\nGenerator(bit_generator)\n    \n    Container for the BitGenerators.\n    \n    `Generator` exposes a number of methods for generating random\n    numbers drawn from a variety of probability distributions. In addition to\n    the distribution-specific arguments, each method takes a keyword argument\n    `size` that defaults to ``None``. If `size` is ``None``, then a single\n    value is generated and returned. If `size` is an integer, then a 1-D\n    array filled with generated values is returned. If `size` is a tuple,\n    then an array with that shape is filled and returned.\n    \n    The function :func:`numpy.random.default_rng` will instantiate\n    a `Generator` with numpy's default `BitGenerator`.\n    \n    **No Compatibility Guarantee**\n    \n    `Generator` does not provide a version compatibility guarantee. In\n    particular, as better algorithms evolve the bit stream may change.\n    \n    Parameters\n    ----------\n    bit_generator : BitGenerator\n        BitGenerator to use as the core generator.\n    \n    Notes\n    -----\n    The Python stdlib module :external+python:mod:`random` contains\n    pseudo-random number generator with a number of methods that are similar\n    to the ones available in `Generator`.\n    It uses Mersenne Twister, and this bit generator can\n    be accessed using `MT19937`. `Generator`, besides being\n    NumPy-aware, has the advantage that it provides a much larger number\n    of probability distributions to choose from.\n    \n    Examples\n    --------\n    >>> from numpy.random import Generator, PCG64\n    >>> rng = Generator(PCG64())\n    >>> rng.standard_normal()\n    -0.203  # random\n    \n    See Also\n    --------\n    default_rng : Recommended constructor for `Generator`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d32a2fb70c1407a2d92fae419131352f9d721e56364d83911ceaf0fdee0aaef7",
            "fields": [
                {
                    "id": "p54nr5c1",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to Generator object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "kch11glu",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k5_8c89z",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6f12udrp",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.__init__",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ub5ncz1a",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m0qm32c3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "69warvui",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "73mc0hco",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xv667wi9",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nuz4_6za",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "q1zae3ug",
            "name": "Generator.beta",
            "description": "beta(a, b, size=None)\n    \n    Draw samples from a Beta distribution.\n    \n    The Beta distribution is a special case of the Dirichlet distribution,\n    and is related to the Gamma distribution. It has the probability\n    distribution function\n    \n    .. math:: f(x; a,b) = \\frac{1}{B(\\alpha, \\beta)} x^{\\alpha - 1}\n                                                     (1 - x)^{\\beta - 1},\n    \n    where the normalization, B, is the beta function,\n    \n    .. math:: B(\\alpha, \\beta) = \\int_0^1 t^{\\alpha - 1}\n                                 (1 - t)^{\\beta - 1} dt.\n    \n    It is often seen in Bayesian inference and order statistics.\n    \n    Parameters\n    ----------\n    a : float or array_like of floats\n        Alpha, positive (>0).\n    b : float or array_like of floats\n        Beta, positive (>0).\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``a`` and ``b`` are both scalars.\n        Otherwise, ``np.broadcast(a, b).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized beta distribution.\n    \n    Examples\n    -------- \n    The beta distribution has mean a/(a+b). If ``a == b`` and both \n    are > 1, the distribution is symmetric with mean 0.5.\n    \n    >>> rng = np.random.default_rng()\n    >>> a, b, size = 2.0, 2.0, 10000\n    >>> sample = rng.beta(a=a, b=b, size=size)\n    >>> np.mean(sample)\n    0.5047328775385895  # may vary\n    \n    Otherwise the distribution is skewed left or right according to\n    whether ``a`` or ``b`` is greater. The distribution is mirror\n    symmetric. See for example:\n    \n    >>> a, b, size = 2, 7, 10000\n    >>> sample_left = rng.beta(a=a, b=b, size=size)\n    >>> sample_right = rng.beta(a=b, b=a, size=size)\n    >>> m_left, m_right = np.mean(sample_left), np.mean(sample_right)\n    >>> print(m_left, m_right)\n    0.2238596793678923 0.7774613834041182  # may vary\n    >>> print(m_left - a/(a+b))\n    0.001637457145670096  # may vary\n    >>> print(m_right - b/(a+b))\n    -0.0003163943736596009  # may vary\n    \n    Display the histogram of the two samples:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> plt.hist([sample_left, sample_right], \n    ...          50, density=True, histtype='bar')\n    >>> plt.show()\n    \n    References\n    ----------\n    .. [1] Wikipedia, \"Beta distribution\",\n           https://en.wikipedia.org/wiki/Beta_distribution",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2d9c0c2edee382c16e0bb9cdc9bc26df4a596737e791ce4042587e589c8b80de",
            "fields": [
                {
                    "id": "yh9k6c9f",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.beta object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jkel6mwe",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Alpha, positive (>0).",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s2ffqznt",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Beta, positive (>0).",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5blndzyz",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``a`` and ``b`` are both scalars.\nOtherwise, ``np.broadcast(a, b).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gii8si3r",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.beta",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.beta",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7kk625p_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gvz92m9z",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "_p7mvm0o",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h3rlhz8c",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3ejmy_ue",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4li9l4jv",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "ar4na8ka",
            "name": "Generator.binomial",
            "description": "binomial(n, p, size=None)\n    \n    Draw samples from a binomial distribution.\n    \n    Samples are drawn from a binomial distribution with specified\n    parameters, n trials and p probability of success where\n    n an integer >= 0 and p is in the interval [0,1]. (n may be\n    input as a float, but it is truncated to an integer in use)\n    \n    Parameters\n    ----------\n    n : int or array_like of ints\n        Parameter of the distribution, >= 0. Floats are also accepted,\n        but they will be truncated to integers.\n    p : float or array_like of floats\n        Parameter of the distribution, >= 0 and <=1.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``n`` and ``p`` are both scalars.\n        Otherwise, ``np.broadcast(n, p).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized binomial distribution, where\n        each sample is equal to the number of successes over the n trials.\n    \n    See Also\n    --------\n    scipy.stats.binom : probability density function, distribution or\n        cumulative density function, etc.\n    \n    Notes\n    -----\n    The probability mass function (PMF) for the binomial distribution is\n    \n    .. math:: P(N) = \\binom{n}{N}p^N(1-p)^{n-N},\n    \n    where :math:`n` is the number of trials, :math:`p` is the probability\n    of success, and :math:`N` is the number of successes.\n    \n    When estimating the standard error of a proportion in a population by\n    using a random sample, the normal distribution works well unless the\n    product p*n <=5, where p = population proportion estimate, and n =\n    number of samples, in which case the binomial distribution is used\n    instead. For example, a sample of 15 people shows 4 who are left\n    handed, and 11 who are right handed. Then p = 4/15 = 27%. 0.27*15 = 4,\n    so the binomial distribution should be used in this case.\n    \n    References\n    ----------\n    .. [1] Dalgaard, Peter, \"Introductory Statistics with R\",\n           Springer-Verlag, 2002.\n    .. [2] Glantz, Stanton A. \"Primer of Biostatistics.\", McGraw-Hill,\n           Fifth Edition, 2002.\n    .. [3] Lentner, Marvin, \"Elementary Applied Statistics\", Bogden\n           and Quigley, 1972.\n    .. [4] Weisstein, Eric W. \"Binomial Distribution.\" From MathWorld--A\n           Wolfram Web Resource.\n           https://mathworld.wolfram.com/BinomialDistribution.html\n    .. [5] Wikipedia, \"Binomial distribution\",\n           https://en.wikipedia.org/wiki/Binomial_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> rng = np.random.default_rng()\n    >>> n, p, size = 10, .5, 10000  \n    >>> s = rng.binomial(n, p, 10000)\n    \n    Assume a company drills 9 wild-cat oil exploration wells, each with\n    an estimated probability of success of ``p=0.1``. All nine wells fail. \n    What is the probability of that happening?\n    \n    Over ``size = 20,000`` trials the probability of this happening \n    is on average:\n    \n    >>> n, p, size = 9, 0.1, 20000\n    >>> np.sum(rng.binomial(n=n, p=p, size=size) == 0)/size\n    0.39015  # may vary\n    \n    The following can be used to visualize a sample with ``n=100``, \n    ``p=0.4`` and the corresponding probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.stats import binom\n    >>> n, p, size = 100, 0.4, 10000\n    >>> sample = rng.binomial(n, p, size=size)\n    >>> count, bins, _ = plt.hist(sample, 30, density=True)\n    >>> x = np.arange(n)\n    >>> y = binom.pmf(x, n, p)\n    >>> plt.plot(x, y, linewidth=2, color='r')",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ec6cd7b88a217403bed79855809f49ed62c6f4558783576263ba0a010b921c6a",
            "fields": [
                {
                    "id": "e87mm7xc",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.binomial object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kgh2p6lv",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "Parameter of the distribution, >= 0. Floats are also accepted,\nbut they will be truncated to integers.",
                    "type": "int or arraylike of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d5gfw96y",
                    "encoding": "",
                    "name": "p",
                    "value": "",
                    "defaultValue": "",
                    "description": "Parameter of the distribution, >= 0 and <=1.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wrck89zt",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``n`` and ``p`` are both scalars.\nOtherwise, ``np.broadcast(n, p).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "or6nw210",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.binomial",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.binomial",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_mkw7nrv",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dq88hyb7",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "p3ygniwa",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ahro3e7h",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tyneparx",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0is0jxyy",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "jld9dcgb",
            "name": "Generator.bytes",
            "description": "bytes(length)\n    \n    Return random bytes.\n    \n    Parameters\n    ----------\n    length : int\n        Number of random bytes.\n    \n    Returns\n    -------\n    out : bytes\n        String of length `length`.\n    \n    Notes\n    -----\n    This function generates random bytes from a discrete uniform \n    distribution. The generated bytes are independent from the CPU's \n    native endianness.\n    \n    Examples\n    --------\n    >>> rng = np.random.default_rng()\n    >>> rng.bytes(10)\n    b'\\xfeC\\x9b\\x86\\x17\\xf2\\xa1\\xafcp'  # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "fa401ecae8804142e53fa6c001f8b5b9f793baf842a9661b7b73532c72fd1755",
            "fields": [
                {
                    "id": "5tgyb98k",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.bytes object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i5upyzf3",
                    "encoding": "",
                    "name": "length",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of random bytes.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "29mdk2q4",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.bytes",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.bytes",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cbijdser",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7tniyaqw",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "cq2kei96",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "65rpprqj",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5lp7cgxd",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5tc2j68e",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "jhgr1e6s",
            "name": "Generator.chisquare",
            "description": "chisquare(df, size=None)\n    \n    Draw samples from a chi-square distribution.\n    \n    When `df` independent random variables, each with standard normal\n    distributions (mean 0, variance 1), are squared and summed, the\n    resulting distribution is chi-square (see Notes).  This distribution\n    is often used in hypothesis testing.\n    \n    Parameters\n    ----------\n    df : float or array_like of floats\n         Number of degrees of freedom, must be > 0.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``df`` is a scalar.  Otherwise,\n        ``np.array(df).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized chi-square distribution.\n    \n    Raises\n    ------\n    ValueError\n        When `df` <= 0 or when an inappropriate `size` (e.g. ``size=-1``)\n        is given.\n    \n    Notes\n    -----\n    The variable obtained by summing the squares of `df` independent,\n    standard normally distributed random variables:\n    \n    .. math:: Q = \\sum_{i=1}^{\\mathtt{df}} X^2_i\n    \n    is chi-square distributed, denoted\n    \n    .. math:: Q \\sim \\chi^2_k.\n    \n    The probability density function of the chi-squared distribution is\n    \n    .. math:: p(x) = \\frac{(1/2)^{k/2}}{\\Gamma(k/2)}\n                     x^{k/2 - 1} e^{-x/2},\n    \n    where :math:`\\Gamma` is the gamma function,\n    \n    .. math:: \\Gamma(x) = \\int_0^{-\\infty} t^{x - 1} e^{-t} dt.\n    \n    References\n    ----------\n    .. [1] NIST \"Engineering Statistics Handbook\"\n           https://www.itl.nist.gov/div898/handbook/eda/section3/eda3666.htm\n    \n    Examples\n    --------\n    >>> rng = np.random.default_rng()\n    >>> rng.chisquare(2,4)\n    array([ 1.89920014,  9.00867716,  3.13710533,  5.62318272]) # random\n    \n    The distribution of a chi-square random variable\n    with 20 degrees of freedom looks as follows:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> import scipy.stats as stats\n    >>> s = rng.chisquare(20, 10000)\n    >>> count, bins, _ = plt.hist(s, 30, density=True)\n    >>> x = np.linspace(0, 60, 1000)\n    >>> plt.plot(x, stats.chi2.pdf(x, df=20))\n    >>> plt.xlim([0, 60])\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1c4c2534d9b348c2c191844c13d0151dcf8639d3474defa8860cfa2ca515508d",
            "fields": [
                {
                    "id": "dz6fjey1",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.chisquare object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ffgpqh83",
                    "encoding": "",
                    "name": "df",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of degrees of freedom, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b96vbuk5",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``df`` is a scalar.  Otherwise,\n``np.array(df).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wirm8ect",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.chisquare",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.chisquare",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a0060m7g",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "by_y4_i8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "1sblxl3c",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uolcxtle",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u9mrmn02",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gz4kd4kl",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "l4gwithx",
            "name": "Generator.choice",
            "description": "choice(a, size=None, replace=True, p=None, axis=0, shuffle=True)\n    \n    Generates a random sample from a given array\n    \n    Parameters\n    ----------\n    a : {array_like, int}\n        If an ndarray, a random sample is generated from its elements.\n        If an int, the random sample is generated from np.arange(a).\n    size : {int, tuple[int]}, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn from the 1-d `a`. If `a` has more\n        than one dimension, the `size` shape will be inserted into the\n        `axis` dimension, so the output ``ndim`` will be ``a.ndim - 1 +\n        len(size)``. Default is None, in which case a single value is\n        returned.\n    replace : bool, optional\n        Whether the sample is with or without replacement. Default is True,\n        meaning that a value of ``a`` can be selected multiple times.\n    p : 1-D array_like, optional\n        The probabilities associated with each entry in a.\n        If not given, the sample assumes a uniform distribution over all\n        entries in ``a``.\n    axis : int, optional\n        The axis along which the selection is performed. The default, 0,\n        selects by row.\n    shuffle : bool, optional\n        Whether the sample is shuffled when sampling without replacement.\n        Default is True, False provides a speedup.\n    \n    Returns\n    -------\n    samples : single item or ndarray\n        The generated random samples\n    \n    Raises\n    ------\n    ValueError\n        If a is an int and less than zero, if p is not 1-dimensional, if\n        a is array-like with a size 0, if p is not a vector of\n        probabilities, if a and p have different lengths, or if\n        replace=False and the sample size is greater than the population\n        size.\n    \n    See Also\n    --------\n    integers, shuffle, permutation\n    \n    Notes\n    -----\n    Setting user-specified probabilities through ``p`` uses a more general but less\n    efficient sampler than the default. The general sampler produces a different sample\n    than the optimized sampler even if each element of ``p`` is 1 / len(a).\n    \n    ``p`` must sum to 1 when cast to ``float64``. To ensure this, you may wish\n    to normalize using ``p = p / np.sum(p, dtype=float)``.\n    \n    When passing ``a`` as an integer type and ``size`` is not specified, the return\n    type is a native Python ``int``.\n    \n    Examples\n    --------\n    Generate a uniform random sample from np.arange(5) of size 3:\n    \n    >>> rng = np.random.default_rng()\n    >>> rng.choice(5, 3)\n    array([0, 3, 4]) # random\n    >>> #This is equivalent to rng.integers(0,5,3)\n    \n    Generate a non-uniform random sample from np.arange(5) of size 3:\n    \n    >>> rng.choice(5, 3, p=[0.1, 0, 0.3, 0.6, 0])\n    array([3, 3, 0]) # random\n    \n    Generate a uniform random sample from np.arange(5) of size 3 without\n    replacement:\n    \n    >>> rng.choice(5, 3, replace=False)\n    array([3,1,0]) # random\n    >>> #This is equivalent to rng.permutation(np.arange(5))[:3]\n    \n    Generate a uniform random sample from a 2-D array along the first\n    axis (the default), without replacement:\n    \n    >>> rng.choice([[0, 1, 2], [3, 4, 5], [6, 7, 8]], 2, replace=False)\n    array([[3, 4, 5], # random\n           [0, 1, 2]])\n    \n    Generate a non-uniform random sample from np.arange(5) of size\n    3 without replacement:\n    \n    >>> rng.choice(5, 3, replace=False, p=[0.1, 0, 0.3, 0.6, 0])\n    array([2, 3, 0]) # random\n    \n    Any of the above can be repeated with an arbitrary array-like\n    instead of just integers. For instance:\n    \n    >>> aa_milne_arr = ['pooh', 'rabbit', 'piglet', 'Christopher']\n    >>> rng.choice(aa_milne_arr, 5, p=[0.5, 0.1, 0.1, 0.3])\n    array(['pooh', 'pooh', 'pooh', 'Christopher', 'piglet'], # random\n          dtype='<U11')",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a2ebfce7a10e69ce31a1a4c993a257a2f0260c7b1c32ce532b922a84aa5f7120",
            "fields": [
                {
                    "id": "go9r1tqh",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.choice object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o0b987d2",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "If an ndarray, a random sample is generated from its elements.\nIf an int, the random sample is generated from np.arange(a).",
                    "type": "{arraylike, int}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5joqzd7u",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn from the 1-d `a`. If `a` has more\nthan one dimension, the `size` shape will be inserted into the\n`axis` dimension, so the output ``ndim`` will be ``a.ndim - 1 +\nlen(size)``. Default is None, in which case a single value is\nreturned.",
                    "type": "{int, tuple[int]}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ymvb84x_",
                    "encoding": "",
                    "name": "replace",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether the sample is with or without replacement. Default is True,\nmeaning that a value of ``a`` can be selected multiple times.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o_2zxy_b",
                    "encoding": "",
                    "name": "p",
                    "value": "",
                    "defaultValue": "",
                    "description": "The probabilities associated with each entry in a.\nIf not given, the sample assumes a uniform distribution over all\nentries in ``a``.",
                    "type": "1-D arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "29sdxlzr",
                    "encoding": "",
                    "name": "axis",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "The axis along which the selection is performed. The default, 0,\nselects by row.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qxvepj0p",
                    "encoding": "",
                    "name": "shuffle",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether the sample is shuffled when sampling without replacement.\nDefault is True, False provides a speedup.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q556q3xv",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.choice",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.choice",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t8ftoe__",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ml4vz3if",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "1mvm7wa6",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5nz5ow9e",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ephmur3a",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pwdx8etk",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "msyh6lb0",
            "name": "Generator.dirichlet",
            "description": "dirichlet(alpha, size=None)\n    \n    Draw samples from the Dirichlet distribution.\n    \n    Draw `size` samples of dimension k from a Dirichlet distribution. A\n    Dirichlet-distributed random variable can be seen as a multivariate\n    generalization of a Beta distribution. The Dirichlet distribution\n    is a conjugate prior of a multinomial distribution in Bayesian\n    inference.\n    \n    Parameters\n    ----------\n    alpha : sequence of floats, length k\n        Parameter of the distribution (length ``k`` for sample of\n        length ``k``).\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        vector of length ``k`` is returned.\n    \n    Returns\n    -------\n    samples : ndarray,\n        The drawn samples, of shape ``(size, k)``.\n    \n    Raises\n    ------\n    ValueError\n        If any value in ``alpha`` is less than zero\n    \n    Notes\n    -----\n    The Dirichlet distribution is a distribution over vectors\n    :math:`x` that fulfil the conditions :math:`x_i>0` and\n    :math:`\\sum_{i=1}^k x_i = 1`.\n    \n    The probability density function :math:`p` of a\n    Dirichlet-distributed random vector :math:`X` is\n    proportional to\n    \n    .. math:: p(x) \\propto \\prod_{i=1}^{k}{x^{\\alpha_i-1}_i},\n    \n    where :math:`\\alpha` is a vector containing the positive\n    concentration parameters.\n    \n    The method uses the following property for computation: let :math:`Y`\n    be a random vector which has components that follow a standard gamma\n    distribution, then :math:`X = \\frac{1}{\\sum_{i=1}^k{Y_i}} Y`\n    is Dirichlet-distributed\n    \n    References\n    ----------\n    .. [1] David McKay, \"Information Theory, Inference and Learning\n           Algorithms,\" chapter 23,\n           https://www.inference.org.uk/mackay/itila/\n    .. [2] Wikipedia, \"Dirichlet distribution\",\n           https://en.wikipedia.org/wiki/Dirichlet_distribution\n    \n    Examples\n    --------\n    Taking an example cited in Wikipedia, this distribution can be used if\n    one wanted to cut strings (each of initial length 1.0) into K pieces\n    with different lengths, where each piece had, on average, a designated\n    average length, but allowing some variation in the relative sizes of\n    the pieces.\n    \n    >>> rng = np.random.default_rng()\n    >>> s = rng.dirichlet((10, 5, 3), 20).transpose()\n    \n    >>> import matplotlib.pyplot as plt\n    >>> plt.barh(range(20), s[0])\n    >>> plt.barh(range(20), s[1], left=s[0], color='g')\n    >>> plt.barh(range(20), s[2], left=s[0]+s[1], color='r')\n    >>> plt.title(\"Lengths of Strings\")",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e4f7d9254120a6f4c14afc4d86323c97d9129e5954342bdd68e60428f91148c2",
            "fields": [
                {
                    "id": "2hb_jncm",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.dirichlet object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d0qe1k4q",
                    "encoding": "",
                    "name": "alpha",
                    "value": "",
                    "defaultValue": "",
                    "description": "Parameter of the distribution (length ``k`` for sample of\nlength ``k``).",
                    "type": "sequence of floats, length k",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ufgd7jdc",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nvector of length ``k`` is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p6xj0h7t",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.dirichlet",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.dirichlet",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hzeb37zw",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o6ihcfee",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "fsh8et1v",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "omizl8_9",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pi8kvceo",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qzikriuk",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "rvwztma8",
            "name": "Generator.exponential",
            "description": "exponential(scale=1.0, size=None)\n    \n    Draw samples from an exponential distribution.\n    \n    Its probability density function is\n    \n    .. math:: f(x; \\frac{1}{\\beta}) = \\frac{1}{\\beta} \\exp(-\\frac{x}{\\beta}),\n    \n    for ``x > 0`` and 0 elsewhere. :math:`\\beta` is the scale parameter,\n    which is the inverse of the rate parameter :math:`\\lambda = 1/\\beta`.\n    The rate parameter is an alternative, widely used parameterization\n    of the exponential distribution [3]_.\n    \n    The exponential distribution is a continuous analogue of the\n    geometric distribution.  It describes many common situations, such as\n    the size of raindrops measured over many rainstorms [1]_, or the time\n    between page requests to Wikipedia [2]_.\n    \n    Parameters\n    ----------\n    scale : float or array_like of floats\n        The scale parameter, :math:`\\beta = 1/\\lambda`. Must be\n        non-negative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``scale`` is a scalar.  Otherwise,\n        ``np.array(scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized exponential distribution.\n    \n    Examples\n    --------\n    Assume a company has 10000 customer support agents and the time \n    between customer calls is exponentially distributed and that the \n    average time between customer calls is 4 minutes.\n    \n    >>> scale, size = 4, 10000\n    >>> rng = np.random.default_rng()\n    >>> time_between_calls = rng.exponential(scale=scale, size=size)\n    \n    What is the probability that a customer will call in the next \n    4 to 5 minutes? \n    \n    >>> x = ((time_between_calls < 5).sum())/size\n    >>> y = ((time_between_calls < 4).sum())/size\n    >>> x - y\n    0.08  # may vary\n    \n    The corresponding distribution can be visualized as follows:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> scale, size = 4, 10000\n    >>> rng = np.random.default_rng()\n    >>> sample = rng.exponential(scale=scale, size=size)\n    >>> count, bins, _ = plt.hist(sample, 30, density=True)\n    >>> plt.plot(bins, scale**(-1)*np.exp(-scale**-1*bins), linewidth=2, color='r')\n    >>> plt.show()\n    \n    References\n    ----------\n    .. [1] Peyton Z. Peebles Jr., \"Probability, Random Variables and\n           Random Signal Principles\", 4th ed, 2001, p. 57.\n    .. [2] Wikipedia, \"Poisson process\",\n           https://en.wikipedia.org/wiki/Poisson_process\n    .. [3] Wikipedia, \"Exponential distribution\",\n           https://en.wikipedia.org/wiki/Exponential_distribution",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "eaea8ded57c8cacaaba92902095d51cec336e024742bf247c96788b2db06245d",
            "fields": [
                {
                    "id": "a1cq8efk",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.exponential object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "37pj6_32",
                    "encoding": "",
                    "name": "scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "The scale parameter, :math:`\\beta = 1/\\lambda`. Must be\nnon-negative.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4rsqvfk5",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``scale`` is a scalar.  Otherwise,\n``np.array(scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tc_r1h6u",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.exponential",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.exponential",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k578kq8z",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_5942ebz",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "18cy6pu3",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xwt7nne4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c9yqvmqv",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xw2x40rp",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "_qrr579i",
            "name": "Generator.f",
            "description": "f(dfnum, dfden, size=None)\n    \n    Draw samples from an F distribution.\n    \n    Samples are drawn from an F distribution with specified parameters,\n    `dfnum` (degrees of freedom in numerator) and `dfden` (degrees of\n    freedom in denominator), where both parameters must be greater than\n    zero.\n    \n    The random variate of the F distribution (also known as the\n    Fisher distribution) is a continuous probability distribution\n    that arises in ANOVA tests, and is the ratio of two chi-square\n    variates.\n    \n    Parameters\n    ----------\n    dfnum : float or array_like of floats\n        Degrees of freedom in numerator, must be > 0.\n    dfden : float or array_like of float\n        Degrees of freedom in denominator, must be > 0.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``dfnum`` and ``dfden`` are both scalars.\n        Otherwise, ``np.broadcast(dfnum, dfden).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Fisher distribution.\n    \n    See Also\n    --------\n    scipy.stats.f : probability density function, distribution or\n        cumulative density function, etc.\n    \n    Notes\n    -----\n    The F statistic is used to compare in-group variances to between-group\n    variances. Calculating the distribution depends on the sampling, and\n    so it is a function of the respective degrees of freedom in the\n    problem.  The variable `dfnum` is the number of samples minus one, the\n    between-groups degrees of freedom, while `dfden` is the within-groups\n    degrees of freedom, the sum of the number of samples in each group\n    minus the number of groups.\n    \n    References\n    ----------\n    .. [1] Glantz, Stanton A. \"Primer of Biostatistics.\", McGraw-Hill,\n           Fifth Edition, 2002.\n    .. [2] Wikipedia, \"F-distribution\",\n           https://en.wikipedia.org/wiki/F-distribution\n    \n    Examples\n    --------\n    An example from Glantz[1], pp 47-40:\n    \n    Two groups, children of diabetics (25 people) and children from people\n    without diabetes (25 controls). Fasting blood glucose was measured,\n    case group had a mean value of 86.1, controls had a mean value of\n    82.2. Standard deviations were 2.09 and 2.49 respectively. Are these\n    data consistent with the null hypothesis that the parents diabetic\n    status does not affect their children's blood glucose levels?\n    Calculating the F statistic from the data gives a value of 36.01.\n    \n    Draw samples from the distribution:\n    \n    >>> dfnum = 1. # between group degrees of freedom\n    >>> dfden = 48. # within groups degrees of freedom\n    >>> rng = np.random.default_rng()\n    >>> s = rng.f(dfnum, dfden, 1000)\n    \n    The lower bound for the top 1% of the samples is :\n    \n    >>> np.sort(s)[-10]\n    7.61988120985 # random\n    \n    So there is about a 1% chance that the F statistic will exceed 7.62,\n    the measured value is 36, so the null hypothesis is rejected at the 1%\n    level.\n    \n    The corresponding probability density function for ``n = 20`` \n    and ``m = 20`` is:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> from scipy import stats\n    >>> dfnum, dfden, size = 20, 20, 10000\n    >>> s = rng.f(dfnum=dfnum, dfden=dfden, size=size)\n    >>> bins, density, _ = plt.hist(s, 30, density=True)\n    >>> x = np.linspace(0, 5, 1000)\n    >>> plt.plot(x, stats.f.pdf(x, dfnum, dfden))\n    >>> plt.xlim([0, 5])\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2ef0a535c2e4432e2a89e987ecf5b07afbbfc36f2d430d587c7856f20813a74c",
            "fields": [
                {
                    "id": "8o_axadr",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.f object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bwf92385",
                    "encoding": "",
                    "name": "dfnum",
                    "value": "",
                    "defaultValue": "",
                    "description": "Degrees of freedom in numerator, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "46nyckri",
                    "encoding": "",
                    "name": "dfden",
                    "value": "",
                    "defaultValue": "",
                    "description": "Degrees of freedom in denominator, must be > 0.",
                    "type": "float or arraylike of float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i76wjur9",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``dfnum`` and ``dfden`` are both scalars.\nOtherwise, ``np.broadcast(dfnum, dfden).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7xdjw_y_",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.f",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.f",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tbifdh4o",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z3v41te9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "p_z8r83q",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y6npfb1q",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4uj1qzt7",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "46rb3fsj",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "ydx_aast",
            "name": "Generator.gamma",
            "description": "gamma(shape, scale=1.0, size=None)\n    \n    Draw samples from a Gamma distribution.\n    \n    Samples are drawn from a Gamma distribution with specified parameters,\n    `shape` (sometimes designated \"k\") and `scale` (sometimes designated\n    \"theta\"), where both parameters are > 0.\n    \n    Parameters\n    ----------\n    shape : float or array_like of floats\n        The shape of the gamma distribution. Must be non-negative.\n    scale : float or array_like of floats, optional\n        The scale of the gamma distribution. Must be non-negative.\n        Default is equal to 1.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``shape`` and ``scale`` are both scalars.\n        Otherwise, ``np.broadcast(shape, scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized gamma distribution.\n    \n    See Also\n    --------\n    scipy.stats.gamma : probability density function, distribution or\n        cumulative density function, etc.\n    \n    Notes\n    -----\n    The probability density for the Gamma distribution is\n    \n    .. math:: p(x) = x^{k-1}\\frac{e^{-x/\\theta}}{\\theta^k\\Gamma(k)},\n    \n    where :math:`k` is the shape and :math:`\\theta` the scale,\n    and :math:`\\Gamma` is the Gamma function.\n    \n    The Gamma distribution is often used to model the times to failure of\n    electronic components, and arises naturally in processes for which the\n    waiting times between Poisson distributed events are relevant.\n    \n    References\n    ----------\n    .. [1] Weisstein, Eric W. \"Gamma Distribution.\" From MathWorld--A\n           Wolfram Web Resource.\n           https://mathworld.wolfram.com/GammaDistribution.html\n    .. [2] Wikipedia, \"Gamma distribution\",\n           https://en.wikipedia.org/wiki/Gamma_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> shape, scale = 2., 2.  # mean=4, std=2*sqrt(2)\n    >>> rng = np.random.default_rng()\n    >>> s = rng.gamma(shape, scale, 1000)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> import scipy.special as sps  # doctest: +SKIP\n    >>> count, bins, _ = plt.hist(s, 50, density=True)\n    >>> y = bins**(shape-1)*(np.exp(-bins/scale) /  # doctest: +SKIP\n    ...                      (sps.gamma(shape)*scale**shape))\n    >>> plt.plot(bins, y, linewidth=2, color='r')  # doctest: +SKIP\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "aaa7b929c0b4eabd8f01419eb311af07ef7b13d4e1c9d9762af9da06aaee776a",
            "fields": [
                {
                    "id": "nb6h2mcr",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.gamma object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "womylva4",
                    "encoding": "",
                    "name": "shape",
                    "value": "",
                    "defaultValue": "",
                    "description": "The shape of the gamma distribution. Must be non-negative.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n9vxi3ys",
                    "encoding": "",
                    "name": "scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "The scale of the gamma distribution. Must be non-negative.\nDefault is equal to 1.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6osjm5je",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``shape`` and ``scale`` are both scalars.\nOtherwise, ``np.broadcast(shape, scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "phxsh8pk",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.gamma",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.gamma",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b5_sf1l4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bgv3x1jt",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "oq6j672c",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v80rvp70",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a6921ot1",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pcfbi9rf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "muzz8e82",
            "name": "Generator.geometric",
            "description": "geometric(p, size=None)\n    \n    Draw samples from the geometric distribution.\n    \n    Bernoulli trials are experiments with one of two outcomes:\n    success or failure (an example of such an experiment is flipping\n    a coin).  The geometric distribution models the number of trials\n    that must be run in order to achieve success.  It is therefore\n    supported on the positive integers, ``k = 1, 2, ...``.\n    \n    The probability mass function of the geometric distribution is\n    \n    .. math:: f(k) = (1 - p)^{k - 1} p\n    \n    where `p` is the probability of success of an individual trial.\n    \n    Parameters\n    ----------\n    p : float or array_like of floats\n        The probability of success of an individual trial.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``p`` is a scalar.  Otherwise,\n        ``np.array(p).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized geometric distribution.\n    \n    References\n    ----------\n    \n    .. [1] Wikipedia, \"Geometric distribution\",\n           https://en.wikipedia.org/wiki/Geometric_distribution\n    \n    Examples\n    --------\n    Draw 10,000 values from the geometric distribution, with the \n    probability of an individual success equal to ``p = 0.35``:\n    \n    >>> p, size = 0.35, 10000\n    >>> rng = np.random.default_rng()\n    >>> sample = rng.geometric(p=p, size=size)\n    \n    What proportion of trials succeeded after a single run?\n    \n    >>> (sample == 1).sum()/size\n    0.34889999999999999  # may vary\n    \n    The geometric distribution with ``p=0.35`` looks as follows:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, _ = plt.hist(sample, bins=30, density=True)\n    >>> plt.plot(bins, (1-p)**(bins-1)*p)\n    >>> plt.xlim([0, 25])\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b3736bacf0de8b50dabba0c2a99d254d43888b2deec25f198ad336ec843ec5ae",
            "fields": [
                {
                    "id": "1pkbbykf",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.geometric object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5aix55mu",
                    "encoding": "",
                    "name": "p",
                    "value": "",
                    "defaultValue": "",
                    "description": "The probability of success of an individual trial.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9gief_tx",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``p`` is a scalar.  Otherwise,\n``np.array(p).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mm0slomy",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.geometric",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.geometric",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n62qkf4m",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wvu4_a49",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "lr4rpgdw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t7lec7lt",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ci74sqhs",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i8vm9wzy",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "2xuy23vt",
            "name": "Generator.gumbel",
            "description": "gumbel(loc=0.0, scale=1.0, size=None)\n    \n    Draw samples from a Gumbel distribution.\n    \n    Draw samples from a Gumbel distribution with specified location and\n    scale.  For more information on the Gumbel distribution, see\n    Notes and References below.\n    \n    Parameters\n    ----------\n    loc : float or array_like of floats, optional\n        The location of the mode of the distribution. Default is 0.\n    scale : float or array_like of floats, optional\n        The scale parameter of the distribution. Default is 1. Must be non-\n        negative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``loc`` and ``scale`` are both scalars.\n        Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Gumbel distribution.\n    \n    See Also\n    --------\n    scipy.stats.gumbel_l\n    scipy.stats.gumbel_r\n    scipy.stats.genextreme\n    weibull\n    \n    Notes\n    -----\n    The Gumbel (or Smallest Extreme Value (SEV) or the Smallest Extreme\n    Value Type I) distribution is one of a class of Generalized Extreme\n    Value (GEV) distributions used in modeling extreme value problems.\n    The Gumbel is a special case of the Extreme Value Type I distribution\n    for maximums from distributions with \"exponential-like\" tails.\n    \n    The probability density for the Gumbel distribution is\n    \n    .. math:: p(x) = \\frac{e^{-(x - \\mu)/ \\beta}}{\\beta} e^{ -e^{-(x - \\mu)/\n              \\beta}},\n    \n    where :math:`\\mu` is the mode, a location parameter, and\n    :math:`\\beta` is the scale parameter.\n    \n    The Gumbel (named for German mathematician Emil Julius Gumbel) was used\n    very early in the hydrology literature, for modeling the occurrence of\n    flood events. It is also used for modeling maximum wind speed and\n    rainfall rates.  It is a \"fat-tailed\" distribution - the probability of\n    an event in the tail of the distribution is larger than if one used a\n    Gaussian, hence the surprisingly frequent occurrence of 100-year\n    floods. Floods were initially modeled as a Gaussian process, which\n    underestimated the frequency of extreme events.\n    \n    It is one of a class of extreme value distributions, the Generalized\n    Extreme Value (GEV) distributions, which also includes the Weibull and\n    Frechet.\n    \n    The function has a mean of :math:`\\mu + 0.57721\\beta` and a variance\n    of :math:`\\frac{\\pi^2}{6}\\beta^2`.\n    \n    References\n    ----------\n    .. [1] Gumbel, E. J., \"Statistics of Extremes,\"\n           New York: Columbia University Press, 1958.\n    .. [2] Reiss, R.-D. and Thomas, M., \"Statistical Analysis of Extreme\n           Values from Insurance, Finance, Hydrology and Other Fields,\"\n           Basel: Birkhauser Verlag, 2001.\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> rng = np.random.default_rng()\n    >>> mu, beta = 0, 0.1 # location and scale\n    >>> s = rng.gumbel(mu, beta, 1000)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, _ = plt.hist(s, 30, density=True)\n    >>> plt.plot(bins, (1/beta)*np.exp(-(bins - mu)/beta)\n    ...          * np.exp( -np.exp( -(bins - mu) /beta) ),\n    ...          linewidth=2, color='r')\n    >>> plt.show()\n    \n    Show how an extreme value distribution can arise from a Gaussian process\n    and compare to a Gaussian:\n    \n    >>> means = []\n    >>> maxima = []\n    >>> for i in range(0,1000) :\n    ...    a = rng.normal(mu, beta, 1000)\n    ...    means.append(a.mean())\n    ...    maxima.append(a.max())\n    >>> count, bins, _ = plt.hist(maxima, 30, density=True)\n    >>> beta = np.std(maxima) * np.sqrt(6) / np.pi\n    >>> mu = np.mean(maxima) - 0.57721*beta\n    >>> plt.plot(bins, (1/beta)*np.exp(-(bins - mu)/beta)\n    ...          * np.exp(-np.exp(-(bins - mu)/beta)),\n    ...          linewidth=2, color='r')\n    >>> plt.plot(bins, 1/(beta * np.sqrt(2 * np.pi))\n    ...          * np.exp(-(bins - mu)**2 / (2 * beta**2)),\n    ...          linewidth=2, color='g')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cbc505400d802b24aac0c70453589d69975ead066f6988440e2e3e001b7a44ca",
            "fields": [
                {
                    "id": "2bhy9vbe",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.gumbel object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pfb1v60c",
                    "encoding": "",
                    "name": "loc",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "The location of the mode of the distribution. Default is 0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x6rcucat",
                    "encoding": "",
                    "name": "scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "The scale parameter of the distribution. Default is 1. Must be non-\nnegative.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6_v28x7o",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``loc`` and ``scale`` are both scalars.\nOtherwise, ``np.broadcast(loc, scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cgslrlbj",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.gumbel",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.gumbel",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ugbo_n2w",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3sjl_afw",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "truhzdba",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d0o1occ7",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kojsjgye",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xk68elmh",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "7dt7s1hz",
            "name": "Generator.hypergeometric",
            "description": "hypergeometric(ngood, nbad, nsample, size=None)\n    \n    Draw samples from a Hypergeometric distribution.\n    \n    Samples are drawn from a hypergeometric distribution with specified\n    parameters, `ngood` (ways to make a good selection), `nbad` (ways to make\n    a bad selection), and `nsample` (number of items sampled, which is less\n    than or equal to the sum ``ngood + nbad``).\n    \n    Parameters\n    ----------\n    ngood : int or array_like of ints\n        Number of ways to make a good selection.  Must be nonnegative and\n        less than 10**9.\n    nbad : int or array_like of ints\n        Number of ways to make a bad selection.  Must be nonnegative and\n        less than 10**9.\n    nsample : int or array_like of ints\n        Number of items sampled.  Must be nonnegative and less than\n        ``ngood + nbad``.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if `ngood`, `nbad`, and `nsample`\n        are all scalars.  Otherwise, ``np.broadcast(ngood, nbad, nsample).size``\n        samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized hypergeometric distribution. Each\n        sample is the number of good items within a randomly selected subset of\n        size `nsample` taken from a set of `ngood` good items and `nbad` bad items.\n    \n    See Also\n    --------\n    multivariate_hypergeometric : Draw samples from the multivariate\n        hypergeometric distribution.\n    scipy.stats.hypergeom : probability density function, distribution or\n        cumulative density function, etc.\n    \n    Notes\n    -----\n    The probability mass function (PMF) for the Hypergeometric distribution is\n    \n    .. math:: P(x) = \\frac{\\binom{g}{x}\\binom{b}{n-x}}{\\binom{g+b}{n}},\n    \n    where :math:`0 \\le x \\le n` and :math:`n-b \\le x \\le g`\n    \n    for P(x) the probability of ``x`` good results in the drawn sample,\n    g = `ngood`, b = `nbad`, and n = `nsample`.\n    \n    Consider an urn with black and white marbles in it, `ngood` of them\n    are black and `nbad` are white. If you draw `nsample` balls without\n    replacement, then the hypergeometric distribution describes the\n    distribution of black balls in the drawn sample.\n    \n    Note that this distribution is very similar to the binomial\n    distribution, except that in this case, samples are drawn without\n    replacement, whereas in the Binomial case samples are drawn with\n    replacement (or the sample space is infinite). As the sample space\n    becomes large, this distribution approaches the binomial.\n    \n    The arguments `ngood` and `nbad` each must be less than `10**9`. For\n    extremely large arguments, the algorithm that is used to compute the\n    samples [4]_ breaks down because of loss of precision in floating point\n    calculations.  For such large values, if `nsample` is not also large,\n    the distribution can be approximated with the binomial distribution,\n    `binomial(n=nsample, p=ngood/(ngood + nbad))`.\n    \n    References\n    ----------\n    .. [1] Lentner, Marvin, \"Elementary Applied Statistics\", Bogden\n           and Quigley, 1972.\n    .. [2] Weisstein, Eric W. \"Hypergeometric Distribution.\" From\n           MathWorld--A Wolfram Web Resource.\n           https://mathworld.wolfram.com/HypergeometricDistribution.html\n    .. [3] Wikipedia, \"Hypergeometric distribution\",\n           https://en.wikipedia.org/wiki/Hypergeometric_distribution\n    .. [4] Stadlober, Ernst, \"The ratio of uniforms approach for generating\n           discrete random variates\", Journal of Computational and Applied\n           Mathematics, 31, pp. 181-189 (1990).\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> rng = np.random.default_rng()\n    >>> ngood, nbad, nsamp = 100, 2, 10\n    # number of good, number of bad, and number of samples\n    >>> s = rng.hypergeometric(ngood, nbad, nsamp, 1000)\n    >>> from matplotlib.pyplot import hist\n    >>> hist(s)\n    #   note that it is very unlikely to grab both bad items\n    \n    Suppose you have an urn with 15 white and 15 black marbles.\n    If you pull 15 marbles at random, how likely is it that\n    12 or more of them are one color?\n    \n    >>> s = rng.hypergeometric(15, 15, 15, 100000)\n    >>> sum(s>=12)/100000. + sum(s<=3)/100000.\n    #   answer = 0.003 ... pretty unlikely!",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6f38ba629142252ade788ff74e98a101903c2c37e638ab63f1a924faa7023586",
            "fields": [
                {
                    "id": "26e1365j",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.hypergeometric object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o5kjwkwl",
                    "encoding": "",
                    "name": "ngood",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of ways to make a good selection.  Must be nonnegative and\nless than 10**9.",
                    "type": "int or arraylike of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3ggtq0z1",
                    "encoding": "",
                    "name": "nbad",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of ways to make a bad selection.  Must be nonnegative and\nless than 10**9.",
                    "type": "int or arraylike of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dmu48pqp",
                    "encoding": "",
                    "name": "nsample",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of items sampled.  Must be nonnegative and less than\n``ngood + nbad``.",
                    "type": "int or arraylike of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w84shxaf",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if `ngood`, `nbad`, and `nsample`\nare all scalars.  Otherwise, ``np.broadcast(ngood, nbad, nsample).size``\nsamples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wvw6jr88",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.hypergeometric",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.hypergeometric",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o36r5el1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i_ox7_bw",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "4hiwz3fw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "690s9kf6",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2_3ichxn",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r062qzos",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "p_6uss3n",
            "name": "Generator.integers",
            "description": "integers(low, high=None, size=None, dtype=np.int64, endpoint=False)\n    \n    Return random integers from `low` (inclusive) to `high` (exclusive), or\n    if endpoint=True, `low` (inclusive) to `high` (inclusive). Replaces\n    `RandomState.randint` (with endpoint=False) and\n    `RandomState.random_integers` (with endpoint=True)\n    \n    Return random integers from the \"discrete uniform\" distribution of\n    the specified dtype. If `high` is None (the default), then results are\n    from 0 to `low`.\n    \n    Parameters\n    ----------\n    low : int or array-like of ints\n        Lowest (signed) integers to be drawn from the distribution (unless\n        ``high=None``, in which case this parameter is 0 and this value is\n        used for `high`).\n    high : int or array-like of ints, optional\n        If provided, one above the largest (signed) integer to be drawn\n        from the distribution (see above for behavior if ``high=None``).\n        If array-like, must contain integer values\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    dtype : dtype, optional\n        Desired dtype of the result. Byteorder must be native.\n        The default value is np.int64.\n    endpoint : bool, optional\n        If true, sample from the interval [low, high] instead of the\n        default [low, high)\n        Defaults to False\n    \n    Returns\n    -------\n    out : int or ndarray of ints\n        `size`-shaped array of random integers from the appropriate\n        distribution, or a single such random int if `size` not provided.\n    \n    Notes\n    -----\n    When using broadcasting with uint64 dtypes, the maximum value (2**64)\n    cannot be represented as a standard integer type. The high array (or\n    low if high is None) must have object dtype, e.g., array([2**64]).\n    \n    Examples\n    --------\n    >>> rng = np.random.default_rng()\n    >>> rng.integers(2, size=10)\n    array([1, 0, 0, 0, 1, 1, 0, 0, 1, 0])  # random\n    >>> rng.integers(1, size=10)\n    array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    \n    Generate a 2 x 4 array of ints between 0 and 4, inclusive:\n    \n    >>> rng.integers(5, size=(2, 4))\n    array([[4, 0, 2, 1],\n           [3, 2, 2, 0]])  # random\n    \n    Generate a 1 x 3 array with 3 different upper bounds\n    \n    >>> rng.integers(1, [3, 5, 10])\n    array([2, 2, 9])  # random\n    \n    Generate a 1 by 3 array with 3 different lower bounds\n    \n    >>> rng.integers([1, 5, 7], 10)\n    array([9, 8, 7])  # random\n    \n    Generate a 2 by 4 array using broadcasting with dtype of uint8\n    \n    >>> rng.integers([1, 3, 5, 7], [[10], [20]], dtype=np.uint8)\n    array([[ 8,  6,  9,  7],\n           [ 1, 16,  9, 12]], dtype=uint8)  # random\n    \n    References\n    ----------\n    .. [1] Daniel Lemire., \"Fast Random Integer Generation in an Interval\",\n           ACM Transactions on Modeling and Computer Simulation 29 (1), 2019,\n           https://arxiv.org/abs/1805.10941.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0091c61d0dcc0df9c824622e3da43002401fd8894cf4887ff8c6ad0063405ad0",
            "fields": [
                {
                    "id": "nbt_rvjp",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.integers object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5ixkhtt5",
                    "encoding": "",
                    "name": "low",
                    "value": "",
                    "defaultValue": "",
                    "description": "Lowest (signed) integers to be drawn from the distribution (unless\n``high=None``, in which case this parameter is 0 and this value is\nused for `high`).",
                    "type": "int or array-like of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lppwibvw",
                    "encoding": "",
                    "name": "high",
                    "value": "",
                    "defaultValue": "",
                    "description": "If provided, one above the largest (signed) integer to be drawn\nfrom the distribution (see above for behavior if ``high=None``).\nIf array-like, must contain integer values",
                    "type": "int or array-like of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "akz9vml7",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cralg_zu",
                    "encoding": "",
                    "name": "dtype",
                    "value": "builtins.type",
                    "defaultValue": "builtins.type",
                    "description": "Desired dtype of the result. Byteorder must be native.\nThe default value is np.int64.",
                    "type": "builtins.type",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "god2aepn",
                    "encoding": "",
                    "name": "endpoint",
                    "value": false,
                    "defaultValue": false,
                    "description": "If true, sample from the interval [low, high] instead of the\ndefault [low, high)\nDefaults to False",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s6ils11f",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.integers",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.integers",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xn5pb_9n",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1jysun14",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ybbs4_df",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pheplqf8",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "31mkgmo4",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3_h4lot_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "wd7uyb8e",
            "name": "Generator.laplace",
            "description": "laplace(loc=0.0, scale=1.0, size=None)\n    \n    Draw samples from the Laplace or double exponential distribution with\n    specified location (or mean) and scale (decay).\n    \n    The Laplace distribution is similar to the Gaussian/normal distribution,\n    but is sharper at the peak and has fatter tails. It represents the\n    difference between two independent, identically distributed exponential\n    random variables.\n    \n    Parameters\n    ----------\n    loc : float or array_like of floats, optional\n        The position, :math:`\\mu`, of the distribution peak. Default is 0.\n    scale : float or array_like of floats, optional\n        :math:`\\lambda`, the exponential decay. Default is 1. Must be non-\n        negative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``loc`` and ``scale`` are both scalars.\n        Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Laplace distribution.\n    \n    Notes\n    -----\n    It has the probability density function\n    \n    .. math:: f(x; \\mu, \\lambda) = \\frac{1}{2\\lambda}\n                                   \\exp\\left(-\\frac{|x - \\mu|}{\\lambda}\\right).\n    \n    The first law of Laplace, from 1774, states that the frequency\n    of an error can be expressed as an exponential function of the\n    absolute magnitude of the error, which leads to the Laplace\n    distribution. For many problems in economics and health\n    sciences, this distribution seems to model the data better\n    than the standard Gaussian distribution.\n    \n    References\n    ----------\n    .. [1] Abramowitz, M. and Stegun, I. A. (Eds.). \"Handbook of\n           Mathematical Functions with Formulas, Graphs, and Mathematical\n           Tables, 9th printing,\" New York: Dover, 1972.\n    .. [2] Kotz, Samuel, et. al. \"The Laplace Distribution and\n           Generalizations, \" Birkhauser, 2001.\n    .. [3] Weisstein, Eric W. \"Laplace Distribution.\"\n           From MathWorld--A Wolfram Web Resource.\n           https://mathworld.wolfram.com/LaplaceDistribution.html\n    .. [4] Wikipedia, \"Laplace distribution\",\n           https://en.wikipedia.org/wiki/Laplace_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution\n    \n    >>> loc, scale = 0., 1.\n    >>> rng = np.random.default_rng()\n    >>> s = rng.laplace(loc, scale, 1000)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, _ = plt.hist(s, 30, density=True)\n    >>> x = np.arange(-8., 8., .01)\n    >>> pdf = np.exp(-abs(x-loc)/scale)/(2.*scale)\n    >>> plt.plot(x, pdf)\n    \n    Plot Gaussian for comparison:\n    \n    >>> g = (1/(scale * np.sqrt(2 * np.pi)) *\n    ...      np.exp(-(x - loc)**2 / (2 * scale**2)))\n    >>> plt.plot(x,g)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a39acfe010e25b08742a8e9f38236ff7271389c97300b8219f666c70fa63c656",
            "fields": [
                {
                    "id": "rr6liulq",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.laplace object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_l9k8qfy",
                    "encoding": "",
                    "name": "loc",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "The position, :math:`\\mu`, of the distribution peak. Default is 0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r1hlmci1",
                    "encoding": "",
                    "name": "scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": ":math:`\\lambda`, the exponential decay. Default is 1. Must be non-\nnegative.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ppazm3z9",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``loc`` and ``scale`` are both scalars.\nOtherwise, ``np.broadcast(loc, scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "983l0h4_",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.laplace",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.laplace",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1lkhfz1_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u8c7xc70",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "cro_yz8o",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4yk6jg_g",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8y2gnq3t",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gl5y1jnn",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "jf4sywjw",
            "name": "Generator.logistic",
            "description": "logistic(loc=0.0, scale=1.0, size=None)\n    \n    Draw samples from a logistic distribution.\n    \n    Samples are drawn from a logistic distribution with specified\n    parameters, loc (location or mean, also median), and scale (>0).\n    \n    Parameters\n    ----------\n    loc : float or array_like of floats, optional\n        Parameter of the distribution. Default is 0.\n    scale : float or array_like of floats, optional\n        Parameter of the distribution. Must be non-negative.\n        Default is 1.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``loc`` and ``scale`` are both scalars.\n        Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized logistic distribution.\n    \n    See Also\n    --------\n    scipy.stats.logistic : probability density function, distribution or\n        cumulative density function, etc.\n    \n    Notes\n    -----\n    The probability density for the Logistic distribution is\n    \n    .. math:: P(x) = \\frac{e^{-(x-\\mu)/s}}{s(1+e^{-(x-\\mu)/s})^2},\n    \n    where :math:`\\mu` = location and :math:`s` = scale.\n    \n    The Logistic distribution is used in Extreme Value problems where it\n    can act as a mixture of Gumbel distributions, in Epidemiology, and by\n    the World Chess Federation (FIDE) where it is used in the Elo ranking\n    system, assuming the performance of each player is a logistically\n    distributed random variable.\n    \n    References\n    ----------\n    .. [1] Reiss, R.-D. and Thomas M. (2001), \"Statistical Analysis of\n           Extreme Values, from Insurance, Finance, Hydrology and Other\n           Fields,\" Birkhauser Verlag, Basel, pp 132-133.\n    .. [2] Weisstein, Eric W. \"Logistic Distribution.\" From\n           MathWorld--A Wolfram Web Resource.\n           https://mathworld.wolfram.com/LogisticDistribution.html\n    .. [3] Wikipedia, \"Logistic-distribution\",\n           https://en.wikipedia.org/wiki/Logistic_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> loc, scale = 10, 1\n    >>> rng = np.random.default_rng()\n    >>> s = rng.logistic(loc, scale, 10000)\n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, _ = plt.hist(s, bins=50, label='Sampled data')\n    \n    #   plot sampled data against the exact distribution\n    \n    >>> def logistic(x, loc, scale):\n    ...     return np.exp((loc-x)/scale)/(scale*(1+np.exp((loc-x)/scale))**2)\n    >>> logistic_values  = logistic(bins, loc, scale)\n    >>> bin_spacing = np.mean(np.diff(bins))\n    >>> plt.plot(bins, logistic_values  * bin_spacing * s.size, label='Logistic PDF')\n    >>> plt.legend()\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c9d935b24a7d8a4761258c8be5100f82244d42e8e29068650982f8f901c3c044",
            "fields": [
                {
                    "id": "6as7w75q",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.logistic object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "idn22ohh",
                    "encoding": "",
                    "name": "loc",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Parameter of the distribution. Default is 0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fb5h5776",
                    "encoding": "",
                    "name": "scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Parameter of the distribution. Must be non-negative.\nDefault is 1.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kubnrj5y",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``loc`` and ``scale`` are both scalars.\nOtherwise, ``np.broadcast(loc, scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ycriv0bn",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.logistic",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.logistic",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "22d3294j",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2ndey6ie",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "e43c6v7z",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1xej4iir",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_m701lqk",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nl_vhcbg",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "zu0mm7fd",
            "name": "Generator.lognormal",
            "description": "lognormal(mean=0.0, sigma=1.0, size=None)\n    \n    Draw samples from a log-normal distribution.\n    \n    Draw samples from a log-normal distribution with specified mean,\n    standard deviation, and array shape.  Note that the mean and standard\n    deviation are not the values for the distribution itself, but of the\n    underlying normal distribution it is derived from.\n    \n    Parameters\n    ----------\n    mean : float or array_like of floats, optional\n        Mean value of the underlying normal distribution. Default is 0.\n    sigma : float or array_like of floats, optional\n        Standard deviation of the underlying normal distribution. Must be\n        non-negative. Default is 1.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``mean`` and ``sigma`` are both scalars.\n        Otherwise, ``np.broadcast(mean, sigma).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized log-normal distribution.\n    \n    See Also\n    --------\n    scipy.stats.lognorm : probability density function, distribution,\n        cumulative density function, etc.\n    \n    Notes\n    -----\n    A variable `x` has a log-normal distribution if `log(x)` is normally\n    distributed.  The probability density function for the log-normal\n    distribution is:\n    \n    .. math:: p(x) = \\frac{1}{\\sigma x \\sqrt{2\\pi}}\n                     e^{(-\\frac{(ln(x)-\\mu)^2}{2\\sigma^2})}\n    \n    where :math:`\\mu` is the mean and :math:`\\sigma` is the standard\n    deviation of the normally distributed logarithm of the variable.\n    A log-normal distribution results if a random variable is the *product*\n    of a large number of independent, identically-distributed variables in\n    the same way that a normal distribution results if the variable is the\n    *sum* of a large number of independent, identically-distributed\n    variables.\n    \n    References\n    ----------\n    .. [1] Limpert, E., Stahel, W. A., and Abbt, M., \"Log-normal\n           Distributions across the Sciences: Keys and Clues,\"\n           BioScience, Vol. 51, No. 5, May, 2001.\n           https://stat.ethz.ch/~stahel/lognormal/bioscience.pdf\n    .. [2] Reiss, R.D. and Thomas, M., \"Statistical Analysis of Extreme\n           Values,\" Basel: Birkhauser Verlag, 2001, pp. 31-32.\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> rng = np.random.default_rng()\n    >>> mu, sigma = 3., 1. # mean and standard deviation\n    >>> s = rng.lognormal(mu, sigma, 1000)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, _ = plt.hist(s, 100, density=True, align='mid')\n    \n    >>> x = np.linspace(min(bins), max(bins), 10000)\n    >>> pdf = (np.exp(-(np.log(x) - mu)**2 / (2 * sigma**2))\n    ...        / (x * sigma * np.sqrt(2 * np.pi)))\n    \n    >>> plt.plot(x, pdf, linewidth=2, color='r')\n    >>> plt.axis('tight')\n    >>> plt.show()\n    \n    Demonstrate that taking the products of random samples from a uniform\n    distribution can be fit well by a log-normal probability density\n    function.\n    \n    >>> # Generate a thousand samples: each is the product of 100 random\n    >>> # values, drawn from a normal distribution.\n    >>> rng = rng\n    >>> b = []\n    >>> for i in range(1000):\n    ...    a = 10. + rng.standard_normal(100)\n    ...    b.append(np.prod(a))\n    \n    >>> b = np.array(b) / np.min(b) # scale values to be positive\n    >>> count, bins, _ = plt.hist(b, 100, density=True, align='mid')\n    >>> sigma = np.std(np.log(b))\n    >>> mu = np.mean(np.log(b))\n    \n    >>> x = np.linspace(min(bins), max(bins), 10000)\n    >>> pdf = (np.exp(-(np.log(x) - mu)**2 / (2 * sigma**2))\n    ...        / (x * sigma * np.sqrt(2 * np.pi)))\n    \n    >>> plt.plot(x, pdf, color='r', linewidth=2)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "059ec165e4e4cf4ebacaa8243740e617fe9877db176665a96eff8e160d39d908",
            "fields": [
                {
                    "id": "xr1fdsio",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.lognormal object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w1uhoc2y",
                    "encoding": "",
                    "name": "mean",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Mean value of the underlying normal distribution. Default is 0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1oc2_psv",
                    "encoding": "",
                    "name": "sigma",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Standard deviation of the underlying normal distribution. Must be\nnon-negative. Default is 1.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y4xnj57z",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``mean`` and ``sigma`` are both scalars.\nOtherwise, ``np.broadcast(mean, sigma).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4u1c7smb",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.lognormal",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.lognormal",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r_p1snwk",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bblqh4mm",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "2zha5pj1",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a19gwxrh",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wkt9hxg_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ccjnxe1_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "g871ip6u",
            "name": "Generator.logseries",
            "description": "logseries(p, size=None)\n    \n    Draw samples from a logarithmic series distribution.\n    \n    Samples are drawn from a log series distribution with specified\n    shape parameter, 0 <= ``p`` < 1.\n    \n    Parameters\n    ----------\n    p : float or array_like of floats\n        Shape parameter for the distribution.  Must be in the range [0, 1).\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``p`` is a scalar.  Otherwise,\n        ``np.array(p).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized logarithmic series distribution.\n    \n    See Also\n    --------\n    scipy.stats.logser : probability density function, distribution or\n        cumulative density function, etc.\n    \n    Notes\n    -----\n    The probability mass function for the Log Series distribution is\n    \n    .. math:: P(k) = \\frac{-p^k}{k \\ln(1-p)},\n    \n    where p = probability.\n    \n    The log series distribution is frequently used to represent species\n    richness and occurrence, first proposed by Fisher, Corbet, and\n    Williams in 1943 [2].  It may also be used to model the numbers of\n    occupants seen in cars [3].\n    \n    References\n    ----------\n    .. [1] Buzas, Martin A.; Culver, Stephen J.,  Understanding regional\n           species diversity through the log series distribution of\n           occurrences: BIODIVERSITY RESEARCH Diversity & Distributions,\n           Volume 5, Number 5, September 1999 , pp. 187-195(9).\n    .. [2] Fisher, R.A,, A.S. Corbet, and C.B. Williams. 1943. The\n           relation between the number of species and the number of\n           individuals in a random sample of an animal population.\n           Journal of Animal Ecology, 12:42-58.\n    .. [3] D. J. Hand, F. Daly, D. Lunn, E. Ostrowski, A Handbook of Small\n           Data Sets, CRC Press, 1994.\n    .. [4] Wikipedia, \"Logarithmic distribution\",\n           https://en.wikipedia.org/wiki/Logarithmic_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> a = .6\n    >>> rng = np.random.default_rng()\n    >>> s = rng.logseries(a, 10000)\n    >>> import matplotlib.pyplot as plt\n    >>> bins = np.arange(-.5, max(s) + .5 )\n    >>> count, bins, _ = plt.hist(s, bins=bins, label='Sample count')\n    \n    #   plot against distribution\n    \n    >>> def logseries(k, p):\n    ...     return -p**k/(k*np.log(1-p))\n    >>> centres = np.arange(1, max(s) + 1)\n    >>> plt.plot(centres, logseries(centres, a) * s.size, 'r', label='logseries PMF')\n    >>> plt.legend()\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4fa2c2620ecaaac61d31367cd4487a24c955fa1189c6660936c127c487619d39",
            "fields": [
                {
                    "id": "4h0oar1m",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.logseries object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5vg1x1pn",
                    "encoding": "",
                    "name": "p",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape parameter for the distribution.  Must be in the range [0, 1).",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "990iutm_",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``p`` is a scalar.  Otherwise,\n``np.array(p).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wnk74qnd",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.logseries",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.logseries",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b5lbz23t",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6gir69yd",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ufw9yg1r",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dc1n04ma",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ethhijh1",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gbjeib5n",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "p74zh8sr",
            "name": "Generator.multinomial",
            "description": "multinomial(n, pvals, size=None)\n    \n    Draw samples from a multinomial distribution.\n    \n    The multinomial distribution is a multivariate generalization of the\n    binomial distribution.  Take an experiment with one of ``p``\n    possible outcomes.  An example of such an experiment is throwing a dice,\n    where the outcome can be 1 through 6.  Each sample drawn from the\n    distribution represents `n` such experiments.  Its values,\n    ``X_i = [X_0, X_1, ..., X_p]``, represent the number of times the\n    outcome was ``i``.\n    \n    Parameters\n    ----------\n    n : int or array-like of ints\n        Number of experiments.\n    pvals : array-like of floats\n        Probabilities of each of the ``p`` different outcomes with shape\n        ``(k0, k1, ..., kn, p)``. Each element ``pvals[i,j,...,:]`` must\n        sum to 1 (however, the last element is always assumed to account\n        for the remaining probability, as long as\n        ``sum(pvals[..., :-1], axis=-1) <= 1.0``. Must have at least 1\n        dimension where pvals.shape[-1] > 0.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn each with ``p`` elements. Default\n        is None where the output size is determined by the broadcast shape\n        of ``n`` and all by the final dimension of ``pvals``, which is\n        denoted as ``b=(b0, b1, ..., bq)``. If size is not None, then it\n        must be compatible with the broadcast shape ``b``. Specifically,\n        size must have ``q`` or more elements and size[-(q-j):] must equal\n        ``bj``.\n    \n    Returns\n    -------\n    out : ndarray\n        The drawn samples, of shape size, if provided. When size is\n        provided, the output shape is size + (p,)  If not specified,\n        the shape is determined by the broadcast shape of ``n`` and\n        ``pvals``, ``(b0, b1, ..., bq)`` augmented with the dimension of\n        the multinomial, ``p``, so that that output shape is\n        ``(b0, b1, ..., bq, p)``.\n    \n        Each entry ``out[i,j,...,:]`` is a ``p``-dimensional value drawn\n        from the distribution.\n    \n    Examples\n    --------\n    Throw a dice 20 times:\n    \n    >>> rng = np.random.default_rng()\n    >>> rng.multinomial(20, [1/6.]*6, size=1)\n    array([[4, 1, 7, 5, 2, 1]])  # random\n    \n    It landed 4 times on 1, once on 2, etc.\n    \n    Now, throw the dice 20 times, and 20 times again:\n    \n    >>> rng.multinomial(20, [1/6.]*6, size=2)\n    array([[3, 4, 3, 3, 4, 3],\n           [2, 4, 3, 4, 0, 7]])  # random\n    \n    For the first run, we threw 3 times 1, 4 times 2, etc.  For the second,\n    we threw 2 times 1, 4 times 2, etc.\n    \n    Now, do one experiment throwing the dice 10 time, and 10 times again,\n    and another throwing the dice 20 times, and 20 times again:\n    \n    >>> rng.multinomial([[10], [20]], [1/6.]*6, size=(2, 2))\n    array([[[2, 4, 0, 1, 2, 1],\n            [1, 3, 0, 3, 1, 2]],\n           [[1, 4, 4, 4, 4, 3],\n            [3, 3, 2, 5, 5, 2]]])  # random\n    \n    The first array shows the outcomes of throwing the dice 10 times, and\n    the second shows the outcomes from throwing the dice 20 times.\n    \n    A loaded die is more likely to land on number 6:\n    \n    >>> rng.multinomial(100, [1/7.]*5 + [2/7.])\n    array([11, 16, 14, 17, 16, 26])  # random\n    \n    Simulate 10 throws of a 4-sided die and 20 throws of a 6-sided die\n    \n    >>> rng.multinomial([10, 20],[[1/4]*4 + [0]*2, [1/6]*6])\n    array([[2, 1, 4, 3, 0, 0],\n           [3, 3, 3, 6, 1, 4]], dtype=int64)  # random\n    \n    Generate categorical random variates from two categories where the\n    first has 3 outcomes and the second has 2.\n    \n    >>> rng.multinomial(1, [[.1, .5, .4 ], [.3, .7, .0]])\n    array([[0, 0, 1],\n           [0, 1, 0]], dtype=int64)  # random\n    \n    ``argmax(axis=-1)`` is then used to return the categories.\n    \n    >>> pvals = [[.1, .5, .4 ], [.3, .7, .0]]\n    >>> rvs = rng.multinomial(1, pvals, size=(4,2))\n    >>> rvs.argmax(axis=-1)\n    array([[0, 1],\n           [2, 0],\n           [2, 1],\n           [2, 0]], dtype=int64)  # random\n    \n    The same output dimension can be produced using broadcasting.\n    \n    >>> rvs = rng.multinomial([[1]] * 4, pvals)\n    >>> rvs.argmax(axis=-1)\n    array([[0, 1],\n           [2, 0],\n           [2, 1],\n           [2, 0]], dtype=int64)  # random\n    \n    The probability inputs should be normalized. As an implementation\n    detail, the value of the last entry is ignored and assumed to take\n    up any leftover probability mass, but this should not be relied on.\n    A biased coin which has twice as much weight on one side as on the\n    other should be sampled like so:\n    \n    >>> rng.multinomial(100, [1.0 / 3, 2.0 / 3])  # RIGHT\n    array([38, 62])  # random\n    \n    not like:\n    \n    >>> rng.multinomial(100, [1.0, 2.0])  # WRONG\n    Traceback (most recent call last):\n    ValueError: pvals < 0, pvals > 1 or pvals contains NaNs",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a71a7f83d0a49fe438f52fc8bcb3b0b182c6014354476a132d1b8f0f246a8f8a",
            "fields": [
                {
                    "id": "re04ldgk",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.multinomial object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9izfnkge",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of experiments.",
                    "type": "int or array-like of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g2x5ryd0",
                    "encoding": "",
                    "name": "pvals",
                    "value": "",
                    "defaultValue": "",
                    "description": "Probabilities of each of the ``p`` different outcomes with shape\n``(k0, k1, ..., kn, p)``. Each element ``pvals[i,j,...,:]`` must\nsum to 1 (however, the last element is always assumed to account\nfor the remaining probability, as long as\n``sum(pvals[..., :-1], axis=-1) <= 1.0``. Must have at least 1\ndimension where pvals.shape[-1] > 0.",
                    "type": "array-like of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3n6uwhdn",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn each with ``p`` elements. Default\nis None where the output size is determined by the broadcast shape\nof ``n`` and all by the final dimension of ``pvals``, which is\ndenoted as ``b=(b0, b1, ..., bq)``. If size is not None, then it\nmust be compatible with the broadcast shape ``b``. Specifically,\nsize must have ``q`` or more elements and size[-(q-j):] must equal\n``bj``.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4sfn7ie7",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.multinomial",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.multinomial",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "virff60d",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y2ar4su_",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "xx_2jhm5",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a06rq_zr",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ika1fofo",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mqaqza2v",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "iwwm80lu",
            "name": "Generator.multivariate_hypergeometric",
            "description": "multivariate_hypergeometric(colors, nsample, size=None,\n                                method='marginals')\n    \n    Generate variates from a multivariate hypergeometric distribution.\n    \n    The multivariate hypergeometric distribution is a generalization\n    of the hypergeometric distribution.\n    \n    Choose ``nsample`` items at random without replacement from a\n    collection with ``N`` distinct types.  ``N`` is the length of\n    ``colors``, and the values in ``colors`` are the number of occurrences\n    of that type in the collection.  The total number of items in the\n    collection is ``sum(colors)``.  Each random variate generated by this\n    function is a vector of length ``N`` holding the counts of the\n    different types that occurred in the ``nsample`` items.\n    \n    The name ``colors`` comes from a common description of the\n    distribution: it is the probability distribution of the number of\n    marbles of each color selected without replacement from an urn\n    containing marbles of different colors; ``colors[i]`` is the number\n    of marbles in the urn with color ``i``.\n    \n    Parameters\n    ----------\n    colors : sequence of integers\n        The number of each type of item in the collection from which\n        a sample is drawn.  The values in ``colors`` must be nonnegative.\n        To avoid loss of precision in the algorithm, ``sum(colors)``\n        must be less than ``10**9`` when `method` is \"marginals\".\n    nsample : int\n        The number of items selected.  ``nsample`` must not be greater\n        than ``sum(colors)``.\n    size : int or tuple of ints, optional\n        The number of variates to generate, either an integer or a tuple\n        holding the shape of the array of variates.  If the given size is,\n        e.g., ``(k, m)``, then ``k * m`` variates are drawn, where one\n        variate is a vector of length ``len(colors)``, and the return value\n        has shape ``(k, m, len(colors))``.  If `size` is an integer, the\n        output has shape ``(size, len(colors))``.  Default is None, in\n        which case a single variate is returned as an array with shape\n        ``(len(colors),)``.\n    method : string, optional\n        Specify the algorithm that is used to generate the variates.\n        Must be 'count' or 'marginals' (the default).  See the Notes\n        for a description of the methods.\n    \n    Returns\n    -------\n    variates : ndarray\n        Array of variates drawn from the multivariate hypergeometric\n        distribution.\n    \n    See Also\n    --------\n    hypergeometric : Draw samples from the (univariate) hypergeometric\n        distribution.\n    \n    Notes\n    -----\n    The two methods do not return the same sequence of variates.\n    \n    The \"count\" algorithm is roughly equivalent to the following numpy\n    code::\n    \n        choices = np.repeat(np.arange(len(colors)), colors)\n        selection = np.random.choice(choices, nsample, replace=False)\n        variate = np.bincount(selection, minlength=len(colors))\n    \n    The \"count\" algorithm uses a temporary array of integers with length\n    ``sum(colors)``.\n    \n    The \"marginals\" algorithm generates a variate by using repeated\n    calls to the univariate hypergeometric sampler.  It is roughly\n    equivalent to::\n    \n        variate = np.zeros(len(colors), dtype=np.int64)\n        # `remaining` is the cumulative sum of `colors` from the last\n        # element to the first; e.g. if `colors` is [3, 1, 5], then\n        # `remaining` is [9, 6, 5].\n        remaining = np.cumsum(colors[::-1])[::-1]\n        for i in range(len(colors)-1):\n            if nsample < 1:\n                break\n            variate[i] = hypergeometric(colors[i], remaining[i+1],\n                                       nsample)\n            nsample -= variate[i]\n        variate[-1] = nsample\n    \n    The default method is \"marginals\".  For some cases (e.g. when\n    `colors` contains relatively small integers), the \"count\" method\n    can be significantly faster than the \"marginals\" method.  If\n    performance of the algorithm is important, test the two methods\n    with typical inputs to decide which works best.\n    \n    Examples\n    --------\n    >>> colors = [16, 8, 4]\n    >>> seed = 4861946401452\n    >>> gen = np.random.Generator(np.random.PCG64(seed))\n    >>> gen.multivariate_hypergeometric(colors, 6)\n    array([5, 0, 1])\n    >>> gen.multivariate_hypergeometric(colors, 6, size=3)\n    array([[5, 0, 1],\n           [2, 2, 2],\n           [3, 3, 0]])\n    >>> gen.multivariate_hypergeometric(colors, 6, size=(2, 2))\n    array([[[3, 2, 1],\n            [3, 2, 1]],\n           [[4, 1, 1],\n            [3, 2, 1]]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e098c1d4335c61bc32f61301f5b5732d806656b61da4d0a5134ac518ac2a5c12",
            "fields": [
                {
                    "id": "p4e6aiuz",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.multivariate_hypergeometric object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u9fsbobf",
                    "encoding": "",
                    "name": "colors",
                    "value": "",
                    "defaultValue": "",
                    "description": "The number of each type of item in the collection from which\na sample is drawn.  The values in ``colors`` must be nonnegative.\nTo avoid loss of precision in the algorithm, ``sum(colors)``\nmust be less than ``10**9`` when `method` is \"marginals\".",
                    "type": "sequence of integers",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9kxcvuo2",
                    "encoding": "",
                    "name": "nsample",
                    "value": "",
                    "defaultValue": "",
                    "description": "The number of items selected.  ``nsample`` must not be greater\nthan ``sum(colors)``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4eckwrg4",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "The number of variates to generate, either an integer or a tuple\nholding the shape of the array of variates.  If the given size is,\ne.g., ``(k, m)``, then ``k * m`` variates are drawn, where one\nvariate is a vector of length ``len(colors)``, and the return value\nhas shape ``(k, m, len(colors))``.  If `size` is an integer, the\noutput has shape ``(size, len(colors))``.  Default is None, in\nwhich case a single variate is returned as an array with shape\n``(len(colors),)``.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kjavalt7",
                    "encoding": "",
                    "name": "method",
                    "value": "marginals",
                    "defaultValue": "marginals",
                    "description": "Specify the algorithm that is used to generate the variates.\nMust be 'count' or 'marginals' (the default).  See the Notes\nfor a description of the methods.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dwushc9f",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.multivariate_hypergeometric",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.multivariate_hypergeometric",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "itje6lpc",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tb84ew34",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "vvcln_2m",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_9ft_7m7",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rtqvpnqe",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c0a8kv0l",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "03sdptq_",
            "name": "Generator.multivariate_normal",
            "description": "multivariate_normal(mean, cov, size=None, check_valid='warn',\n                        tol=1e-8, *, method='svd')\n    \n    Draw random samples from a multivariate normal distribution.\n    \n    The multivariate normal, multinormal or Gaussian distribution is a\n    generalization of the one-dimensional normal distribution to higher\n    dimensions.  Such a distribution is specified by its mean and\n    covariance matrix.  These parameters are analogous to the mean\n    (average or \"center\") and variance (the squared standard deviation,\n    or \"width\") of the one-dimensional normal distribution.\n    \n    Parameters\n    ----------\n    mean : 1-D array_like, of length N\n        Mean of the N-dimensional distribution.\n    cov : 2-D array_like, of shape (N, N)\n        Covariance matrix of the distribution. It must be symmetric and\n        positive-semidefinite for proper sampling.\n    size : int or tuple of ints, optional\n        Given a shape of, for example, ``(m,n,k)``, ``m*n*k`` samples are\n        generated, and packed in an `m`-by-`n`-by-`k` arrangement.  Because\n        each sample is `N`-dimensional, the output shape is ``(m,n,k,N)``.\n        If no shape is specified, a single (`N`-D) sample is returned.\n    check_valid : { 'warn', 'raise', 'ignore' }, optional\n        Behavior when the covariance matrix is not positive semidefinite.\n    tol : float, optional\n        Tolerance when checking the singular values in covariance matrix.\n        cov is cast to double before the check.\n    method : { 'svd', 'eigh', 'cholesky'}, optional\n        The cov input is used to compute a factor matrix A such that\n        ``A @ A.T = cov``. This argument is used to select the method\n        used to compute the factor matrix A. The default method 'svd' is\n        the slowest, while 'cholesky' is the fastest but less robust than\n        the slowest method. The method `eigh` uses eigen decomposition to\n        compute A and is faster than svd but slower than cholesky.\n    \n    Returns\n    -------\n    out : ndarray\n        The drawn samples, of shape *size*, if that was provided.  If not,\n        the shape is ``(N,)``.\n    \n        In other words, each entry ``out[i,j,...,:]`` is an N-dimensional\n        value drawn from the distribution.\n    \n    Notes\n    -----\n    The mean is a coordinate in N-dimensional space, which represents the\n    location where samples are most likely to be generated.  This is\n    analogous to the peak of the bell curve for the one-dimensional or\n    univariate normal distribution.\n    \n    Covariance indicates the level to which two variables vary together.\n    From the multivariate normal distribution, we draw N-dimensional\n    samples, :math:`X = [x_1, x_2, ... x_N]`.  The covariance matrix\n    element :math:`C_{ij}` is the covariance of :math:`x_i` and :math:`x_j`.\n    The element :math:`C_{ii}` is the variance of :math:`x_i` (i.e. its\n    \"spread\").\n    \n    Instead of specifying the full covariance matrix, popular\n    approximations include:\n    \n    - Spherical covariance (`cov` is a multiple of the identity matrix)\n    - Diagonal covariance (`cov` has non-negative elements, and only on\n      the diagonal)\n    \n    This geometrical property can be seen in two dimensions by plotting\n    generated data-points:\n    \n    >>> mean = [0, 0]\n    >>> cov = [[1, 0], [0, 100]]  # diagonal covariance\n    \n    Diagonal covariance means that points are oriented along x or y-axis:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> rng = np.random.default_rng()\n    >>> x, y = rng.multivariate_normal(mean, cov, 5000).T\n    >>> plt.plot(x, y, 'x')\n    >>> plt.axis('equal')\n    >>> plt.show()\n    \n    Note that the covariance matrix must be positive semidefinite (a.k.a.\n    nonnegative-definite). Otherwise, the behavior of this method is\n    undefined and backwards compatibility is not guaranteed.\n    \n    This function internally uses linear algebra routines, and thus results\n    may not be identical (even up to precision) across architectures, OSes,\n    or even builds. For example, this is likely if ``cov`` has multiple equal\n    singular values and ``method`` is ``'svd'`` (default). In this case,\n    ``method='cholesky'`` may be more robust.\n    \n    References\n    ----------\n    .. [1] Papoulis, A., \"Probability, Random Variables, and Stochastic\n           Processes,\" 3rd ed., New York: McGraw-Hill, 1991.\n    .. [2] Duda, R. O., Hart, P. E., and Stork, D. G., \"Pattern\n           Classification,\" 2nd ed., New York: Wiley, 2001.\n    \n    Examples\n    --------\n    >>> mean = (1, 2)\n    >>> cov = [[1, 0], [0, 1]]\n    >>> rng = np.random.default_rng()\n    >>> x = rng.multivariate_normal(mean, cov, (3, 3))\n    >>> x.shape\n    (3, 3, 2)\n    \n    We can use a different method other than the default to factorize cov:\n    \n    >>> y = rng.multivariate_normal(mean, cov, (3, 3), method='cholesky')\n    >>> y.shape\n    (3, 3, 2)\n    \n    Here we generate 800 samples from the bivariate normal distribution\n    with mean [0, 0] and covariance matrix [[6, -3], [-3, 3.5]].  The\n    expected variances of the first and second components of the sample\n    are 6 and 3.5, respectively, and the expected correlation\n    coefficient is -3/sqrt(6*3.5) \u2248 -0.65465.\n    \n    >>> cov = np.array([[6, -3], [-3, 3.5]])\n    >>> pts = rng.multivariate_normal([0, 0], cov, size=800)\n    \n    Check that the mean, covariance, and correlation coefficient of the\n    sample are close to the expected values:\n    \n    >>> pts.mean(axis=0)\n    array([ 0.0326911 , -0.01280782])  # may vary\n    >>> np.cov(pts.T)\n    array([[ 5.96202397, -2.85602287],\n           [-2.85602287,  3.47613949]])  # may vary\n    >>> np.corrcoef(pts.T)[0, 1]\n    -0.6273591314603949  # may vary\n    \n    We can visualize this data with a scatter plot.  The orientation\n    of the point cloud illustrates the negative correlation of the\n    components of this sample.\n    \n    >>> import matplotlib.pyplot as plt\n    >>> plt.plot(pts[:, 0], pts[:, 1], '.', alpha=0.5)\n    >>> plt.axis('equal')\n    >>> plt.grid()\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "766d1f02e6bc6c4b35bd8434dcd4c197c4820cfd0c965401ed95c98a5712a231",
            "fields": [
                {
                    "id": "jek_lfpe",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.multivariate_normal object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4ha4jveu",
                    "encoding": "",
                    "name": "mean",
                    "value": "",
                    "defaultValue": "",
                    "description": "Mean of the N-dimensional distribution.",
                    "type": "1-D arraylike, of length N",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j9tl6osf",
                    "encoding": "",
                    "name": "cov",
                    "value": "",
                    "defaultValue": "",
                    "description": "Covariance matrix of the distribution. It must be symmetric and\npositive-semidefinite for proper sampling.",
                    "type": "2-D arraylike, of shape (N, N)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l0sdgg2a",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Given a shape of, for example, ``(m,n,k)``, ``m*n*k`` samples are\ngenerated, and packed in an `m`-by-`n`-by-`k` arrangement.  Because\neach sample is `N`-dimensional, the output shape is ``(m,n,k,N)``.\nIf no shape is specified, a single (`N`-D) sample is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bsbjtyzd",
                    "encoding": "",
                    "name": "check_valid",
                    "value": "warn",
                    "defaultValue": "warn",
                    "description": "Behavior when the covariance matrix is not positive semidefinite.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7jeh4qle",
                    "encoding": "",
                    "name": "tol",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "Tolerance when checking the singular values in covariance matrix.\ncov is cast to double before the check.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rvauwszp",
                    "encoding": "",
                    "name": "method",
                    "value": "svd",
                    "defaultValue": "svd",
                    "description": "The cov input is used to compute a factor matrix A such that\n``A @ A.T = cov``. This argument is used to select the method\nused to compute the factor matrix A. The default method 'svd' is\nthe slowest, while 'cholesky' is the fastest but less robust than\nthe slowest method. The method `eigh` uses eigen decomposition to\ncompute A and is faster than svd but slower than cholesky.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o6tucp67",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.multivariate_normal",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.multivariate_normal",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wd573488",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "frz9rf23",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "w3_rf3y7",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5v_f559p",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mvqai1ay",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yx22g6_r",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "0ppwgph_",
            "name": "Generator.negative_binomial",
            "description": "negative_binomial(n, p, size=None)\n    \n    Draw samples from a negative binomial distribution.\n    \n    Samples are drawn from a negative binomial distribution with specified\n    parameters, `n` successes and `p` probability of success where `n`\n    is > 0 and `p` is in the interval (0, 1].\n    \n    Parameters\n    ----------\n    n : float or array_like of floats\n        Parameter of the distribution, > 0.\n    p : float or array_like of floats\n        Parameter of the distribution. Must satisfy 0 < p <= 1.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``n`` and ``p`` are both scalars.\n        Otherwise, ``np.broadcast(n, p).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized negative binomial distribution,\n        where each sample is equal to N, the number of failures that\n        occurred before a total of n successes was reached.\n    \n    Notes\n    -----\n    The probability mass function of the negative binomial distribution is\n    \n    .. math:: P(N;n,p) = \\frac{\\Gamma(N+n)}{N!\\Gamma(n)}p^{n}(1-p)^{N},\n    \n    where :math:`n` is the number of successes, :math:`p` is the\n    probability of success, :math:`N+n` is the number of trials, and\n    :math:`\\Gamma` is the gamma function. When :math:`n` is an integer,\n    :math:`\\frac{\\Gamma(N+n)}{N!\\Gamma(n)} = \\binom{N+n-1}{N}`, which is\n    the more common form of this term in the pmf. The negative\n    binomial distribution gives the probability of N failures given n\n    successes, with a success on the last trial.\n    \n    If one throws a die repeatedly until the third time a \"1\" appears,\n    then the probability distribution of the number of non-\"1\"s that\n    appear before the third \"1\" is a negative binomial distribution.\n    \n    Because this method internally calls ``Generator.poisson`` with an\n    intermediate random value, a ValueError is raised when the choice of \n    :math:`n` and :math:`p` would result in the mean + 10 sigma of the sampled\n    intermediate distribution exceeding the max acceptable value of the \n    ``Generator.poisson`` method. This happens when :math:`p` is too low \n    (a lot of failures happen for every success) and :math:`n` is too big (\n    a lot of successes are allowed).\n    Therefore, the :math:`n` and :math:`p` values must satisfy the constraint:\n    \n    .. math:: n\\frac{1-p}{p}+10n\\sqrt{n}\\frac{1-p}{p}<2^{63}-1-10\\sqrt{2^{63}-1},\n    \n    Where the left side of the equation is the derived mean + 10 sigma of\n    a sample from the gamma distribution internally used as the :math:`lam`\n    parameter of a poisson sample, and the right side of the equation is\n    the constraint for maximum value of :math:`lam` in ``Generator.poisson``.\n    \n    References\n    ----------\n    .. [1] Weisstein, Eric W. \"Negative Binomial Distribution.\" From\n           MathWorld--A Wolfram Web Resource.\n           https://mathworld.wolfram.com/NegativeBinomialDistribution.html\n    .. [2] Wikipedia, \"Negative binomial distribution\",\n           https://en.wikipedia.org/wiki/Negative_binomial_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    A real world example. A company drills wild-cat oil\n    exploration wells, each with an estimated probability of\n    success of 0.1.  What is the probability of having one success\n    for each successive well, that is what is the probability of a\n    single success after drilling 5 wells, after 6 wells, etc.?\n    \n    >>> rng = np.random.default_rng()\n    >>> s = rng.negative_binomial(1, 0.1, 100000)\n    >>> for i in range(1, 11): # doctest: +SKIP\n    ...    probability = sum(s<i) / 100000.\n    ...    print(i, \"wells drilled, probability of one success =\", probability)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9b32fdd2b11a5b2a7b608451f4063d8ca7fd86ff3d0f8481c2390afaba5b7efc",
            "fields": [
                {
                    "id": "_l_umcio",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.negative_binomial object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q4ae5n27",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "Parameter of the distribution, > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "alyb3isk",
                    "encoding": "",
                    "name": "p",
                    "value": "",
                    "defaultValue": "",
                    "description": "Parameter of the distribution. Must satisfy 0 < p <= 1.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qoh3ntwy",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``n`` and ``p`` are both scalars.\nOtherwise, ``np.broadcast(n, p).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ft939la0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.negative_binomial",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.negative_binomial",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5__of_kg",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bkqu85_z",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "t_hislic",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dpc5ujhx",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "may1cfga",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qy4fc_hy",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "54fab3dq",
            "name": "Generator.noncentral_chisquare",
            "description": "noncentral_chisquare(df, nonc, size=None)\n    \n    Draw samples from a noncentral chi-square distribution.\n    \n    The noncentral :math:`\\chi^2` distribution is a generalization of\n    the :math:`\\chi^2` distribution.\n    \n    Parameters\n    ----------\n    df : float or array_like of floats\n        Degrees of freedom, must be > 0.\n    nonc : float or array_like of floats\n        Non-centrality, must be non-negative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``df`` and ``nonc`` are both scalars.\n        Otherwise, ``np.broadcast(df, nonc).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized noncentral chi-square distribution.\n    \n    Notes\n    -----\n    The probability density function for the noncentral Chi-square\n    distribution is\n    \n    .. math:: P(x;df,nonc) = \\sum^{\\infty}_{i=0}\n                           \\frac{e^{-nonc/2}(nonc/2)^{i}}{i!}\n                           P_{Y_{df+2i}}(x),\n    \n    where :math:`Y_{q}` is the Chi-square with q degrees of freedom.\n    \n    References\n    ----------\n    .. [1] Wikipedia, \"Noncentral chi-squared distribution\"\n           https://en.wikipedia.org/wiki/Noncentral_chi-squared_distribution\n    \n    Examples\n    --------\n    Draw values from the distribution and plot the histogram\n    \n    >>> rng = np.random.default_rng()\n    >>> import matplotlib.pyplot as plt\n    >>> values = plt.hist(rng.noncentral_chisquare(3, 20, 100000),\n    ...                   bins=200, density=True)\n    >>> plt.show()\n    \n    Draw values from a noncentral chisquare with very small noncentrality,\n    and compare to a chisquare.\n    \n    >>> plt.figure()\n    >>> values = plt.hist(rng.noncentral_chisquare(3, .0000001, 100000),\n    ...                   bins=np.arange(0., 25, .1), density=True)\n    >>> values2 = plt.hist(rng.chisquare(3, 100000),\n    ...                    bins=np.arange(0., 25, .1), density=True)\n    >>> plt.plot(values[1][0:-1], values[0]-values2[0], 'ob')\n    >>> plt.show()\n    \n    Demonstrate how large values of non-centrality lead to a more symmetric\n    distribution.\n    \n    >>> plt.figure()\n    >>> values = plt.hist(rng.noncentral_chisquare(3, 20, 100000),\n    ...                   bins=200, density=True)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "19dfa4fc5e24536e8c7feb3f9ca62385616d30d73488c46b7709e43ada6889c2",
            "fields": [
                {
                    "id": "phl44qa_",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.noncentral_chisquare object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o7tccgpo",
                    "encoding": "",
                    "name": "df",
                    "value": "",
                    "defaultValue": "",
                    "description": "Degrees of freedom, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2f0whyj7",
                    "encoding": "",
                    "name": "nonc",
                    "value": "",
                    "defaultValue": "",
                    "description": "Non-centrality, must be non-negative.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a2xrmq96",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``df`` and ``nonc`` are both scalars.\nOtherwise, ``np.broadcast(df, nonc).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ot603scy",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.noncentral_chisquare",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.noncentral_chisquare",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gow6dc0_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mieemfah",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "8vt0xf4s",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "531t27pu",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d96n6deb",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rf8ngp4k",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "gnz43gyn",
            "name": "Generator.noncentral_f",
            "description": "noncentral_f(dfnum, dfden, nonc, size=None)\n    \n    Draw samples from the noncentral F distribution.\n    \n    Samples are drawn from an F distribution with specified parameters,\n    `dfnum` (degrees of freedom in numerator) and `dfden` (degrees of\n    freedom in denominator), where both parameters > 1.\n    `nonc` is the non-centrality parameter.\n    \n    Parameters\n    ----------\n    dfnum : float or array_like of floats\n        Numerator degrees of freedom, must be > 0.\n    dfden : float or array_like of floats\n        Denominator degrees of freedom, must be > 0.\n    nonc : float or array_like of floats\n        Non-centrality parameter, the sum of the squares of the numerator\n        means, must be >= 0.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``dfnum``, ``dfden``, and ``nonc``\n        are all scalars.  Otherwise, ``np.broadcast(dfnum, dfden, nonc).size``\n        samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized noncentral Fisher distribution.\n    \n    Notes\n    -----\n    When calculating the power of an experiment (power = probability of\n    rejecting the null hypothesis when a specific alternative is true) the\n    non-central F statistic becomes important.  When the null hypothesis is\n    true, the F statistic follows a central F distribution. When the null\n    hypothesis is not true, then it follows a non-central F statistic.\n    \n    References\n    ----------\n    .. [1] Weisstein, Eric W. \"Noncentral F-Distribution.\"\n           From MathWorld--A Wolfram Web Resource.\n           https://mathworld.wolfram.com/NoncentralF-Distribution.html\n    .. [2] Wikipedia, \"Noncentral F-distribution\",\n           https://en.wikipedia.org/wiki/Noncentral_F-distribution\n    \n    Examples\n    --------\n    In a study, testing for a specific alternative to the null hypothesis\n    requires use of the Noncentral F distribution. We need to calculate the\n    area in the tail of the distribution that exceeds the value of the F\n    distribution for the null hypothesis.  We'll plot the two probability\n    distributions for comparison.\n    \n    >>> rng = np.random.default_rng()\n    >>> dfnum = 3 # between group deg of freedom\n    >>> dfden = 20 # within groups degrees of freedom\n    >>> nonc = 3.0\n    >>> nc_vals = rng.noncentral_f(dfnum, dfden, nonc, 1000000)\n    >>> NF = np.histogram(nc_vals, bins=50, density=True)\n    >>> c_vals = rng.f(dfnum, dfden, 1000000)\n    >>> F = np.histogram(c_vals, bins=50, density=True)\n    >>> import matplotlib.pyplot as plt\n    >>> plt.plot(F[1][1:], F[0])\n    >>> plt.plot(NF[1][1:], NF[0])\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9e9f03efccb2356cae89159405135bd9a37de753f99e011e4aee9e26d1da65f5",
            "fields": [
                {
                    "id": "u3yq4o8x",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.noncentral_f object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2ame0gb4",
                    "encoding": "",
                    "name": "dfnum",
                    "value": "",
                    "defaultValue": "",
                    "description": "Numerator degrees of freedom, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_q3403ny",
                    "encoding": "",
                    "name": "dfden",
                    "value": "",
                    "defaultValue": "",
                    "description": "Denominator degrees of freedom, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5k9jj6dd",
                    "encoding": "",
                    "name": "nonc",
                    "value": "",
                    "defaultValue": "",
                    "description": "Non-centrality parameter, the sum of the squares of the numerator\nmeans, must be >= 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "27ia1p1s",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``dfnum``, ``dfden``, and ``nonc``\nare all scalars.  Otherwise, ``np.broadcast(dfnum, dfden, nonc).size``\nsamples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "if4d11d9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.noncentral_f",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.noncentral_f",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "544f0s8t",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xw18l0yp",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "18ck7tvl",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p944nbcm",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "50kc4r58",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jwqv7z4w",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "q6i2f1ne",
            "name": "Generator.normal",
            "description": "normal(loc=0.0, scale=1.0, size=None)\n    \n    Draw random samples from a normal (Gaussian) distribution.\n    \n    The probability density function of the normal distribution, first\n    derived by De Moivre and 200 years later by both Gauss and Laplace\n    independently [2]_, is often called the bell curve because of\n    its characteristic shape (see the example below).\n    \n    The normal distributions occurs often in nature.  For example, it\n    describes the commonly occurring distribution of samples influenced\n    by a large number of tiny, random disturbances, each with its own\n    unique distribution [2]_.\n    \n    Parameters\n    ----------\n    loc : float or array_like of floats\n        Mean (\"centre\") of the distribution.\n    scale : float or array_like of floats\n        Standard deviation (spread or \"width\") of the distribution. Must be\n        non-negative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``loc`` and ``scale`` are both scalars.\n        Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized normal distribution.\n    \n    See Also\n    --------\n    scipy.stats.norm : probability density function, distribution or\n        cumulative density function, etc.\n    \n    Notes\n    -----\n    The probability density for the Gaussian distribution is\n    \n    .. math:: p(x) = \\frac{1}{\\sqrt{ 2 \\pi \\sigma^2 }}\n                     e^{ - \\frac{ (x - \\mu)^2 } {2 \\sigma^2} },\n    \n    where :math:`\\mu` is the mean and :math:`\\sigma` the standard\n    deviation. The square of the standard deviation, :math:`\\sigma^2`,\n    is called the variance.\n    \n    The function has its peak at the mean, and its \"spread\" increases with\n    the standard deviation (the function reaches 0.607 times its maximum at\n    :math:`x + \\sigma` and :math:`x - \\sigma` [2]_).  This implies that\n    :meth:`normal` is more likely to return samples lying close to the\n    mean, rather than those far away.\n    \n    References\n    ----------\n    .. [1] Wikipedia, \"Normal distribution\",\n           https://en.wikipedia.org/wiki/Normal_distribution\n    .. [2] P. R. Peebles Jr., \"Central Limit Theorem\" in \"Probability,\n           Random Variables and Random Signal Principles\", 4th ed., 2001,\n           pp. 51, 51, 125.\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> mu, sigma = 0, 0.1 # mean and standard deviation\n    >>> rng = np.random.default_rng()\n    >>> s = rng.normal(mu, sigma, 1000)\n    \n    Verify the mean and the standard deviation:\n    \n    >>> abs(mu - np.mean(s))\n    0.0  # may vary\n    \n    >>> abs(sigma - np.std(s, ddof=1))\n    0.0  # may vary\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, _ = plt.hist(s, 30, density=True)\n    >>> plt.plot(bins, 1/(sigma * np.sqrt(2 * np.pi)) *\n    ...                np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    ...          linewidth=2, color='r')\n    >>> plt.show()\n    \n    Two-by-four array of samples from the normal distribution with\n    mean 3 and standard deviation 2.5:\n    \n    >>> rng = np.random.default_rng()\n    >>> rng.normal(3, 2.5, size=(2, 4))\n    array([[-4.49401501,  4.00950034, -1.81814867,  7.29718677],   # random\n           [ 0.39924804,  4.68456316,  4.99394529,  4.84057254]])  # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "926cca318b1354221be514cdf111b8ccc17ebb0f528c7cd5e0f669a236a1d1e3",
            "fields": [
                {
                    "id": "7xtkwade",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.normal object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y11xpcpm",
                    "encoding": "",
                    "name": "loc",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Mean (\"centre\") of the distribution.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_ierjyr_",
                    "encoding": "",
                    "name": "scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Standard deviation (spread or \"width\") of the distribution. Must be\nnon-negative.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1brg5xa9",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``loc`` and ``scale`` are both scalars.\nOtherwise, ``np.broadcast(loc, scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "azu7vrw5",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.normal",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.normal",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ew9kopkv",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q5rimf72",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "o6q_aaql",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8p1_tkrr",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "og3q87my",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6h9k30qs",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "_slwruzy",
            "name": "Generator.pareto",
            "description": "pareto(a, size=None)\n    \n    Draw samples from a Pareto II (AKA Lomax) distribution with\n    specified shape.\n    \n    Parameters\n    ----------\n    a : float or array_like of floats\n        Shape of the distribution. Must be positive.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``a`` is a scalar.  Otherwise,\n        ``np.array(a).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the Pareto II distribution.\n    \n    See Also\n    --------\n    scipy.stats.pareto : Pareto I distribution\n    scipy.stats.lomax : Lomax (Pareto II) distribution\n    scipy.stats.genpareto : Generalized Pareto distribution\n    \n    Notes\n    -----\n    The probability density for the Pareto II distribution is\n    \n    .. math:: p(x) = \\frac{a}{{x+1}^{a+1}} , x \\ge 0\n    \n    where :math:`a > 0` is the shape.\n    \n    The Pareto II distribution is a shifted and scaled version of the\n    Pareto I distribution, which can be found in `scipy.stats.pareto`.\n    \n    References\n    ----------\n    .. [1] Francis Hunt and Paul Johnson, On the Pareto Distribution of\n           Sourceforge projects.\n    .. [2] Pareto, V. (1896). Course of Political Economy. Lausanne.\n    .. [3] Reiss, R.D., Thomas, M.(2001), Statistical Analysis of Extreme\n           Values, Birkhauser Verlag, Basel, pp 23-30.\n    .. [4] Wikipedia, \"Pareto distribution\",\n           https://en.wikipedia.org/wiki/Pareto_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> a = 3.\n    >>> rng = np.random.default_rng()\n    >>> s = rng.pareto(a, 10000)\n    \n    Display the histogram of the samples, along with the probability\n    density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> x = np.linspace(0, 3, 50)\n    >>> pdf = a / (x+1)**(a+1)\n    >>> plt.hist(s, bins=x, density=True, label='histogram')\n    >>> plt.plot(x, pdf, linewidth=2, color='r', label='pdf')\n    >>> plt.xlim(x.min(), x.max())\n    >>> plt.legend()\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "092d99b1b54b3affea1c4e1b09d41c4ef29a8eb7571f4a7b2343426857b3a72c",
            "fields": [
                {
                    "id": "wwpsq7fb",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.pareto object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mqz31sxw",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape of the distribution. Must be positive.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p37vp728",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``a`` is a scalar.  Otherwise,\n``np.array(a).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0k4v0urp",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.pareto",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.pareto",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0bvd0wbx",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sb3j_x9q",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0e4e9i4r",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "86w5qlyo",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5ldm_z3h",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aqlk7pgn",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "lp04ab_z",
            "name": "Generator.permutation",
            "description": "permutation(x, axis=0)\n    \n    Randomly permute a sequence, or return a permuted range.\n    \n    Parameters\n    ----------\n    x : int or array_like\n        If `x` is an integer, randomly permute ``np.arange(x)``.\n        If `x` is an array, make a copy and shuffle the elements\n        randomly.\n    axis : int, optional\n        The axis which `x` is shuffled along. Default is 0.\n    \n    Returns\n    -------\n    out : ndarray\n        Permuted sequence or array range.\n    \n    Examples\n    --------\n    >>> rng = np.random.default_rng()\n    >>> rng.permutation(10)\n    array([1, 7, 4, 3, 0, 9, 2, 5, 8, 6]) # random\n    \n    >>> rng.permutation([1, 4, 9, 12, 15])\n    array([15,  1,  9,  4, 12]) # random\n    \n    >>> arr = np.arange(9).reshape((3, 3))\n    >>> rng.permutation(arr)\n    array([[6, 7, 8], # random\n           [0, 1, 2],\n           [3, 4, 5]])\n    \n    >>> rng.permutation(\"abc\")\n    Traceback (most recent call last):\n        ...\n    numpy.exceptions.AxisError: axis 0 is out of bounds for array of dimension 0\n    \n    >>> arr = np.arange(9).reshape((3, 3))\n    >>> rng.permutation(arr, axis=1)\n    array([[0, 2, 1], # random\n           [3, 5, 4],\n           [6, 8, 7]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9e42db5ba1d82d5953e883b9ee185f2ee29bdedd39f328f3eaab49da037f3f3e",
            "fields": [
                {
                    "id": "r3s9k2g4",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.permutation object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qyntrc3v",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "If `x` is an integer, randomly permute ``np.arange(x)``.\nIf `x` is an array, make a copy and shuffle the elements\nrandomly.",
                    "type": "int or arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "inxhk0ox",
                    "encoding": "",
                    "name": "axis",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "The axis which `x` is shuffled along. Default is 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c0eo1t1i",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.permutation",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.permutation",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cw9_1sr8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1u53947q",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "5f097it4",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5lgix3fj",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vo24gaql",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1xceejyg",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "qu7ttmcn",
            "name": "Generator.permuted",
            "description": "permuted(x, axis=None, out=None)\n    \n    Randomly permute `x` along axis `axis`.\n    \n    Unlike `shuffle`, each slice along the given axis is shuffled\n    independently of the others.\n    \n    Parameters\n    ----------\n    x : array_like, at least one-dimensional\n        Array to be shuffled.\n    axis : int, optional\n        Slices of `x` in this axis are shuffled. Each slice\n        is shuffled independently of the others.  If `axis` is\n        None, the flattened array is shuffled.\n    out : ndarray, optional\n        If given, this is the destination of the shuffled array.\n        If `out` is None, a shuffled copy of the array is returned.\n    \n    Returns\n    -------\n    ndarray\n        If `out` is None, a shuffled copy of `x` is returned.\n        Otherwise, the shuffled array is stored in `out`,\n        and `out` is returned\n    \n    See Also\n    --------\n    shuffle\n    permutation\n    \n    Notes\n    -----\n    An important distinction between methods ``shuffle``  and ``permuted`` is \n    how they both treat the ``axis`` parameter which can be found at \n    :ref:`generator-handling-axis-parameter`.\n    \n    Examples\n    --------\n    Create a `numpy.random.Generator` instance:\n    \n    >>> rng = np.random.default_rng()\n    \n    Create a test array:\n    \n    >>> x = np.arange(24).reshape(3, 8)\n    >>> x\n    array([[ 0,  1,  2,  3,  4,  5,  6,  7],\n           [ 8,  9, 10, 11, 12, 13, 14, 15],\n           [16, 17, 18, 19, 20, 21, 22, 23]])\n    \n    Shuffle the rows of `x`:\n    \n    >>> y = rng.permuted(x, axis=1)\n    >>> y\n    array([[ 4,  3,  6,  7,  1,  2,  5,  0],  # random\n           [15, 10, 14,  9, 12, 11,  8, 13],\n           [17, 16, 20, 21, 18, 22, 23, 19]])\n    \n    `x` has not been modified:\n    \n    >>> x\n    array([[ 0,  1,  2,  3,  4,  5,  6,  7],\n           [ 8,  9, 10, 11, 12, 13, 14, 15],\n           [16, 17, 18, 19, 20, 21, 22, 23]])\n    \n    To shuffle the rows of `x` in-place, pass `x` as the `out`\n    parameter:\n    \n    >>> y = rng.permuted(x, axis=1, out=x)\n    >>> x\n    array([[ 3,  0,  4,  7,  1,  6,  2,  5],  # random\n           [ 8, 14, 13,  9, 12, 11, 15, 10],\n           [17, 18, 16, 22, 19, 23, 20, 21]])\n    \n    Note that when the ``out`` parameter is given, the return\n    value is ``out``:\n    \n    >>> y is x\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e76c1e05682ea4fd44d1b67cda8584c76ac3cea809c32f083e691ae0bad8f90e",
            "fields": [
                {
                    "id": "hjebvuih",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.permuted object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fzeymhyg",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array to be shuffled.",
                    "type": "arraylike, at least one-dimensional",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eysnki1a",
                    "encoding": "",
                    "name": "axis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Slices of `x` in this axis are shuffled. Each slice\nis shuffled independently of the others.  If `axis` is\nNone, the flattened array is shuffled.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ffbx70k8",
                    "encoding": "",
                    "name": "out",
                    "value": "",
                    "defaultValue": "",
                    "description": "If given, this is the destination of the shuffled array.\nIf `out` is None, a shuffled copy of the array is returned.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "22whbp4s",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.permuted",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.permuted",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xuttuphi",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fc_os5w_",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "kefjppd7",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e8sxc1jp",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v9dijrcs",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uf150ntb",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "ct5c6vt9",
            "name": "Generator.poisson",
            "description": "poisson(lam=1.0, size=None)\n    \n    Draw samples from a Poisson distribution.\n    \n    The Poisson distribution is the limit of the binomial distribution\n    for large N.\n    \n    Parameters\n    ----------\n    lam : float or array_like of floats\n        Expected number of events occurring in a fixed-time interval,\n        must be >= 0. A sequence must be broadcastable over the requested\n        size.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``lam`` is a scalar. Otherwise,\n        ``np.array(lam).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Poisson distribution.\n    \n    Notes\n    -----\n    The probability mass function (PMF) of Poisson distribution is\n    \n    .. math:: f(k; \\lambda)=\\frac{\\lambda^k e^{-\\lambda}}{k!}\n    \n    For events with an expected separation :math:`\\lambda` the Poisson\n    distribution :math:`f(k; \\lambda)` describes the probability of\n    :math:`k` events occurring within the observed\n    interval :math:`\\lambda`.\n    \n    Because the output is limited to the range of the C int64 type, a\n    ValueError is raised when `lam` is within 10 sigma of the maximum\n    representable value.\n    \n    References\n    ----------\n    .. [1] Weisstein, Eric W. \"Poisson Distribution.\"\n           From MathWorld--A Wolfram Web Resource.\n           https://mathworld.wolfram.com/PoissonDistribution.html\n    .. [2] Wikipedia, \"Poisson distribution\",\n           https://en.wikipedia.org/wiki/Poisson_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> rng = np.random.default_rng()\n    >>> lam, size = 5, 10000\n    >>> s = rng.poisson(lam=lam, size=size)\n    \n    Verify the mean and variance, which should be approximately ``lam``:\n    \n    >>> s.mean(), s.var()\n    (4.9917 5.1088311)  # may vary\n    \n    Display the histogram and probability mass function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> from scipy import stats\n    >>> x = np.arange(0, 21)\n    >>> pmf = stats.poisson.pmf(x, mu=lam)\n    >>> plt.hist(s, bins=x, density=True, width=0.5)\n    >>> plt.stem(x, pmf, 'C1-')\n    >>> plt.show()\n    \n    Draw each 100 values for lambda 100 and 500:\n    \n    >>> s = rng.poisson(lam=(100., 500.), size=(100, 2))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "098c2f07f8637c7789811fe192223c870828ef7b465d3159d5555751a331a388",
            "fields": [
                {
                    "id": "2p8dvraq",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.poisson object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "seogtsu0",
                    "encoding": "",
                    "name": "lam",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Expected number of events occurring in a fixed-time interval,\nmust be >= 0. A sequence must be broadcastable over the requested\nsize.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bf6z_lbo",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``lam`` is a scalar. Otherwise,\n``np.array(lam).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xbp3a2zw",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.poisson",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.poisson",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5m6g7rrh",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gd7rc6ft",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "3xo127ju",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gpf5yrym",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rbxc0ph7",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cgqct3pq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "3rwxe265",
            "name": "Generator.power",
            "description": "power(a, size=None)\n    \n    Draws samples in [0, 1] from a power distribution with positive\n    exponent a - 1.\n    \n    Also known as the power function distribution.\n    \n    Parameters\n    ----------\n    a : float or array_like of floats\n        Parameter of the distribution. Must be non-negative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``a`` is a scalar.  Otherwise,\n        ``np.array(a).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized power distribution.\n    \n    Raises\n    ------\n    ValueError\n        If a <= 0.\n    \n    Notes\n    -----\n    The probability density function is\n    \n    .. math:: P(x; a) = ax^{a-1}, 0 \\le x \\le 1, a>0.\n    \n    The power function distribution is just the inverse of the Pareto\n    distribution. It may also be seen as a special case of the Beta\n    distribution.\n    \n    It is used, for example, in modeling the over-reporting of insurance\n    claims.\n    \n    References\n    ----------\n    .. [1] Christian Kleiber, Samuel Kotz, \"Statistical size distributions\n           in economics and actuarial sciences\", Wiley, 2003.\n    .. [2] Heckert, N. A. and Filliben, James J. \"NIST Handbook 148:\n           Dataplot Reference Manual, Volume 2: Let Subcommands and Library\n           Functions\", National Institute of Standards and Technology\n           Handbook Series, June 2003.\n           https://www.itl.nist.gov/div898/software/dataplot/refman2/auxillar/powpdf.pdf\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> rng = np.random.default_rng()\n    >>> a = 5. # shape\n    >>> samples = 1000\n    >>> s = rng.power(a, samples)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, _ = plt.hist(s, bins=30)\n    >>> x = np.linspace(0, 1, 100)\n    >>> y = a*x**(a-1.)\n    >>> normed_y = samples*np.diff(bins)[0]*y\n    >>> plt.plot(x, normed_y)\n    >>> plt.show()\n    \n    Compare the power function distribution to the inverse of the Pareto.\n    \n    >>> from scipy import stats  # doctest: +SKIP\n    >>> rvs = rng.power(5, 1000000)\n    >>> rvsp = rng.pareto(5, 1000000)\n    >>> xx = np.linspace(0,1,100)\n    >>> powpdf = stats.powerlaw.pdf(xx,5)  # doctest: +SKIP\n    \n    >>> plt.figure()\n    >>> plt.hist(rvs, bins=50, density=True)\n    >>> plt.plot(xx,powpdf,'r-')  # doctest: +SKIP\n    >>> plt.title('power(5)')\n    \n    >>> plt.figure()\n    >>> plt.hist(1./(1.+rvsp), bins=50, density=True)\n    >>> plt.plot(xx,powpdf,'r-')  # doctest: +SKIP\n    >>> plt.title('inverse of 1 + Generator.pareto(5)')\n    \n    >>> plt.figure()\n    >>> plt.hist(1./(1.+rvsp), bins=50, density=True)\n    >>> plt.plot(xx,powpdf,'r-')  # doctest: +SKIP\n    >>> plt.title('inverse of stats.pareto(5)')",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "21de180eb9488ae87e358eafb42f32d21450a6473817006a60ac9da107934c66",
            "fields": [
                {
                    "id": "9iwgqv7k",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.power object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bmmrm_76",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Parameter of the distribution. Must be non-negative.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t2r_fbev",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``a`` is a scalar.  Otherwise,\n``np.array(a).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4v_6uprm",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.power",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.power",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "613tms_f",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uv0zv2yi",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "brpmmq83",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4nuopwii",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hepy3rmf",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rgj9czws",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "s9lfjc88",
            "name": "Generator.random",
            "description": "random(size=None, dtype=np.float64, out=None)\n    \n    Return random floats in the half-open interval [0.0, 1.0).\n    \n    Results are from the \"continuous uniform\" distribution over the\n    stated interval.  To sample :math:`Unif[a, b), b > a` use `uniform`\n    or multiply the output of `random` by ``(b - a)`` and add ``a``::\n    \n        (b - a) * random() + a\n    \n    Parameters\n    ----------\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    dtype : dtype, optional\n        Desired dtype of the result, only `float64` and `float32` are supported.\n        Byteorder must be native. The default value is np.float64.\n    out : ndarray, optional\n        Alternative output array in which to place the result. If size is not None,\n        it must have the same shape as the provided size and must match the type of\n        the output values.\n    \n    Returns\n    -------\n    out : float or ndarray of floats\n        Array of random floats of shape `size` (unless ``size=None``, in which\n        case a single float is returned).\n    \n    See Also\n    --------\n    uniform : Draw samples from the parameterized uniform distribution.\n    \n    Examples\n    --------\n    >>> rng = np.random.default_rng()\n    >>> rng.random()\n    0.47108547995356098 # random\n    >>> type(rng.random())\n    <class 'float'>\n    >>> rng.random((5,))\n    array([ 0.30220482,  0.86820401,  0.1654503 ,  0.11659149,  0.54323428]) # random\n    \n    Three-by-two array of random numbers from [-5, 0):\n    \n    >>> 5 * rng.random((3, 2)) - 5\n    array([[-3.99149989, -0.52338984], # random\n           [-2.99091858, -0.79479508],\n           [-1.23204345, -1.75224494]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f55323be88ca103400e40fe7c732a04749e5617590dffb4be8e1e52faefe1ab1",
            "fields": [
                {
                    "id": "nvr902zy",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.random object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "owhopafp",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oolk5b3j",
                    "encoding": "",
                    "name": "dtype",
                    "value": "builtins.type",
                    "defaultValue": "builtins.type",
                    "description": "Desired dtype of the result, only `float64` and `float32` are supported.\nByteorder must be native. The default value is np.float64.",
                    "type": "builtins.type",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7v47__xt",
                    "encoding": "",
                    "name": "out",
                    "value": "",
                    "defaultValue": "",
                    "description": "Alternative output array in which to place the result. If size is not None,\nit must have the same shape as the provided size and must match the type of\nthe output values.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v_yl68pz",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.random",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.random",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nryjskda",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y2fe20dw",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "87ktxutp",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dc0w3cx_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zpyh7vl1",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bgk5ezdr",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "omlp7j58",
            "name": "Generator.rayleigh",
            "description": "rayleigh(scale=1.0, size=None)\n    \n    Draw samples from a Rayleigh distribution.\n    \n    The :math:`\\chi` and Weibull distributions are generalizations of the\n    Rayleigh.\n    \n    Parameters\n    ----------\n    scale : float or array_like of floats, optional\n        Scale, also equals the mode. Must be non-negative. Default is 1.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``scale`` is a scalar.  Otherwise,\n        ``np.array(scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Rayleigh distribution.\n    \n    Notes\n    -----\n    The probability density function for the Rayleigh distribution is\n    \n    .. math:: P(x;scale) = \\frac{x}{scale^2}e^{\\frac{-x^2}{2 \\cdotp scale^2}}\n    \n    The Rayleigh distribution would arise, for example, if the East\n    and North components of the wind velocity had identical zero-mean\n    Gaussian distributions.  Then the wind speed would have a Rayleigh\n    distribution.\n    \n    References\n    ----------\n    .. [1] Brighton Webs Ltd., \"Rayleigh Distribution,\"\n           https://web.archive.org/web/20090514091424/http://brighton-webs.co.uk:80/distributions/rayleigh.asp\n    .. [2] Wikipedia, \"Rayleigh distribution\"\n           https://en.wikipedia.org/wiki/Rayleigh_distribution\n    \n    Examples\n    --------\n    Draw values from the distribution and plot the histogram\n    \n    >>> from matplotlib.pyplot import hist\n    >>> rng = np.random.default_rng()\n    >>> values = hist(rng.rayleigh(3, 100000), bins=200, density=True)\n    \n    Wave heights tend to follow a Rayleigh distribution. If the mean wave\n    height is 1 meter, what fraction of waves are likely to be larger than 3\n    meters?\n    \n    >>> meanvalue = 1\n    >>> modevalue = np.sqrt(2 / np.pi) * meanvalue\n    >>> s = rng.rayleigh(modevalue, 1000000)\n    \n    The percentage of waves larger than 3 meters is:\n    \n    >>> 100.*sum(s>3)/1000000.\n    0.087300000000000003 # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6d3cb2c9ae126bc8d8b50db558763ad4781f4c1f5ea84107e9ba3155d274d9bf",
            "fields": [
                {
                    "id": "7rt0gkyo",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.rayleigh object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x60c2teu",
                    "encoding": "",
                    "name": "scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Scale, also equals the mode. Must be non-negative. Default is 1.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pauq7uw6",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``scale`` is a scalar.  Otherwise,\n``np.array(scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x7qr0ahw",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.rayleigh",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.rayleigh",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sn4rv73m",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jab5vnfr",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "up2ccalh",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5hr1hu5b",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ymocipvc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n8n_0dmg",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "zqolxr2r",
            "name": "Generator.shuffle",
            "description": "shuffle(x, axis=0)\n    \n    Modify an array or sequence in-place by shuffling its contents.\n    \n    The order of sub-arrays is changed but their contents remains the same.\n    \n    Parameters\n    ----------\n    x : ndarray or MutableSequence\n        The array, list or mutable sequence to be shuffled.\n    axis : int, optional\n        The axis which `x` is shuffled along. Default is 0.\n        It is only supported on `ndarray` objects.\n    \n    Returns\n    -------\n    None\n    \n    See Also\n    --------\n    permuted\n    permutation\n    \n    Notes\n    -----\n    An important distinction between methods ``shuffle``  and ``permuted`` is \n    how they both treat the ``axis`` parameter which can be found at \n    :ref:`generator-handling-axis-parameter`.\n    \n    Examples\n    --------\n    >>> rng = np.random.default_rng()\n    >>> arr = np.arange(10)\n    >>> arr\n    array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n    >>> rng.shuffle(arr)\n    >>> arr\n    array([2, 0, 7, 5, 1, 4, 8, 9, 3, 6]) # random\n    \n    >>> arr = np.arange(9).reshape((3, 3))\n    >>> arr\n    array([[0, 1, 2],\n           [3, 4, 5],\n           [6, 7, 8]])\n    >>> rng.shuffle(arr)\n    >>> arr\n    array([[3, 4, 5], # random\n           [6, 7, 8],\n           [0, 1, 2]])\n    \n    >>> arr = np.arange(9).reshape((3, 3))\n    >>> arr\n    array([[0, 1, 2],\n           [3, 4, 5],\n           [6, 7, 8]])\n    >>> rng.shuffle(arr, axis=1)\n    >>> arr\n    array([[2, 0, 1], # random\n           [5, 3, 4],\n           [8, 6, 7]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4d16593e0854b8cdfd97dde8d4968bbe5bca48540247ec9b15a955585d1394b3",
            "fields": [
                {
                    "id": "mpwx_x0_",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.shuffle object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rh5nw_l6",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array, list or mutable sequence to be shuffled.",
                    "type": "ndarray or MutableSequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s4w80gmu",
                    "encoding": "",
                    "name": "axis",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "The axis which `x` is shuffled along. Default is 0.\nIt is only supported on `ndarray` objects.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "furuny_h",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.shuffle",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.shuffle",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jidalhlj",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f_llucng",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "xkj8s_9p",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "liu4mji0",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yxdo3sfz",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "by7xdcby",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "0m6lbuu3",
            "name": "Generator.spawn",
            "description": "spawn(n_children)\n    \n    Create new independent child generators.\n    \n    See :ref:`seedsequence-spawn` for additional notes on spawning\n    children.\n    \n    .. versionadded:: 1.25.0\n    \n    Parameters\n    ----------\n    n_children : int\n    \n    Returns\n    -------\n    child_generators : list of Generators\n    \n    Raises\n    ------\n    TypeError\n        When the underlying SeedSequence does not implement spawning.\n    \n    See Also\n    --------\n    random.BitGenerator.spawn, random.SeedSequence.spawn :\n        Equivalent method on the bit generator and seed sequence.\n    bit_generator :\n        The bit generator instance used by the generator.\n    \n    Examples\n    --------\n    Starting from a seeded default generator:\n    \n    >>> # High quality entropy created with: f\"0x{secrets.randbits(128):x}\"\n    >>> entropy = 0x3034c61a9ae04ff8cb62ab8ec2c4b501\n    >>> rng = np.random.default_rng(entropy)\n    \n    Create two new generators for example for parallel execution:\n    \n    >>> child_rng1, child_rng2 = rng.spawn(2)\n    \n    Drawn numbers from each are independent but derived from the initial\n    seeding entropy:\n    \n    >>> rng.uniform(), child_rng1.uniform(), child_rng2.uniform()\n    (0.19029263503854454, 0.9475673279178444, 0.4702687338396767)\n    \n    It is safe to spawn additional children from the original ``rng`` or\n    the children:\n    \n    >>> more_child_rngs = rng.spawn(20)\n    >>> nested_spawn = child_rng1.spawn(20)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b7e85279adb99f538a21e3c033cf9f971bb2b8560fec3c300291d20e60847dfb",
            "fields": [
                {
                    "id": "jrchem60",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.spawn object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o9bw4i5_",
                    "encoding": "",
                    "name": "n_children",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "47fp79ru",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.spawn",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.spawn",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "du9v0wgp",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "53iann9d",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "m7xvycpn",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "atr3n289",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pav3c9p6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9ey5i7dh",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "1rwjy423",
            "name": "Generator.standard_cauchy",
            "description": "standard_cauchy(size=None)\n    \n    Draw samples from a standard Cauchy distribution with mode = 0.\n    \n    Also known as the Lorentz distribution.\n    \n    Parameters\n    ----------\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    \n    Returns\n    -------\n    samples : ndarray or scalar\n        The drawn samples.\n    \n    Notes\n    -----\n    The probability density function for the full Cauchy distribution is\n    \n    .. math:: P(x; x_0, \\gamma) = \\frac{1}{\\pi \\gamma \\bigl[ 1+\n              (\\frac{x-x_0}{\\gamma})^2 \\bigr] }\n    \n    and the Standard Cauchy distribution just sets :math:`x_0=0` and\n    :math:`\\gamma=1`\n    \n    The Cauchy distribution arises in the solution to the driven harmonic\n    oscillator problem, and also describes spectral line broadening. It\n    also describes the distribution of values at which a line tilted at\n    a random angle will cut the x axis.\n    \n    When studying hypothesis tests that assume normality, seeing how the\n    tests perform on data from a Cauchy distribution is a good indicator of\n    their sensitivity to a heavy-tailed distribution, since the Cauchy looks\n    very much like a Gaussian distribution, but with heavier tails.\n    \n    References\n    ----------\n    .. [1] NIST/SEMATECH e-Handbook of Statistical Methods, \"Cauchy\n          Distribution\",\n          https://www.itl.nist.gov/div898/handbook/eda/section3/eda3663.htm\n    .. [2] Weisstein, Eric W. \"Cauchy Distribution.\" From MathWorld--A\n          Wolfram Web Resource.\n          https://mathworld.wolfram.com/CauchyDistribution.html\n    .. [3] Wikipedia, \"Cauchy distribution\"\n          https://en.wikipedia.org/wiki/Cauchy_distribution\n    \n    Examples\n    --------\n    Draw samples and plot the distribution:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> rng = np.random.default_rng()\n    >>> s = rng.standard_cauchy(1000000)\n    >>> s = s[(s>-25) & (s<25)]  # truncate distribution so it plots well\n    >>> plt.hist(s, bins=100)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b255faaa5672190e2a77521f5987470450dec84e9ae38db8e2fc6ba513337675",
            "fields": [
                {
                    "id": "ls5w0g1e",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.standard_cauchy object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tzmyspf0",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ixxr9s1q",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.standard_cauchy",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.standard_cauchy",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lg9z64mx",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wt6_k_fd",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "sfvqi708",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "he0_onad",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nvprowq7",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c1z79jm5",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "o4xayu0b",
            "name": "Generator.standard_exponential",
            "description": "standard_exponential(size=None, dtype=np.float64, method='zig', out=None)\n    \n    Draw samples from the standard exponential distribution.\n    \n    `standard_exponential` is identical to the exponential distribution\n    with a scale parameter of 1.\n    \n    Parameters\n    ----------\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    dtype : dtype, optional\n        Desired dtype of the result, only `float64` and `float32` are supported.\n        Byteorder must be native. The default value is np.float64.\n    method : str, optional\n        Either 'inv' or 'zig'. 'inv' uses the default inverse CDF method.\n        'zig' uses the much faster Ziggurat method of Marsaglia and Tsang.\n    out : ndarray, optional\n        Alternative output array in which to place the result. If size is not None,\n        it must have the same shape as the provided size and must match the type of\n        the output values.\n    \n    Returns\n    -------\n    out : float or ndarray\n        Drawn samples.\n    \n    Examples\n    --------\n    Output a 3x8000 array:\n    \n    >>> rng = np.random.default_rng()\n    >>> n = rng.standard_exponential((3, 8000))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8b4c784ef3f532b956772976c533d9411e189941ebb824d1bf4bfd58a855b3d4",
            "fields": [
                {
                    "id": "n8ffyi7t",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.standard_exponential object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4q1bgai8",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ckus6c6e",
                    "encoding": "",
                    "name": "dtype",
                    "value": "builtins.type",
                    "defaultValue": "builtins.type",
                    "description": "Desired dtype of the result, only `float64` and `float32` are supported.\nByteorder must be native. The default value is np.float64.",
                    "type": "builtins.type",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5fu0sgm4",
                    "encoding": "",
                    "name": "method",
                    "value": "zig",
                    "defaultValue": "zig",
                    "description": "Either 'inv' or 'zig'. 'inv' uses the default inverse CDF method.\n'zig' uses the much faster Ziggurat method of Marsaglia and Tsang.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3w_d1cpa",
                    "encoding": "",
                    "name": "out",
                    "value": "",
                    "defaultValue": "",
                    "description": "Alternative output array in which to place the result. If size is not None,\nit must have the same shape as the provided size and must match the type of\nthe output values.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bfjplej8",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.standard_exponential",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.standard_exponential",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jdk1sl29",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4r4wd_vv",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "2q7ebo44",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dungaien",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i_q5anhl",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8zg3lo0h",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "h9nf23t2",
            "name": "Generator.standard_gamma",
            "description": "standard_gamma(shape, size=None, dtype=np.float64, out=None)\n    \n    Draw samples from a standard Gamma distribution.\n    \n    Samples are drawn from a Gamma distribution with specified parameters,\n    shape (sometimes designated \"k\") and scale=1.\n    \n    Parameters\n    ----------\n    shape : float or array_like of floats\n        Parameter, must be non-negative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``shape`` is a scalar.  Otherwise,\n        ``np.array(shape).size`` samples are drawn.\n    dtype : dtype, optional\n        Desired dtype of the result, only `float64` and `float32` are supported.\n        Byteorder must be native. The default value is np.float64.\n    out : ndarray, optional\n        Alternative output array in which to place the result. If size is\n        not None, it must have the same shape as the provided size and\n        must match the type of the output values.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized standard gamma distribution.\n    \n    See Also\n    --------\n    scipy.stats.gamma : probability density function, distribution or\n        cumulative density function, etc.\n    \n    Notes\n    -----\n    The probability density for the Gamma distribution is\n    \n    .. math:: p(x) = x^{k-1}\\frac{e^{-x/\\theta}}{\\theta^k\\Gamma(k)},\n    \n    where :math:`k` is the shape and :math:`\\theta` the scale,\n    and :math:`\\Gamma` is the Gamma function.\n    \n    The Gamma distribution is often used to model the times to failure of\n    electronic components, and arises naturally in processes for which the\n    waiting times between Poisson distributed events are relevant.\n    \n    References\n    ----------\n    .. [1] Weisstein, Eric W. \"Gamma Distribution.\" From MathWorld--A\n           Wolfram Web Resource.\n           https://mathworld.wolfram.com/GammaDistribution.html\n    .. [2] Wikipedia, \"Gamma distribution\",\n           https://en.wikipedia.org/wiki/Gamma_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> shape, scale = 2., 1. # mean and width\n    >>> rng = np.random.default_rng()\n    >>> s = rng.standard_gamma(shape, 1000000)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> import scipy.special as sps  # doctest: +SKIP\n    >>> count, bins, _ = plt.hist(s, 50, density=True)\n    >>> y = bins**(shape-1) * ((np.exp(-bins/scale))/  # doctest: +SKIP\n    ...                       (sps.gamma(shape) * scale**shape))\n    >>> plt.plot(bins, y, linewidth=2, color='r')  # doctest: +SKIP\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a8f8af74a12e93b6ed016c9c6e18dd9e1fe2dcc14e10de95cb181b0cc7e3d17e",
            "fields": [
                {
                    "id": "pkal1hyw",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.standard_gamma object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5sl0fyk_",
                    "encoding": "",
                    "name": "shape",
                    "value": "",
                    "defaultValue": "",
                    "description": "Parameter, must be non-negative.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mxk3t2id",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``shape`` is a scalar.  Otherwise,\n``np.array(shape).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6jsifhme",
                    "encoding": "",
                    "name": "dtype",
                    "value": "builtins.type",
                    "defaultValue": "builtins.type",
                    "description": "Desired dtype of the result, only `float64` and `float32` are supported.\nByteorder must be native. The default value is np.float64.",
                    "type": "builtins.type",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "82rtqa4l",
                    "encoding": "",
                    "name": "out",
                    "value": "",
                    "defaultValue": "",
                    "description": "Alternative output array in which to place the result. If size is\nnot None, it must have the same shape as the provided size and\nmust match the type of the output values.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z1u0mh3p",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.standard_gamma",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.standard_gamma",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tykw_uoz",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "poxml1y3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "flrug7xr",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4ziaraho",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7mcnr_i0",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "glv5_fxh",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "yfx1ym1p",
            "name": "Generator.standard_normal",
            "description": "standard_normal(size=None, dtype=np.float64, out=None)\n    \n    Draw samples from a standard Normal distribution (mean=0, stdev=1).\n    \n    Parameters\n    ----------\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    dtype : dtype, optional\n        Desired dtype of the result, only `float64` and `float32` are supported.\n        Byteorder must be native. The default value is np.float64.\n    out : ndarray, optional\n        Alternative output array in which to place the result. If size is not None,\n        it must have the same shape as the provided size and must match the type of\n        the output values.\n    \n    Returns\n    -------\n    out : float or ndarray\n        A floating-point array of shape ``size`` of drawn samples, or a\n        single sample if ``size`` was not specified.\n    \n    See Also\n    --------\n    normal :\n        Equivalent function with additional ``loc`` and ``scale`` arguments\n        for setting the mean and standard deviation.\n    \n    Notes\n    -----\n    For random samples from the normal distribution with mean ``mu`` and\n    standard deviation ``sigma``, use one of::\n    \n        mu + sigma * rng.standard_normal(size=...)\n        rng.normal(mu, sigma, size=...)\n    \n    Examples\n    --------\n    >>> rng = np.random.default_rng()\n    >>> rng.standard_normal()\n    2.1923875335537315 # random\n    \n    >>> s = rng.standard_normal(8000)\n    >>> s\n    array([ 0.6888893 ,  0.78096262, -0.89086505, ...,  0.49876311,  # random\n           -0.38672696, -0.4685006 ])                                # random\n    >>> s.shape\n    (8000,)\n    >>> s = rng.standard_normal(size=(3, 4, 2))\n    >>> s.shape\n    (3, 4, 2)\n    \n    Two-by-four array of samples from the normal distribution with\n    mean 3 and standard deviation 2.5:\n    \n    >>> 3 + 2.5 * rng.standard_normal(size=(2, 4))\n    array([[-4.49401501,  4.00950034, -1.81814867,  7.29718677],   # random\n           [ 0.39924804,  4.68456316,  4.99394529,  4.84057254]])  # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7c3c0ba5686e9ea78ebf1535fb93e1b8c9c7c87508fc409b958cabd032fc0c1e",
            "fields": [
                {
                    "id": "1kdzl0k6",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.standard_normal object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z4y3xrfp",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b1xqz00x",
                    "encoding": "",
                    "name": "dtype",
                    "value": "builtins.type",
                    "defaultValue": "builtins.type",
                    "description": "Desired dtype of the result, only `float64` and `float32` are supported.\nByteorder must be native. The default value is np.float64.",
                    "type": "builtins.type",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pduq0en4",
                    "encoding": "",
                    "name": "out",
                    "value": "",
                    "defaultValue": "",
                    "description": "Alternative output array in which to place the result. If size is not None,\nit must have the same shape as the provided size and must match the type of\nthe output values.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e4dcaf31",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.standard_normal",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.standard_normal",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gzvq_9x3",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mbzoc6ip",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "h0h3ibih",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ewy0kkiu",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zhnoo567",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ej89cskq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "pwqhk276",
            "name": "Generator.standard_t",
            "description": "standard_t(df, size=None)\n    \n    Draw samples from a standard Student's t distribution with `df` degrees\n    of freedom.\n    \n    A special case of the hyperbolic distribution.  As `df` gets\n    large, the result resembles that of the standard normal\n    distribution (`standard_normal`).\n    \n    Parameters\n    ----------\n    df : float or array_like of floats\n        Degrees of freedom, must be > 0.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``df`` is a scalar.  Otherwise,\n        ``np.array(df).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized standard Student's t distribution.\n    \n    Notes\n    -----\n    The probability density function for the t distribution is\n    \n    .. math:: P(x, df) = \\frac{\\Gamma(\\frac{df+1}{2})}{\\sqrt{\\pi df}\n              \\Gamma(\\frac{df}{2})}\\Bigl( 1+\\frac{x^2}{df} \\Bigr)^{-(df+1)/2}\n    \n    The t test is based on an assumption that the data come from a\n    Normal distribution. The t test provides a way to test whether\n    the sample mean (that is the mean calculated from the data) is\n    a good estimate of the true mean.\n    \n    The derivation of the t-distribution was first published in\n    1908 by William Gosset while working for the Guinness Brewery\n    in Dublin. Due to proprietary issues, he had to publish under\n    a pseudonym, and so he used the name Student.\n    \n    References\n    ----------\n    .. [1] Dalgaard, Peter, \"Introductory Statistics With R\",\n           Springer, 2002.\n    .. [2] Wikipedia, \"Student's t-distribution\"\n           https://en.wikipedia.org/wiki/Student's_t-distribution\n    \n    Examples\n    --------\n    From Dalgaard page 83 [1]_, suppose the daily energy intake for 11\n    women in kilojoules (kJ) is:\n    \n    >>> intake = np.array([5260., 5470, 5640, 6180, 6390, 6515, 6805, 7515, \\\n    ...                    7515, 8230, 8770])\n    \n    Does their energy intake deviate systematically from the recommended\n    value of 7725 kJ? Our null hypothesis will be the absence of deviation,\n    and the alternate hypothesis will be the presence of an effect that could be\n    either positive or negative, hence making our test 2-tailed. \n    \n    Because we are estimating the mean and we have N=11 values in our sample,\n    we have N-1=10 degrees of freedom. We set our significance level to 95% and \n    compute the t statistic using the empirical mean and empirical standard \n    deviation of our intake. We use a ddof of 1 to base the computation of our \n    empirical standard deviation on an unbiased estimate of the variance (note:\n    the final estimate is not unbiased due to the concave nature of the square \n    root).\n    \n    >>> np.mean(intake)\n    6753.636363636364\n    >>> intake.std(ddof=1)\n    1142.1232221373727\n    >>> t = (np.mean(intake)-7725)/(intake.std(ddof=1)/np.sqrt(len(intake)))\n    >>> t\n    -2.8207540608310198\n    \n    We draw 1000000 samples from Student's t distribution with the adequate\n    degrees of freedom.\n    \n    >>> import matplotlib.pyplot as plt\n    >>> rng = np.random.default_rng()\n    >>> s = rng.standard_t(10, size=1000000)\n    >>> h = plt.hist(s, bins=100, density=True)\n    \n    Does our t statistic land in one of the two critical regions found at \n    both tails of the distribution?\n    \n    >>> np.sum(np.abs(t) < np.abs(s)) / float(len(s))\n    0.018318  #random < 0.05, statistic is in critical region\n    \n    The probability value for this 2-tailed test is about 1.83%, which is \n    lower than the 5% pre-determined significance threshold. \n    \n    Therefore, the probability of observing values as extreme as our intake\n    conditionally on the null hypothesis being true is too low, and we reject \n    the null hypothesis of no deviation.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "87b8fd1e31c8faa27a1efce9fce459aa96181bd46aeeb24685ee5a4cb7dcd8f7",
            "fields": [
                {
                    "id": "bsc1iwlb",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.standard_t object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xw_q6mc5",
                    "encoding": "",
                    "name": "df",
                    "value": "",
                    "defaultValue": "",
                    "description": "Degrees of freedom, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5wbykdl6",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``df`` is a scalar.  Otherwise,\n``np.array(df).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_m6ybc55",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.standard_t",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.standard_t",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nn13p0jn",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "am_q_rko",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "6s1giuli",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_08gtbb7",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hsot508l",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8he0t9gf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "659abahb",
            "name": "Generator.triangular",
            "description": "triangular(left, mode, right, size=None)\n    \n    Draw samples from the triangular distribution over the\n    interval ``[left, right]``.\n    \n    The triangular distribution is a continuous probability\n    distribution with lower limit left, peak at mode, and upper\n    limit right. Unlike the other distributions, these parameters\n    directly define the shape of the pdf.\n    \n    Parameters\n    ----------\n    left : float or array_like of floats\n        Lower limit.\n    mode : float or array_like of floats\n        The value where the peak of the distribution occurs.\n        The value must fulfill the condition ``left <= mode <= right``.\n    right : float or array_like of floats\n        Upper limit, must be larger than `left`.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``left``, ``mode``, and ``right``\n        are all scalars.  Otherwise, ``np.broadcast(left, mode, right).size``\n        samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized triangular distribution.\n    \n    Notes\n    -----\n    The probability density function for the triangular distribution is\n    \n    .. math:: P(x;l, m, r) = \\begin{cases}\n              \\frac{2(x-l)}{(r-l)(m-l)}& \\text{for $l \\leq x \\leq m$},\\\\\n              \\frac{2(r-x)}{(r-l)(r-m)}& \\text{for $m \\leq x \\leq r$},\\\\\n              0& \\text{otherwise}.\n              \\end{cases}\n    \n    The triangular distribution is often used in ill-defined\n    problems where the underlying distribution is not known, but\n    some knowledge of the limits and mode exists. Often it is used\n    in simulations.\n    \n    References\n    ----------\n    .. [1] Wikipedia, \"Triangular distribution\"\n           https://en.wikipedia.org/wiki/Triangular_distribution\n    \n    Examples\n    --------\n    Draw values from the distribution and plot the histogram:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> rng = np.random.default_rng()\n    >>> h = plt.hist(rng.triangular(-3, 0, 8, 100000), bins=200,\n    ...              density=True)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "588d5de1bd602f4b71434a9c1bb0a4c7e84d7e8acc5b450566a279960cef9622",
            "fields": [
                {
                    "id": "wgjpc7g9",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.triangular object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "57ucrw5r",
                    "encoding": "",
                    "name": "left",
                    "value": "",
                    "defaultValue": "",
                    "description": "Lower limit.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fbnrgey5",
                    "encoding": "",
                    "name": "mode",
                    "value": "",
                    "defaultValue": "",
                    "description": "The value where the peak of the distribution occurs.\nThe value must fulfill the condition ``left <= mode <= right``.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q8uejdk2",
                    "encoding": "",
                    "name": "right",
                    "value": "",
                    "defaultValue": "",
                    "description": "Upper limit, must be larger than `left`.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r_kv49n5",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``left``, ``mode``, and ``right``\nare all scalars.  Otherwise, ``np.broadcast(left, mode, right).size``\nsamples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ijn6nx5v",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.triangular",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.triangular",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gchc0gmi",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rw7s43yf",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "zw8ofcwz",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "amqdkbob",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yowmu5ls",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l39jpdmu",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "s_0a72kn",
            "name": "Generator.uniform",
            "description": "uniform(low=0.0, high=1.0, size=None)\n    \n    Draw samples from a uniform distribution.\n    \n    Samples are uniformly distributed over the half-open interval\n    ``[low, high)`` (includes low, but excludes high).  In other words,\n    any value within the given interval is equally likely to be drawn\n    by `uniform`.\n    \n    Parameters\n    ----------\n    low : float or array_like of floats, optional\n        Lower boundary of the output interval.  All values generated will be\n        greater than or equal to low.  The default value is 0.\n    high : float or array_like of floats\n        Upper boundary of the output interval.  All values generated will be\n        less than high.  The high limit may be included in the returned array of \n        floats due to floating-point rounding in the equation \n        ``low + (high-low) * random_sample()``.  high - low must be \n        non-negative.  The default value is 1.0.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``low`` and ``high`` are both scalars.\n        Otherwise, ``np.broadcast(low, high).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized uniform distribution.\n    \n    See Also\n    --------\n    integers : Discrete uniform distribution, yielding integers.\n    random : Floats uniformly distributed over ``[0, 1)``.\n    \n    Notes\n    -----\n    The probability density function of the uniform distribution is\n    \n    .. math:: p(x) = \\frac{1}{b - a}\n    \n    anywhere within the interval ``[a, b)``, and zero elsewhere.\n    \n    When ``high`` == ``low``, values of ``low`` will be returned.\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> rng = np.random.default_rng()\n    >>> s = rng.uniform(-1,0,1000)\n    \n    All values are within the given interval:\n    \n    >>> np.all(s >= -1)\n    True\n    >>> np.all(s < 0)\n    True\n    \n    Display the histogram of the samples, along with the\n    probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, _ = plt.hist(s, 15, density=True)\n    >>> plt.plot(bins, np.ones_like(bins), linewidth=2, color='r')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "eca1ad9adf75b680016f2b6ccc0ce1279d6a1ce35dda60aa8c89ab52379efb2f",
            "fields": [
                {
                    "id": "go7hjo8b",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.uniform object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ctphsvvo",
                    "encoding": "",
                    "name": "low",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Lower boundary of the output interval.  All values generated will be\ngreater than or equal to low.  The default value is 0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ibydz1qm",
                    "encoding": "",
                    "name": "high",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Upper boundary of the output interval.  All values generated will be\nless than high.  The high limit may be included in the returned array of \nfloats due to floating-point rounding in the equation \n``low + (high-low) * random_sample()``.  high - low must be \nnon-negative.  The default value is 1.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dmfbqibk",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``low`` and ``high`` are both scalars.\nOtherwise, ``np.broadcast(low, high).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qt7zbp27",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.uniform",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.uniform",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q_b2am6c",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a_7u43qa",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bxrkuytd",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6n0zf3vm",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j5chkfzk",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7n2dblwp",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "45w6cxsb",
            "name": "Generator.vonmises",
            "description": "vonmises(mu, kappa, size=None)\n    \n    Draw samples from a von Mises distribution.\n    \n    Samples are drawn from a von Mises distribution with specified mode\n    (mu) and concentration (kappa), on the interval [-pi, pi].\n    \n    The von Mises distribution (also known as the circular normal\n    distribution) is a continuous probability distribution on the unit\n    circle.  It may be thought of as the circular analogue of the normal\n    distribution.\n    \n    Parameters\n    ----------\n    mu : float or array_like of floats\n        Mode (\"center\") of the distribution.\n    kappa : float or array_like of floats\n        Concentration of the distribution, has to be >=0.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``mu`` and ``kappa`` are both scalars.\n        Otherwise, ``np.broadcast(mu, kappa).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized von Mises distribution.\n    \n    See Also\n    --------\n    scipy.stats.vonmises : probability density function, distribution, or\n        cumulative density function, etc.\n    \n    Notes\n    -----\n    The probability density for the von Mises distribution is\n    \n    .. math:: p(x) = \\frac{e^{\\kappa cos(x-\\mu)}}{2\\pi I_0(\\kappa)},\n    \n    where :math:`\\mu` is the mode and :math:`\\kappa` the concentration,\n    and :math:`I_0(\\kappa)` is the modified Bessel function of order 0.\n    \n    The von Mises is named for Richard Edler von Mises, who was born in\n    Austria-Hungary, in what is now the Ukraine.  He fled to the United\n    States in 1939 and became a professor at Harvard.  He worked in\n    probability theory, aerodynamics, fluid mechanics, and philosophy of\n    science.\n    \n    References\n    ----------\n    .. [1] Abramowitz, M. and Stegun, I. A. (Eds.). \"Handbook of\n           Mathematical Functions with Formulas, Graphs, and Mathematical\n           Tables, 9th printing,\" New York: Dover, 1972.\n    .. [2] von Mises, R., \"Mathematical Theory of Probability\n           and Statistics\", New York: Academic Press, 1964.\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> mu, kappa = 0.0, 4.0 # mean and concentration\n    >>> rng = np.random.default_rng()\n    >>> s = rng.vonmises(mu, kappa, 1000)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.special import i0  # doctest: +SKIP\n    >>> plt.hist(s, 50, density=True)\n    >>> x = np.linspace(-np.pi, np.pi, num=51)\n    >>> y = np.exp(kappa*np.cos(x-mu))/(2*np.pi*i0(kappa))  # doctest: +SKIP\n    >>> plt.plot(x, y, linewidth=2, color='r')  # doctest: +SKIP\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "52c9d9fd9ed6f1ae85126349bce5d5dafda16d6e3db1f2954c77fe417e61d4b8",
            "fields": [
                {
                    "id": "qar8qfbs",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.vonmises object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z42ur199",
                    "encoding": "",
                    "name": "mu",
                    "value": "",
                    "defaultValue": "",
                    "description": "Mode (\"center\") of the distribution.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gzepg_to",
                    "encoding": "",
                    "name": "kappa",
                    "value": "",
                    "defaultValue": "",
                    "description": "Concentration of the distribution, has to be >=0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gx791r2s",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``mu`` and ``kappa`` are both scalars.\nOtherwise, ``np.broadcast(mu, kappa).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lk8px059",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.vonmises",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.vonmises",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_ybuuzyh",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aytqlwr8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "uogya7af",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rp65bw54",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jxvk8prx",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oh6quew1",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "me16vwb0",
            "name": "Generator.wald",
            "description": "wald(mean, scale, size=None)\n    \n    Draw samples from a Wald, or inverse Gaussian, distribution.\n    \n    As the scale approaches infinity, the distribution becomes more like a\n    Gaussian. Some references claim that the Wald is an inverse Gaussian\n    with mean equal to 1, but this is by no means universal.\n    \n    The inverse Gaussian distribution was first studied in relationship to\n    Brownian motion. In 1956 M.C.K. Tweedie used the name inverse Gaussian\n    because there is an inverse relationship between the time to cover a\n    unit distance and distance covered in unit time.\n    \n    Parameters\n    ----------\n    mean : float or array_like of floats\n        Distribution mean, must be > 0.\n    scale : float or array_like of floats\n        Scale parameter, must be > 0.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``mean`` and ``scale`` are both scalars.\n        Otherwise, ``np.broadcast(mean, scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Wald distribution.\n    \n    Notes\n    -----\n    The probability density function for the Wald distribution is\n    \n    .. math:: P(x;mean,scale) = \\sqrt{\\frac{scale}{2\\pi x^3}}e^\n                                \\frac{-scale(x-mean)^2}{2\\cdotp mean^2x}\n    \n    As noted above the inverse Gaussian distribution first arise\n    from attempts to model Brownian motion. It is also a\n    competitor to the Weibull for use in reliability modeling and\n    modeling stock returns and interest rate processes.\n    \n    References\n    ----------\n    .. [1] Brighton Webs Ltd., Wald Distribution,\n           https://web.archive.org/web/20090423014010/http://www.brighton-webs.co.uk:80/distributions/wald.asp\n    .. [2] Chhikara, Raj S., and Folks, J. Leroy, \"The Inverse Gaussian\n           Distribution: Theory : Methodology, and Applications\", CRC Press,\n           1988.\n    .. [3] Wikipedia, \"Inverse Gaussian distribution\"\n           https://en.wikipedia.org/wiki/Inverse_Gaussian_distribution\n    \n    Examples\n    --------\n    Draw values from the distribution and plot the histogram:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> rng = np.random.default_rng()\n    >>> h = plt.hist(rng.wald(3, 2, 100000), bins=200, density=True)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3c0ef5318f8736cfa9840c5ca831c9f408a9b474ab4f1a95755f622644946324",
            "fields": [
                {
                    "id": "whnpc61r",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.wald object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nysphy_9",
                    "encoding": "",
                    "name": "mean",
                    "value": "",
                    "defaultValue": "",
                    "description": "Distribution mean, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i8_5f96f",
                    "encoding": "",
                    "name": "scale",
                    "value": "",
                    "defaultValue": "",
                    "description": "Scale parameter, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pxt_4lsa",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``mean`` and ``scale`` are both scalars.\nOtherwise, ``np.broadcast(mean, scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8jj_oza_",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.wald",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.wald",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ywmms8z3",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u3behy4w",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "zny7dd_2",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p1iw2j1c",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "27107ck1",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yauqssgq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "2a0tu954",
            "name": "Generator.weibull",
            "description": "weibull(a, size=None)\n    \n    Draw samples from a Weibull distribution.\n    \n    Draw samples from a 1-parameter Weibull distribution with the given\n    shape parameter `a`.\n    \n    .. math:: X = (-ln(U))^{1/a}\n    \n    Here, U is drawn from the uniform distribution over (0,1].\n    \n    The more common 2-parameter Weibull, including a scale parameter\n    :math:`\\lambda` is just :math:`X = \\lambda(-ln(U))^{1/a}`.\n    \n    Parameters\n    ----------\n    a : float or array_like of floats\n        Shape parameter of the distribution.  Must be nonnegative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``a`` is a scalar.  Otherwise,\n        ``np.array(a).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Weibull distribution.\n    \n    See Also\n    --------\n    scipy.stats.weibull_max\n    scipy.stats.weibull_min\n    scipy.stats.genextreme\n    gumbel\n    \n    Notes\n    -----\n    The Weibull (or Type III asymptotic extreme value distribution\n    for smallest values, SEV Type III, or Rosin-Rammler\n    distribution) is one of a class of Generalized Extreme Value\n    (GEV) distributions used in modeling extreme value problems.\n    This class includes the Gumbel and Frechet distributions.\n    \n    The probability density for the Weibull distribution is\n    \n    .. math:: p(x) = \\frac{a}\n                     {\\lambda}(\\frac{x}{\\lambda})^{a-1}e^{-(x/\\lambda)^a},\n    \n    where :math:`a` is the shape and :math:`\\lambda` the scale.\n    \n    The function has its peak (the mode) at\n    :math:`\\lambda(\\frac{a-1}{a})^{1/a}`.\n    \n    When ``a = 1``, the Weibull distribution reduces to the exponential\n    distribution.\n    \n    References\n    ----------\n    .. [1] Waloddi Weibull, Royal Technical University, Stockholm,\n           1939 \"A Statistical Theory Of The Strength Of Materials\",\n           Ingeniorsvetenskapsakademiens Handlingar Nr 151, 1939,\n           Generalstabens Litografiska Anstalts Forlag, Stockholm.\n    .. [2] Waloddi Weibull, \"A Statistical Distribution Function of\n           Wide Applicability\", Journal Of Applied Mechanics ASME Paper\n           1951.\n    .. [3] Wikipedia, \"Weibull distribution\",\n           https://en.wikipedia.org/wiki/Weibull_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> rng = np.random.default_rng()\n    >>> a = 5. # shape\n    >>> s = rng.weibull(a, 1000)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> def weibull(x, n, a):\n    ...     return (a / n) * (x / n)**(a - 1) * np.exp(-(x / n)**a)\n    >>> count, bins, _ = plt.hist(rng.weibull(5., 1000))\n    >>> x = np.linspace(0, 2, 1000)\n    >>> bin_spacing = np.mean(np.diff(bins))\n    >>> plt.plot(x, weibull(x, 1., 5.) * bin_spacing * s.size, label='Weibull PDF')\n    >>> plt.legend()\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3c7d4820c732c0d1b724c880962e3d8a8eb01546c134531076effc873d675252",
            "fields": [
                {
                    "id": "3n53o4us",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.weibull object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m2fl_p3v",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape parameter of the distribution.  Must be nonnegative.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "so7fmlth",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``a`` is a scalar.  Otherwise,\n``np.array(a).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "shxn7ilm",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.weibull",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.weibull",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tq58tgz0",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mre91mkw",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "k73_4uod",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "owuuyrx1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "idp8kxtk",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w58oc0n7",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "m9ibe5np",
            "name": "Generator.zipf",
            "description": "zipf(a, size=None)\n    \n    Draw samples from a Zipf distribution.\n    \n    Samples are drawn from a Zipf distribution with specified parameter\n    `a` > 1.\n    \n    The Zipf distribution (also known as the zeta distribution) is a\n    discrete probability distribution that satisfies Zipf's law: the\n    frequency of an item is inversely proportional to its rank in a\n    frequency table.\n    \n    Parameters\n    ----------\n    a : float or array_like of floats\n        Distribution parameter. Must be greater than 1.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``a`` is a scalar. Otherwise,\n        ``np.array(a).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Zipf distribution.\n    \n    See Also\n    --------\n    scipy.stats.zipf : probability density function, distribution, or\n        cumulative density function, etc.\n    \n    Notes\n    -----\n    The probability mass function (PMF) for the Zipf distribution is\n    \n    .. math:: p(k) = \\frac{k^{-a}}{\\zeta(a)},\n    \n    for integers :math:`k \\geq 1`, where :math:`\\zeta` is the Riemann Zeta\n    function.\n    \n    It is named for the American linguist George Kingsley Zipf, who noted\n    that the frequency of any word in a sample of a language is inversely\n    proportional to its rank in the frequency table.\n    \n    References\n    ----------\n    .. [1] Zipf, G. K., \"Selected Studies of the Principle of Relative\n           Frequency in Language,\" Cambridge, MA: Harvard Univ. Press,\n           1932.\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> a = 4.0\n    >>> n = 20000\n    >>> rng = np.random.default_rng()\n    >>> s = rng.zipf(a, size=n)\n    \n    Display the histogram of the samples, along with\n    the expected histogram based on the probability\n    density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.special import zeta  # doctest: +SKIP\n    \n    `bincount` provides a fast histogram for small integers.\n    \n    >>> count = np.bincount(s)\n    >>> k = np.arange(1, s.max() + 1)\n    \n    >>> plt.bar(k, count[1:], alpha=0.5, label='sample count')\n    >>> plt.plot(k, n*(k**-a)/zeta(a), 'k.-', alpha=0.5,\n    ...          label='expected count')   # doctest: +SKIP\n    >>> plt.semilogy()\n    >>> plt.grid(alpha=0.4)\n    >>> plt.legend()\n    >>> plt.title(f'Zipf sample, a={a}, size={n}')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0c7dd515059357babf02a51bd8b64c208b0ef440a875e71e9afca714d3fa9cd2",
            "fields": [
                {
                    "id": "nsi0va6t",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._generator.Generator.zipf object",
                    "type": "Object:numpy.random._generator.Generator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "liaouh0r",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Distribution parameter. Must be greater than 1.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9x48xyot",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``a`` is a scalar. Otherwise,\n``np.array(a).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xwrs7pt4",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._generator.Generator.zipf",
                    "defaultValue": "numpy.matlib.numpy.random._generator.Generator.zipf",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7jwznpry",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g6rhaenn",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "6sjer8ti",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xzh8n9j9",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._generator.Generator",
                    "defaultValue": "numpy.random._generator.Generator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nqmt0ui_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b216w2av",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "p1rpq5jy",
            "name": "MT19937.__init__",
            "description": "\nMT19937(seed=None)\n    \n    Container for the Mersenne Twister pseudo-random number generator.\n    \n    Parameters\n    ----------\n    seed : {None, int, array_like[ints], SeedSequence}, optional\n        A seed to initialize the `BitGenerator`. If None, then fresh,\n        unpredictable entropy will be pulled from the OS. If an ``int`` or\n        ``array_like[ints]`` is passed, then it will be passed to\n        `SeedSequence` to derive the initial `BitGenerator` state. One may also\n        pass in a `SeedSequence` instance.\n    \n    Attributes\n    ----------\n    lock: threading.Lock\n        Lock instance that is shared so that the same bit git generator can\n        be used in multiple Generators without corrupting the state. Code that\n        generates values from a bit generator should hold the bit generator's\n        lock.\n    \n    Notes\n    -----\n    `MT19937` provides a capsule containing function pointers that produce\n    doubles, and unsigned 32 and 64- bit integers [1]_. These are not\n    directly consumable in Python and must be consumed by a `Generator`\n    or similar object that supports low-level access.\n    \n    The Python stdlib module \"random\" also contains a Mersenne Twister\n    pseudo-random number generator.\n    \n    **State and Seeding**\n    \n    The `MT19937` state vector consists of a 624-element array of\n    32-bit unsigned integers plus a single integer value between 0 and 624\n    that indexes the current position within the main array.\n    \n    The input seed is processed by `SeedSequence` to fill the whole state. The\n    first element is reset such that only its most significant bit is set.\n    \n    **Parallel Features**\n    \n    The preferred way to use a BitGenerator in parallel applications is to use\n    the `SeedSequence.spawn` method to obtain entropy values, and to use these\n    to generate new BitGenerators:\n    \n    >>> from numpy.random import Generator, MT19937, SeedSequence\n    >>> sg = SeedSequence(1234)\n    >>> rg = [Generator(MT19937(s)) for s in sg.spawn(10)]\n    \n    Another method is to use `MT19937.jumped` which advances the state as-if\n    :math:`2^{128}` random numbers have been generated ([1]_, [2]_). This\n    allows the original sequence to be split so that distinct segments can be\n    used in each worker process. All generators should be chained to ensure\n    that the segments come from the same sequence.\n    \n    >>> from numpy.random import Generator, MT19937, SeedSequence\n    >>> sg = SeedSequence(1234)\n    >>> bit_generator = MT19937(sg)\n    >>> rg = []\n    >>> for _ in range(10):\n    ...    rg.append(Generator(bit_generator))\n    ...    # Chain the BitGenerators\n    ...    bit_generator = bit_generator.jumped()\n    \n    **Compatibility Guarantee**\n    \n    `MT19937` makes a guarantee that a fixed seed will always produce\n    the same random integer stream.\n    \n    References\n    ----------\n    .. [1] Hiroshi Haramoto, Makoto Matsumoto, and Pierre L'Ecuyer, \"A Fast\n        Jump Ahead Algorithm for Linear Recurrences in a Polynomial Space\",\n        Sequences and Their Applications - SETA, 290--298, 2008.\n    .. [2] Hiroshi Haramoto, Makoto Matsumoto, Takuji Nishimura, Fran\u00e7ois\n        Panneton, Pierre L'Ecuyer, \"Efficient Jump Ahead for F2-Linear\n        Random Number Generators\", INFORMS JOURNAL ON COMPUTING, Vol. 20,\n        No. 3, Summer 2008, pp. 385-390.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "25754b5246651ff023f8fcf2843ac335f9b006e6c9e1ac05a11761cfaf04c4b1",
            "fields": [
                {
                    "id": "bshhidz6",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to MT19937 object",
                    "type": "Object:numpy.random._mt19937.MT19937",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "lc80arow",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2kb97rsv",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fm6a1j7z",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._mt19937.MT19937.__init__",
                    "defaultValue": "numpy.matlib.numpy.random._mt19937.MT19937.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vcivhb4k",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bkypxaee",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "p561wfzb",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xhksehsg",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._mt19937.MT19937",
                    "defaultValue": "numpy.random._mt19937.MT19937",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oaotbwwf",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qvt1qegp",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "avbq8miq",
            "name": "MT19937.jumped",
            "description": "jumped(jumps=1)\n    \n    Returns a new bit generator with the state jumped\n    \n    The state of the returned bit generator is jumped as-if\n    2**(128 * jumps) random numbers have been generated.\n    \n    Parameters\n    ----------\n    jumps : integer, positive\n        Number of times to jump the state of the bit generator returned\n    \n    Returns\n    -------\n    bit_generator : MT19937\n        New instance of generator jumped iter times\n    \n    Notes\n    -----\n    The jump step is computed using a modified version of Matsumoto's\n    implementation of Horner's method. The step polynomial is precomputed\n    to perform 2**128 steps. The jumped state has been verified to match\n    the state produced using Matsumoto's original code.\n    \n    References\n    ----------\n    .. [1] Matsumoto, M, Generating multiple disjoint streams of\n       pseudorandom number sequences.  Accessed on: May 6, 2020.\n       http://www.math.sci.hiroshima-u.ac.jp/m-mat/MT/JUMP/\n    .. [2] Hiroshi Haramoto, Makoto Matsumoto, Takuji Nishimura, Fran\u00e7ois\n       Panneton, Pierre L'Ecuyer, \"Efficient Jump Ahead for F2-Linear\n       Random Number Generators\", INFORMS JOURNAL ON COMPUTING, Vol. 20,\n       No. 3, Summer 2008, pp. 385-390.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6ac3c9ad1c68f90ca39b82ab57a7af9e481ab8b81f1c0a80cc311157ab9a7192",
            "fields": [
                {
                    "id": "qd9umc81",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._mt19937.MT19937.jumped object",
                    "type": "Object:numpy.random._mt19937.MT19937",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o3dccfx_",
                    "encoding": "",
                    "name": "jumps",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of times to jump the state of the bit generator returned",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yltaqaxc",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._mt19937.MT19937.jumped",
                    "defaultValue": "numpy.matlib.numpy.random._mt19937.MT19937.jumped",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vyzcu0dp",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o0lspcz1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "06v5evi8",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t2eg83no",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._mt19937.MT19937",
                    "defaultValue": "numpy.random._mt19937.MT19937",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "59wblkf9",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5wqffwx3",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "bl2g9ptc",
            "name": "MT19937.random_raw",
            "description": "random_raw(self, size=None)\n    \n    Return randoms as generated by the underlying BitGenerator\n    \n    Parameters\n    ----------\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    output : bool, optional\n        Output values.  Used for performance testing since the generated\n        values are not returned.\n    \n    Returns\n    -------\n    out : uint or ndarray\n        Drawn samples.\n    \n    Notes\n    -----\n    This method directly exposes the raw underlying pseudo-random\n    number generator. All values are returned as unsigned 64-bit\n    values irrespective of the number of bits produced by the PRNG.\n    \n    See the class docstring for the number of bits returned.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f15ea25348600f38f16d328d5ee272c1affc5631f798ccbd3cb513275d0ffebf",
            "fields": [
                {
                    "id": "edu8wu8c",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._mt19937.MT19937.random_raw object",
                    "type": "Object:numpy.random._mt19937.MT19937",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ccazi56p",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bq1n960r",
                    "encoding": "",
                    "name": "output",
                    "value": true,
                    "defaultValue": true,
                    "description": "Output values.  Used for performance testing since the generated\nvalues are not returned.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jzo_dgeg",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._mt19937.MT19937.random_raw",
                    "defaultValue": "numpy.matlib.numpy.random._mt19937.MT19937.random_raw",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vs_aaujg",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1o9m7ndh",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "sl4zvhwg",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ek0_sfjd",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._mt19937.MT19937",
                    "defaultValue": "numpy.random._mt19937.MT19937",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c5qbt30l",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "__aovofh",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "dm2od3gq",
            "name": "MT19937.spawn",
            "description": "spawn(n_children)\n    \n    Create new independent child bit generators.\n    \n    See :ref:`seedsequence-spawn` for additional notes on spawning\n    children.  Some bit generators also implement ``jumped``\n    as a different approach for creating independent streams.\n    \n    .. versionadded:: 1.25.0\n    \n    Parameters\n    ----------\n    n_children : int\n    \n    Returns\n    -------\n    child_bit_generators : list of BitGenerators\n    \n    Raises\n    ------\n    TypeError\n        When the underlying SeedSequence does not implement spawning.\n    \n    See Also\n    --------\n    random.Generator.spawn, random.SeedSequence.spawn :\n        Equivalent method on the generator and seed sequence.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3386108bcb6288ce07df79830ec0500b441db11405f68c5e99998dc5a9d34d07",
            "fields": [
                {
                    "id": "_apt3nhe",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._mt19937.MT19937.spawn object",
                    "type": "Object:numpy.random._mt19937.MT19937",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5etqxvmh",
                    "encoding": "",
                    "name": "n_children",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dcsdu_t7",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._mt19937.MT19937.spawn",
                    "defaultValue": "numpy.matlib.numpy.random._mt19937.MT19937.spawn",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zexhao8v",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zxut3q2y",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "36ju7142",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8_erza2l",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._mt19937.MT19937",
                    "defaultValue": "numpy.random._mt19937.MT19937",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rjag365w",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1s07rq8p",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "gr6awc_g",
            "name": "PCG64.__init__",
            "description": "\nPCG64(seed=None)\n    \n    BitGenerator for the PCG-64 pseudo-random number generator.\n    \n    Parameters\n    ----------\n    seed : {None, int, array_like[ints], SeedSequence}, optional\n        A seed to initialize the `BitGenerator`. If None, then fresh,\n        unpredictable entropy will be pulled from the OS. If an ``int`` or\n        ``array_like[ints]`` is passed, then it will be passed to\n        `SeedSequence` to derive the initial `BitGenerator` state. One may also\n        pass in a `SeedSequence` instance.\n    \n    Notes\n    -----\n    PCG-64 is a 128-bit implementation of O'Neill's permutation congruential\n    generator ([1]_, [2]_). PCG-64 has a period of :math:`2^{128}` and supports\n    advancing an arbitrary number of steps as well as :math:`2^{127}` streams.\n    The specific member of the PCG family that we use is PCG XSL RR 128/64\n    as described in the paper ([2]_).\n    \n    `PCG64` provides a capsule containing function pointers that produce\n    doubles, and unsigned 32 and 64- bit integers. These are not\n    directly consumable in Python and must be consumed by a `Generator`\n    or similar object that supports low-level access.\n    \n    Supports the method :meth:`advance` to advance the RNG an arbitrary number of\n    steps. The state of the PCG-64 RNG is represented by 2 128-bit unsigned\n    integers.\n    \n    **State and Seeding**\n    \n    The `PCG64` state vector consists of 2 unsigned 128-bit values,\n    which are represented externally as Python ints. One is the state of the\n    PRNG, which is advanced by a linear congruential generator (LCG). The\n    second is a fixed odd increment used in the LCG.\n    \n    The input seed is processed by `SeedSequence` to generate both values. The\n    increment is not independently settable.\n    \n    **Parallel Features**\n    \n    The preferred way to use a BitGenerator in parallel applications is to use\n    the `SeedSequence.spawn` method to obtain entropy values, and to use these\n    to generate new BitGenerators:\n    \n    >>> from numpy.random import Generator, PCG64, SeedSequence\n    >>> sg = SeedSequence(1234)\n    >>> rg = [Generator(PCG64(s)) for s in sg.spawn(10)]\n    \n    **Compatibility Guarantee**\n    \n    `PCG64` makes a guarantee that a fixed seed will always produce\n    the same random integer stream.\n    \n    References\n    ----------\n    .. [1] `\"PCG, A Family of Better Random Number Generators\"\n           <https://www.pcg-random.org/>`_\n    .. [2] O'Neill, Melissa E. `\"PCG: A Family of Simple Fast Space-Efficient\n           Statistically Good Algorithms for Random Number Generation\"\n           <https://www.cs.hmc.edu/tr/hmc-cs-2014-0905.pdf>`_",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c8a8660e2c7f60a512189e6fa5045fee2df4a62bd54c3605a6911d9accbf1ec7",
            "fields": [
                {
                    "id": "kjpfd_9q",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to PCG64 object",
                    "type": "Object:numpy.random._pcg64.PCG64",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "n53ip89q",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p3ubcfpz",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wvs543g8",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._pcg64.PCG64.__init__",
                    "defaultValue": "numpy.matlib.numpy.random._pcg64.PCG64.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yw6_5vib",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "01ygiemc",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ay3j3tdm",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zlvd0z5y",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._pcg64.PCG64",
                    "defaultValue": "numpy.random._pcg64.PCG64",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a6oq2qfy",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r5nhhlwd",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "q9ab5l3l",
            "name": "PCG64.advance",
            "description": "advance(delta)\n    \n    Advance the underlying RNG as-if delta draws have occurred.\n    \n    Parameters\n    ----------\n    delta : integer, positive\n        Number of draws to advance the RNG. Must be less than the\n        size state variable in the underlying RNG.\n    \n    Returns\n    -------\n    self : PCG64\n        RNG advanced delta steps\n    \n    Notes\n    -----\n    Advancing a RNG updates the underlying RNG state as-if a given\n    number of calls to the underlying RNG have been made. In general\n    there is not a one-to-one relationship between the number output\n    random values from a particular distribution and the number of\n    draws from the core RNG.  This occurs for two reasons:\n    \n    * The random values are simulated using a rejection-based method\n      and so, on average, more than one value from the underlying\n      RNG is required to generate an single draw.\n    * The number of bits required to generate a simulated value\n      differs from the number of bits generated by the underlying\n      RNG.  For example, two 16-bit integer values can be simulated\n      from a single draw of a 32-bit RNG.\n    \n    Advancing the RNG state resets any pre-computed random numbers.\n    This is required to ensure exact reproducibility.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6e6d48ca484cf4d42a85d46ee67b6f9a56abeee268e0752430c5a975ab26b83e",
            "fields": [
                {
                    "id": "wfsgcp26",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._pcg64.PCG64.advance object",
                    "type": "Object:numpy.random._pcg64.PCG64",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bop6uvl_",
                    "encoding": "",
                    "name": "delta",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of draws to advance the RNG. Must be less than the\nsize state variable in the underlying RNG.",
                    "type": "integer, positive",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v3led3jk",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._pcg64.PCG64.advance",
                    "defaultValue": "numpy.matlib.numpy.random._pcg64.PCG64.advance",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iga3fos3",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r67q0l5g",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "2xrs07if",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lbak38ti",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._pcg64.PCG64",
                    "defaultValue": "numpy.random._pcg64.PCG64",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t1kmg1xk",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r27bg90h",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "__28ksm3",
            "name": "PCG64.jumped",
            "description": "jumped(jumps=1)\n    \n    Returns a new bit generator with the state jumped.\n    \n    Jumps the state as-if jumps * 210306068529402873165736369884012333109\n    random numbers have been generated.\n    \n    Parameters\n    ----------\n    jumps : integer, positive\n        Number of times to jump the state of the bit generator returned\n    \n    Returns\n    -------\n    bit_generator : PCG64\n        New instance of generator jumped iter times\n    \n    Notes\n    -----\n    The step size is phi-1 when multiplied by 2**128 where phi is the\n    golden ratio.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "742b9c1f009dee2cd90be44c32fc0a0ed4798fd5a76b8cc9c04cf1ee00dc5d7a",
            "fields": [
                {
                    "id": "v_fjm0lp",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._pcg64.PCG64.jumped object",
                    "type": "Object:numpy.random._pcg64.PCG64",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eevk_bij",
                    "encoding": "",
                    "name": "jumps",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of times to jump the state of the bit generator returned",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jpq445pz",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._pcg64.PCG64.jumped",
                    "defaultValue": "numpy.matlib.numpy.random._pcg64.PCG64.jumped",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nrwv2m1p",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1yrxtm3t",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9nloulpp",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l3386jyn",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._pcg64.PCG64",
                    "defaultValue": "numpy.random._pcg64.PCG64",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1q2hha_a",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iwbz9yvs",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "d2emyq24",
            "name": "PCG64.random_raw",
            "description": "random_raw(self, size=None)\n    \n    Return randoms as generated by the underlying BitGenerator\n    \n    Parameters\n    ----------\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    output : bool, optional\n        Output values.  Used for performance testing since the generated\n        values are not returned.\n    \n    Returns\n    -------\n    out : uint or ndarray\n        Drawn samples.\n    \n    Notes\n    -----\n    This method directly exposes the raw underlying pseudo-random\n    number generator. All values are returned as unsigned 64-bit\n    values irrespective of the number of bits produced by the PRNG.\n    \n    See the class docstring for the number of bits returned.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c15f7707631f8bbea974cacdb3e9b5b16712b1c37c121844987c72ab70f6b8fc",
            "fields": [
                {
                    "id": "m2xh0u08",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._pcg64.PCG64.random_raw object",
                    "type": "Object:numpy.random._pcg64.PCG64",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "np5c8nsc",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "suj3kg4k",
                    "encoding": "",
                    "name": "output",
                    "value": true,
                    "defaultValue": true,
                    "description": "Output values.  Used for performance testing since the generated\nvalues are not returned.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ou7p_d1q",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._pcg64.PCG64.random_raw",
                    "defaultValue": "numpy.matlib.numpy.random._pcg64.PCG64.random_raw",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bfid8yoh",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ywdkyn4t",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "cjipehwd",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n2ceuvld",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._pcg64.PCG64",
                    "defaultValue": "numpy.random._pcg64.PCG64",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nn235bd6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2lz8o67y",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "uxpt392m",
            "name": "PCG64.spawn",
            "description": "spawn(n_children)\n    \n    Create new independent child bit generators.\n    \n    See :ref:`seedsequence-spawn` for additional notes on spawning\n    children.  Some bit generators also implement ``jumped``\n    as a different approach for creating independent streams.\n    \n    .. versionadded:: 1.25.0\n    \n    Parameters\n    ----------\n    n_children : int\n    \n    Returns\n    -------\n    child_bit_generators : list of BitGenerators\n    \n    Raises\n    ------\n    TypeError\n        When the underlying SeedSequence does not implement spawning.\n    \n    See Also\n    --------\n    random.Generator.spawn, random.SeedSequence.spawn :\n        Equivalent method on the generator and seed sequence.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "82b4d036128d21cbf62a99f6fda94ca241958d579ab057292c8a8863c51da0f5",
            "fields": [
                {
                    "id": "12v23ry9",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._pcg64.PCG64.spawn object",
                    "type": "Object:numpy.random._pcg64.PCG64",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tswxsp90",
                    "encoding": "",
                    "name": "n_children",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "urtqry27",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._pcg64.PCG64.spawn",
                    "defaultValue": "numpy.matlib.numpy.random._pcg64.PCG64.spawn",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_uyyzor4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "me55za3q",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "u6ic2tr_",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yfeg22kj",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._pcg64.PCG64",
                    "defaultValue": "numpy.random._pcg64.PCG64",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f9z95kgb",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gulxxhox",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "g2yp9l47",
            "name": "PCG64DXSM.__init__",
            "description": "\nPCG64DXSM(seed=None)\n    \n    BitGenerator for the PCG-64 DXSM pseudo-random number generator.\n    \n    Parameters\n    ----------\n    seed : {None, int, array_like[ints], SeedSequence}, optional\n        A seed to initialize the `BitGenerator`. If None, then fresh,\n        unpredictable entropy will be pulled from the OS. If an ``int`` or\n        ``array_like[ints]`` is passed, then it will be passed to\n        `SeedSequence` to derive the initial `BitGenerator` state. One may also\n        pass in a `SeedSequence` instance.\n    \n    Notes\n    -----\n    PCG-64 DXSM is a 128-bit implementation of O'Neill's permutation congruential\n    generator ([1]_, [2]_). PCG-64 DXSM has a period of :math:`2^{128}` and supports\n    advancing an arbitrary number of steps as well as :math:`2^{127}` streams.\n    The specific member of the PCG family that we use is PCG CM DXSM 128/64. It\n    differs from `PCG64` in that it uses the stronger DXSM output function,\n    a 64-bit \"cheap multiplier\" in the LCG, and outputs from the state before\n    advancing it rather than advance-then-output.\n    \n    `PCG64DXSM` provides a capsule containing function pointers that produce\n    doubles, and unsigned 32 and 64- bit integers. These are not\n    directly consumable in Python and must be consumed by a `Generator`\n    or similar object that supports low-level access.\n    \n    Supports the method :meth:`advance` to advance the RNG an arbitrary number of\n    steps. The state of the PCG-64 DXSM RNG is represented by 2 128-bit unsigned\n    integers.\n    \n    **State and Seeding**\n    \n    The `PCG64DXSM` state vector consists of 2 unsigned 128-bit values,\n    which are represented externally as Python ints. One is the state of the\n    PRNG, which is advanced by a linear congruential generator (LCG). The\n    second is a fixed odd increment used in the LCG.\n    \n    The input seed is processed by `SeedSequence` to generate both values. The\n    increment is not independently settable.\n    \n    **Parallel Features**\n    \n    The preferred way to use a BitGenerator in parallel applications is to use\n    the `SeedSequence.spawn` method to obtain entropy values, and to use these\n    to generate new BitGenerators:\n    \n    >>> from numpy.random import Generator, PCG64DXSM, SeedSequence\n    >>> sg = SeedSequence(1234)\n    >>> rg = [Generator(PCG64DXSM(s)) for s in sg.spawn(10)]\n    \n    **Compatibility Guarantee**\n    \n    `PCG64DXSM` makes a guarantee that a fixed seed will always produce\n    the same random integer stream.\n    \n    References\n    ----------\n    .. [1] `\"PCG, A Family of Better Random Number Generators\"\n           <http://www.pcg-random.org/>`_\n    .. [2] O'Neill, Melissa E. `\"PCG: A Family of Simple Fast Space-Efficient\n           Statistically Good Algorithms for Random Number Generation\"\n           <https://www.cs.hmc.edu/tr/hmc-cs-2014-0905.pdf>`_",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "303fb4f2ee8ab5d639db96cf76a42ccc3e2ea7ab0546c2adf6f505cccc3ff8ea",
            "fields": [
                {
                    "id": "egb6yttb",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to PCG64DXSM object",
                    "type": "Object:numpy.random._pcg64.PCG64DXSM",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "q68v6p6w",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "85i62zq8",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zc1rriua",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._pcg64.PCG64DXSM.__init__",
                    "defaultValue": "numpy.matlib.numpy.random._pcg64.PCG64DXSM.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "89n1_gh4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rcx5u3zt",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "yafds9tw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gt6whgqi",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._pcg64.PCG64DXSM",
                    "defaultValue": "numpy.random._pcg64.PCG64DXSM",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cd0gl0ac",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y8zl7h06",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "yj17wv_q",
            "name": "PCG64DXSM.advance",
            "description": "advance(delta)\n    \n    Advance the underlying RNG as-if delta draws have occurred.\n    \n    Parameters\n    ----------\n    delta : integer, positive\n        Number of draws to advance the RNG. Must be less than the\n        size state variable in the underlying RNG.\n    \n    Returns\n    -------\n    self : PCG64\n        RNG advanced delta steps\n    \n    Notes\n    -----\n    Advancing a RNG updates the underlying RNG state as-if a given\n    number of calls to the underlying RNG have been made. In general\n    there is not a one-to-one relationship between the number output\n    random values from a particular distribution and the number of\n    draws from the core RNG.  This occurs for two reasons:\n    \n    * The random values are simulated using a rejection-based method\n      and so, on average, more than one value from the underlying\n      RNG is required to generate an single draw.\n    * The number of bits required to generate a simulated value\n      differs from the number of bits generated by the underlying\n      RNG.  For example, two 16-bit integer values can be simulated\n      from a single draw of a 32-bit RNG.\n    \n    Advancing the RNG state resets any pre-computed random numbers.\n    This is required to ensure exact reproducibility.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8b08cf0c98442bdd51c2ed781404e9311f56a6f3c922242de2581bc9e91fc8a6",
            "fields": [
                {
                    "id": "dvgodd_n",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._pcg64.PCG64DXSM.advance object",
                    "type": "Object:numpy.random._pcg64.PCG64DXSM",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "scbjmk1_",
                    "encoding": "",
                    "name": "delta",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of draws to advance the RNG. Must be less than the\nsize state variable in the underlying RNG.",
                    "type": "integer, positive",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oa2fyohv",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._pcg64.PCG64DXSM.advance",
                    "defaultValue": "numpy.matlib.numpy.random._pcg64.PCG64DXSM.advance",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9mj_gpbx",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xy19kjum",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ydvyl0lc",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "289uxsnj",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._pcg64.PCG64DXSM",
                    "defaultValue": "numpy.random._pcg64.PCG64DXSM",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_yvznhw4",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g3j88sa6",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "m00781lc",
            "name": "PCG64DXSM.jumped",
            "description": "jumped(jumps=1)\n    \n    Returns a new bit generator with the state jumped.\n    \n    Jumps the state as-if jumps * 210306068529402873165736369884012333109\n    random numbers have been generated.\n    \n    Parameters\n    ----------\n    jumps : integer, positive\n        Number of times to jump the state of the bit generator returned\n    \n    Returns\n    -------\n    bit_generator : PCG64DXSM\n        New instance of generator jumped iter times\n    \n    Notes\n    -----\n    The step size is phi-1 when multiplied by 2**128 where phi is the\n    golden ratio.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ede312e0fdbc216328580df4786d18c7464e579932f680eb37093d6be85dab36",
            "fields": [
                {
                    "id": "mua1aiai",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._pcg64.PCG64DXSM.jumped object",
                    "type": "Object:numpy.random._pcg64.PCG64DXSM",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i2rkyu2f",
                    "encoding": "",
                    "name": "jumps",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of times to jump the state of the bit generator returned",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0mlltdfi",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._pcg64.PCG64DXSM.jumped",
                    "defaultValue": "numpy.matlib.numpy.random._pcg64.PCG64DXSM.jumped",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e6a_jdq6",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m3mqcpsa",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0hfgaj4v",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xlka0d6u",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._pcg64.PCG64DXSM",
                    "defaultValue": "numpy.random._pcg64.PCG64DXSM",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hndzexpl",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "or1blj5w",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "g7tdjjp_",
            "name": "PCG64DXSM.random_raw",
            "description": "random_raw(self, size=None)\n    \n    Return randoms as generated by the underlying BitGenerator\n    \n    Parameters\n    ----------\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    output : bool, optional\n        Output values.  Used for performance testing since the generated\n        values are not returned.\n    \n    Returns\n    -------\n    out : uint or ndarray\n        Drawn samples.\n    \n    Notes\n    -----\n    This method directly exposes the raw underlying pseudo-random\n    number generator. All values are returned as unsigned 64-bit\n    values irrespective of the number of bits produced by the PRNG.\n    \n    See the class docstring for the number of bits returned.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b6846dc92000b105f3975a4035f0e82c88f2229a50b9eec7ed013621388e1464",
            "fields": [
                {
                    "id": "ifpl6rg9",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._pcg64.PCG64DXSM.random_raw object",
                    "type": "Object:numpy.random._pcg64.PCG64DXSM",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m4ssv_b2",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y9hcktiz",
                    "encoding": "",
                    "name": "output",
                    "value": true,
                    "defaultValue": true,
                    "description": "Output values.  Used for performance testing since the generated\nvalues are not returned.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j9mq39cg",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._pcg64.PCG64DXSM.random_raw",
                    "defaultValue": "numpy.matlib.numpy.random._pcg64.PCG64DXSM.random_raw",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sa9dvgr0",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "03usv9uk",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "yj2sq423",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5sg3fmg3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._pcg64.PCG64DXSM",
                    "defaultValue": "numpy.random._pcg64.PCG64DXSM",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dgy0hd1u",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "riww2a3f",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "9lu0uyx_",
            "name": "PCG64DXSM.spawn",
            "description": "spawn(n_children)\n    \n    Create new independent child bit generators.\n    \n    See :ref:`seedsequence-spawn` for additional notes on spawning\n    children.  Some bit generators also implement ``jumped``\n    as a different approach for creating independent streams.\n    \n    .. versionadded:: 1.25.0\n    \n    Parameters\n    ----------\n    n_children : int\n    \n    Returns\n    -------\n    child_bit_generators : list of BitGenerators\n    \n    Raises\n    ------\n    TypeError\n        When the underlying SeedSequence does not implement spawning.\n    \n    See Also\n    --------\n    random.Generator.spawn, random.SeedSequence.spawn :\n        Equivalent method on the generator and seed sequence.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8c112cadb48f6f78976485921bbf4692b6aeb266c6b171299d5b92e7d2e26174",
            "fields": [
                {
                    "id": "vb9w287m",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._pcg64.PCG64DXSM.spawn object",
                    "type": "Object:numpy.random._pcg64.PCG64DXSM",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f6uz3v2_",
                    "encoding": "",
                    "name": "n_children",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oen29jd5",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._pcg64.PCG64DXSM.spawn",
                    "defaultValue": "numpy.matlib.numpy.random._pcg64.PCG64DXSM.spawn",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u5d8bxjf",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b8is1vtf",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bm5jg29b",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sf7u6gev",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._pcg64.PCG64DXSM",
                    "defaultValue": "numpy.random._pcg64.PCG64DXSM",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lzln2rmv",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wssjgizp",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "zg20in83",
            "name": "Philox.__init__",
            "description": "\nPhilox(seed=None, counter=None, key=None)\n    \n    Container for the Philox (4x64) pseudo-random number generator.\n    \n    Parameters\n    ----------\n    seed : {None, int, array_like[ints], SeedSequence}, optional\n        A seed to initialize the `BitGenerator`. If None, then fresh,\n        unpredictable entropy will be pulled from the OS. If an ``int`` or\n        ``array_like[ints]`` is passed, then it will be passed to\n        `SeedSequence` to derive the initial `BitGenerator` state. One may also\n        pass in a `SeedSequence` instance.\n    counter : {None, int, array_like}, optional\n        Counter to use in the Philox state. Can be either\n        a Python int (long in 2.x) in [0, 2**256) or a 4-element uint64 array.\n        If not provided, the RNG is initialized at 0.\n    key : {None, int, array_like}, optional\n        Key to use in the Philox state.  Unlike ``seed``, the value in key is\n        directly set. Can be either a Python int in [0, 2**128) or a 2-element\n        uint64 array. `key` and ``seed`` cannot both be used.\n    \n    Attributes\n    ----------\n    lock: threading.Lock\n        Lock instance that is shared so that the same bit git generator can\n        be used in multiple Generators without corrupting the state. Code that\n        generates values from a bit generator should hold the bit generator's\n        lock.\n    \n    Notes\n    -----\n    Philox is a 64-bit PRNG that uses a counter-based design based on weaker\n    (and faster) versions of cryptographic functions [1]_. Instances using\n    different values of the key produce independent sequences.  Philox has a\n    period of :math:`2^{256} - 1` and supports arbitrary advancing and jumping\n    the sequence in increments of :math:`2^{128}`. These features allow\n    multiple non-overlapping sequences to be generated.\n    \n    `Philox` provides a capsule containing function pointers that produce\n    doubles, and unsigned 32 and 64- bit integers. These are not\n    directly consumable in Python and must be consumed by a `Generator`\n    or similar object that supports low-level access.\n    \n    **State and Seeding**\n    \n    The `Philox` state vector consists of a 256-bit value encoded as\n    a 4-element uint64 array and a 128-bit value encoded as a 2-element uint64\n    array. The former is a counter which is incremented by 1 for every 4 64-bit\n    randoms produced. The second is a key which determined the sequence\n    produced. Using different keys produces independent sequences.\n    \n    The input ``seed`` is processed by `SeedSequence` to generate the key. The\n    counter is set to 0.\n    \n    Alternately, one can omit the ``seed`` parameter and set the ``key`` and\n    ``counter`` directly.\n    \n    **Parallel Features**\n    \n    The preferred way to use a BitGenerator in parallel applications is to use\n    the `SeedSequence.spawn` method to obtain entropy values, and to use these\n    to generate new BitGenerators:\n    \n    >>> from numpy.random import Generator, Philox, SeedSequence\n    >>> sg = SeedSequence(1234)\n    >>> rg = [Generator(Philox(s)) for s in sg.spawn(10)]\n    \n    `Philox` can be used in parallel applications by calling the :meth:`jumped`\n    method to advance the state as-if :math:`2^{128}` random numbers have\n    been generated. Alternatively, :meth:`advance` can be used to advance the\n    counter for any positive step in [0, 2**256). When using :meth:`jumped`, all\n    generators should be chained to ensure that the segments come from the same\n    sequence.\n    \n    >>> from numpy.random import Generator, Philox\n    >>> bit_generator = Philox(1234)\n    >>> rg = []\n    >>> for _ in range(10):\n    ...    rg.append(Generator(bit_generator))\n    ...    bit_generator = bit_generator.jumped()\n    \n    Alternatively, `Philox` can be used in parallel applications by using\n    a sequence of distinct keys where each instance uses different key.\n    \n    >>> key = 2**96 + 2**33 + 2**17 + 2**9\n    >>> rg = [Generator(Philox(key=key+i)) for i in range(10)]\n    \n    **Compatibility Guarantee**\n    \n    `Philox` makes a guarantee that a fixed ``seed`` will always produce\n    the same random integer stream.\n    \n    Examples\n    --------\n    >>> from numpy.random import Generator, Philox\n    >>> rg = Generator(Philox(1234))\n    >>> rg.standard_normal()\n    0.123  # random\n    \n    References\n    ----------\n    .. [1] John K. Salmon, Mark A. Moraes, Ron O. Dror, and David E. Shaw,\n           \"Parallel Random Numbers: As Easy as 1, 2, 3,\" Proceedings of\n           the International Conference for High Performance Computing,\n           Networking, Storage and Analysis (SC11), New York, NY: ACM, 2011.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d14abfcf370476bef965a36324f8dc8b6a22e393082749b35965f4621f462079",
            "fields": [
                {
                    "id": "d2ev1v0s",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to Philox object",
                    "type": "Object:numpy.random._philox.Philox",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "ozti92ng",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iiohmfhf",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kmohepns",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._philox.Philox.__init__",
                    "defaultValue": "numpy.matlib.numpy.random._philox.Philox.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gg7b4ttx",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wdw9_v25",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "vri1y6tu",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z18f_jjv",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._philox.Philox",
                    "defaultValue": "numpy.random._philox.Philox",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gc2vpme8",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ic0qox9s",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "wydvtrpl",
            "name": "Philox.advance",
            "description": "advance(delta)\n    \n    Advance the underlying RNG as-if delta draws have occurred.\n    \n    Parameters\n    ----------\n    delta : integer, positive\n        Number of draws to advance the RNG. Must be less than the\n        size state variable in the underlying RNG.\n    \n    Returns\n    -------\n    self : Philox\n        RNG advanced delta steps\n    \n    Notes\n    -----\n    Advancing a RNG updates the underlying RNG state as-if a given\n    number of calls to the underlying RNG have been made. In general\n    there is not a one-to-one relationship between the number output\n    random values from a particular distribution and the number of\n    draws from the core RNG.  This occurs for two reasons:\n    \n    * The random values are simulated using a rejection-based method\n      and so, on average, more than one value from the underlying\n      RNG is required to generate an single draw.\n    * The number of bits required to generate a simulated value\n      differs from the number of bits generated by the underlying\n      RNG.  For example, two 16-bit integer values can be simulated\n      from a single draw of a 32-bit RNG.\n    \n    Advancing the RNG state resets any pre-computed random numbers.\n    This is required to ensure exact reproducibility.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b17e7debfc2174149768512dba48a0ed28d1f2adff807407490c9eba9b4594b9",
            "fields": [
                {
                    "id": "g7uiivjo",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._philox.Philox.advance object",
                    "type": "Object:numpy.random._philox.Philox",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y068xt8r",
                    "encoding": "",
                    "name": "delta",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of draws to advance the RNG. Must be less than the\nsize state variable in the underlying RNG.",
                    "type": "integer, positive",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ot4051ux",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._philox.Philox.advance",
                    "defaultValue": "numpy.matlib.numpy.random._philox.Philox.advance",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hobl4gf0",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ybczewb6",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "z9m7srwb",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yn_bz8yl",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._philox.Philox",
                    "defaultValue": "numpy.random._philox.Philox",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bjkf7kny",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0rfzkygb",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "7w7afp0v",
            "name": "Philox.jumped",
            "description": "jumped(jumps=1)\n    \n    Returns a new bit generator with the state jumped\n    \n    The state of the returned bit generator is jumped as-if\n    (2**128) * jumps random numbers have been generated.\n    \n    Parameters\n    ----------\n    jumps : integer, positive\n        Number of times to jump the state of the bit generator returned\n    \n    Returns\n    -------\n    bit_generator : Philox\n        New instance of generator jumped iter times",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7a5f483d5b03d4bcfeb578994ef7c59e16d87bdff8e04ec8b1d6bbacdf80e984",
            "fields": [
                {
                    "id": "07xmbbo9",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._philox.Philox.jumped object",
                    "type": "Object:numpy.random._philox.Philox",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1_l47892",
                    "encoding": "",
                    "name": "jumps",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of times to jump the state of the bit generator returned",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0t9c53k3",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._philox.Philox.jumped",
                    "defaultValue": "numpy.matlib.numpy.random._philox.Philox.jumped",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_l0ngsjl",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_ue6c1dr",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "i79kn7kk",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "916ytwte",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._philox.Philox",
                    "defaultValue": "numpy.random._philox.Philox",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "50i_91eh",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c_nbmizb",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "_1ncpi92",
            "name": "Philox.random_raw",
            "description": "random_raw(self, size=None)\n    \n    Return randoms as generated by the underlying BitGenerator\n    \n    Parameters\n    ----------\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    output : bool, optional\n        Output values.  Used for performance testing since the generated\n        values are not returned.\n    \n    Returns\n    -------\n    out : uint or ndarray\n        Drawn samples.\n    \n    Notes\n    -----\n    This method directly exposes the raw underlying pseudo-random\n    number generator. All values are returned as unsigned 64-bit\n    values irrespective of the number of bits produced by the PRNG.\n    \n    See the class docstring for the number of bits returned.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "188bff8b98e358718e3fb4630b0b9712bf21cbbfc4900e58476e807c0b2c37e7",
            "fields": [
                {
                    "id": "2ado_q1c",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._philox.Philox.random_raw object",
                    "type": "Object:numpy.random._philox.Philox",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_syaldil",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9r4xtjy8",
                    "encoding": "",
                    "name": "output",
                    "value": true,
                    "defaultValue": true,
                    "description": "Output values.  Used for performance testing since the generated\nvalues are not returned.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7uxuclkg",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._philox.Philox.random_raw",
                    "defaultValue": "numpy.matlib.numpy.random._philox.Philox.random_raw",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7z70re8i",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a_nim9s9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "xxnrirh0",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1jg142ea",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._philox.Philox",
                    "defaultValue": "numpy.random._philox.Philox",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9ihrwais",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i9axr7yr",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "k3sy94ss",
            "name": "Philox.spawn",
            "description": "spawn(n_children)\n    \n    Create new independent child bit generators.\n    \n    See :ref:`seedsequence-spawn` for additional notes on spawning\n    children.  Some bit generators also implement ``jumped``\n    as a different approach for creating independent streams.\n    \n    .. versionadded:: 1.25.0\n    \n    Parameters\n    ----------\n    n_children : int\n    \n    Returns\n    -------\n    child_bit_generators : list of BitGenerators\n    \n    Raises\n    ------\n    TypeError\n        When the underlying SeedSequence does not implement spawning.\n    \n    See Also\n    --------\n    random.Generator.spawn, random.SeedSequence.spawn :\n        Equivalent method on the generator and seed sequence.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "09f9081a7e9f0704335359943395ecd0d90e3375a76143004a22eb3a35584d08",
            "fields": [
                {
                    "id": "8ttxmedu",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._philox.Philox.spawn object",
                    "type": "Object:numpy.random._philox.Philox",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fk8hkzcj",
                    "encoding": "",
                    "name": "n_children",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fqe39edr",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._philox.Philox.spawn",
                    "defaultValue": "numpy.matlib.numpy.random._philox.Philox.spawn",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nqq52u9j",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s0_bfk9q",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "hc72_sej",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "04o6dbql",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._philox.Philox",
                    "defaultValue": "numpy.random._philox.Philox",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i0tuq9yl",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dzpmnr9e",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "4ix43jhl",
            "name": "RandomState.__init__",
            "description": "\nRandomState(seed=None)\n    \n    Container for the slow Mersenne Twister pseudo-random number generator.\n    Consider using a different BitGenerator with the Generator container\n    instead.\n    \n    `RandomState` and `Generator` expose a number of methods for generating\n    random numbers drawn from a variety of probability distributions. In\n    addition to the distribution-specific arguments, each method takes a\n    keyword argument `size` that defaults to ``None``. If `size` is ``None``,\n    then a single value is generated and returned. If `size` is an integer,\n    then a 1-D array filled with generated values is returned. If `size` is a\n    tuple, then an array with that shape is filled and returned.\n    \n    **Compatibility Guarantee**\n    \n    A fixed bit generator using a fixed seed and a fixed series of calls to\n    'RandomState' methods using the same parameters will always produce the\n    same results up to roundoff error except when the values were incorrect.\n    `RandomState` is effectively frozen and will only receive updates that\n    are required by changes in the internals of Numpy. More substantial\n    changes, including algorithmic improvements, are reserved for\n    `Generator`.\n    \n    Parameters\n    ----------\n    seed : {None, int, array_like, BitGenerator}, optional\n        Random seed used to initialize the pseudo-random number generator or\n        an instantized BitGenerator.  If an integer or array, used as a seed for\n        the MT19937 BitGenerator. Values can be any integer between 0 and\n        2**32 - 1 inclusive, an array (or other sequence) of such integers,\n        or ``None`` (the default).  If `seed` is ``None``, then the `MT19937`\n        BitGenerator is initialized by reading data from ``/dev/urandom``\n        (or the Windows analogue) if available or seed from the clock\n        otherwise.\n    \n    Notes\n    -----\n    The Python stdlib module \"random\" also contains a Mersenne Twister\n    pseudo-random number generator with a number of methods that are similar\n    to the ones available in `RandomState`. `RandomState`, besides being\n    NumPy-aware, has the advantage that it provides a much larger number\n    of probability distributions to choose from.\n    \n    See Also\n    --------\n    Generator\n    MT19937\n    numpy.random.BitGenerator",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "47f2aa54febfd1d0a358c16b07c8ea877c6c4b6a058beb7c678bac58a8b5d965",
            "fields": [
                {
                    "id": "wr93731w",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to RandomState object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "yrqodyjb",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "as3385my",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vo9_hxul",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.__init__",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7s4j29vq",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3vql63l2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9spyacyd",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4qzevtnk",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "izddb7x_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bbj2anio",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "8cpe21x7",
            "name": "RandomState.beta",
            "description": "beta(a, b, size=None)\n    \n    Draw samples from a Beta distribution.\n    \n    The Beta distribution is a special case of the Dirichlet distribution,\n    and is related to the Gamma distribution.  It has the probability\n    distribution function\n    \n    .. math:: f(x; a,b) = \\frac{1}{B(\\alpha, \\beta)} x^{\\alpha - 1}\n                                                     (1 - x)^{\\beta - 1},\n    \n    where the normalization, B, is the beta function,\n    \n    .. math:: B(\\alpha, \\beta) = \\int_0^1 t^{\\alpha - 1}\n                                 (1 - t)^{\\beta - 1} dt.\n    \n    It is often seen in Bayesian inference and order statistics.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.beta`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    \n    Parameters\n    ----------\n    a : float or array_like of floats\n        Alpha, positive (>0).\n    b : float or array_like of floats\n        Beta, positive (>0).\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``a`` and ``b`` are both scalars.\n        Otherwise, ``np.broadcast(a, b).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized beta distribution.\n    \n    See Also\n    --------\n    random.Generator.beta: which should be used for new code.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "789a47dbb539f032e0493059014ab298aab901fea1b00cf5c23c53a3dbc24a38",
            "fields": [
                {
                    "id": "cdv59xpy",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.beta object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vdk53qzv",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Alpha, positive (>0).",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3zxtashd",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Beta, positive (>0).",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ts_vqntl",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``a`` and ``b`` are both scalars.\nOtherwise, ``np.broadcast(a, b).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wds6sz44",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.beta",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.beta",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uo0de5lt",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aw61qhws",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "pzf8vy_6",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lpthnval",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ffcv28qi",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "smt4ztne",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "eovu_0uq",
            "name": "RandomState.binomial",
            "description": "binomial(n, p, size=None)\n    \n    Draw samples from a binomial distribution.\n    \n    Samples are drawn from a binomial distribution with specified\n    parameters, n trials and p probability of success where\n    n an integer >= 0 and p is in the interval [0,1]. (n may be\n    input as a float, but it is truncated to an integer in use)\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.binomial`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    n : int or array_like of ints\n        Parameter of the distribution, >= 0. Floats are also accepted,\n        but they will be truncated to integers.\n    p : float or array_like of floats\n        Parameter of the distribution, >= 0 and <=1.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``n`` and ``p`` are both scalars.\n        Otherwise, ``np.broadcast(n, p).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized binomial distribution, where\n        each sample is equal to the number of successes over the n trials.\n    \n    See Also\n    --------\n    scipy.stats.binom : probability density function, distribution or\n        cumulative density function, etc.\n    random.Generator.binomial: which should be used for new code.\n    \n    Notes\n    -----\n    The probability mass function (PMF) for the binomial distribution is\n    \n    .. math:: P(N) = \\binom{n}{N}p^N(1-p)^{n-N},\n    \n    where :math:`n` is the number of trials, :math:`p` is the probability\n    of success, and :math:`N` is the number of successes.\n    \n    When estimating the standard error of a proportion in a population by\n    using a random sample, the normal distribution works well unless the\n    product p*n <=5, where p = population proportion estimate, and n =\n    number of samples, in which case the binomial distribution is used\n    instead. For example, a sample of 15 people shows 4 who are left\n    handed, and 11 who are right handed. Then p = 4/15 = 27%. 0.27*15 = 4,\n    so the binomial distribution should be used in this case.\n    \n    References\n    ----------\n    .. [1] Dalgaard, Peter, \"Introductory Statistics with R\",\n           Springer-Verlag, 2002.\n    .. [2] Glantz, Stanton A. \"Primer of Biostatistics.\", McGraw-Hill,\n           Fifth Edition, 2002.\n    .. [3] Lentner, Marvin, \"Elementary Applied Statistics\", Bogden\n           and Quigley, 1972.\n    .. [4] Weisstein, Eric W. \"Binomial Distribution.\" From MathWorld--A\n           Wolfram Web Resource.\n           https://mathworld.wolfram.com/BinomialDistribution.html\n    .. [5] Wikipedia, \"Binomial distribution\",\n           https://en.wikipedia.org/wiki/Binomial_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> n, p = 10, .5  # number of trials, probability of each trial\n    >>> s = np.random.binomial(n, p, 1000)\n    # result of flipping a coin 10 times, tested 1000 times.\n    \n    A real world example. A company drills 9 wild-cat oil exploration\n    wells, each with an estimated probability of success of 0.1. All nine\n    wells fail. What is the probability of that happening?\n    \n    Let's do 20,000 trials of the model, and count the number that\n    generate zero positive results.\n    \n    >>> sum(np.random.binomial(9, 0.1, 20000) == 0)/20000.\n    # answer = 0.38885, or 38%.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "617ba58f0e3e3738cabfec40dbd1fed8c621df0f4f42e31a3da4fc4f325e6855",
            "fields": [
                {
                    "id": "iepd7q3b",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.binomial object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "29_irkin",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "Parameter of the distribution, >= 0. Floats are also accepted,\nbut they will be truncated to integers.",
                    "type": "int or arraylike of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ql7e84nm",
                    "encoding": "",
                    "name": "p",
                    "value": "",
                    "defaultValue": "",
                    "description": "Parameter of the distribution, >= 0 and <=1.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wbm2bqx_",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``n`` and ``p`` are both scalars.\nOtherwise, ``np.broadcast(n, p).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hmvcvfm2",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.binomial",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.binomial",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n057ntye",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ue0nncy0",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ugtxbqzu",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qmwft3rv",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mzkuwwxc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rjm4k58y",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "t5zufbst",
            "name": "RandomState.bytes",
            "description": "bytes(length)\n    \n    Return random bytes.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.bytes`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    length : int\n        Number of random bytes.\n    \n    Returns\n    -------\n    out : bytes\n        String of length `length`.\n    \n    See Also\n    --------\n    random.Generator.bytes: which should be used for new code.\n    \n    Examples\n    --------\n    >>> np.random.bytes(10)\n    b' eh\\x85\\x022SZ\\xbf\\xa4' #random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d3c3ee62646004a5121419c3c65a75ca152fd3132f4788f2e527950161b17c65",
            "fields": [
                {
                    "id": "l4wfx4ao",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.bytes object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4l4qcory",
                    "encoding": "",
                    "name": "length",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of random bytes.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mk0v2x92",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.bytes",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.bytes",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ydfasmwl",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gh4zvzzw",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "1nb9qoor",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8u59ohma",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "znrxv0ay",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0exiqrnl",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "t5qhqt3m",
            "name": "RandomState.chisquare",
            "description": "chisquare(df, size=None)\n    \n    Draw samples from a chi-square distribution.\n    \n    When `df` independent random variables, each with standard normal\n    distributions (mean 0, variance 1), are squared and summed, the\n    resulting distribution is chi-square (see Notes).  This distribution\n    is often used in hypothesis testing.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.chisquare`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    df : float or array_like of floats\n         Number of degrees of freedom, must be > 0.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``df`` is a scalar.  Otherwise,\n        ``np.array(df).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized chi-square distribution.\n    \n    Raises\n    ------\n    ValueError\n        When `df` <= 0 or when an inappropriate `size` (e.g. ``size=-1``)\n        is given.\n    \n    See Also\n    --------\n    random.Generator.chisquare: which should be used for new code.\n    \n    Notes\n    -----\n    The variable obtained by summing the squares of `df` independent,\n    standard normally distributed random variables:\n    \n    .. math:: Q = \\sum_{i=1}^{\\mathtt{df}} X^2_i\n    \n    is chi-square distributed, denoted\n    \n    .. math:: Q \\sim \\chi^2_k.\n    \n    The probability density function of the chi-squared distribution is\n    \n    .. math:: p(x) = \\frac{(1/2)^{k/2}}{\\Gamma(k/2)}\n                     x^{k/2 - 1} e^{-x/2},\n    \n    where :math:`\\Gamma` is the gamma function,\n    \n    .. math:: \\Gamma(x) = \\int_0^{-\\infty} t^{x - 1} e^{-t} dt.\n    \n    References\n    ----------\n    .. [1] NIST \"Engineering Statistics Handbook\"\n           https://www.itl.nist.gov/div898/handbook/eda/section3/eda3666.htm\n    \n    Examples\n    --------\n    >>> np.random.chisquare(2,4)\n    array([ 1.89920014,  9.00867716,  3.13710533,  5.62318272]) # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f5ce6d1c2579da35549e8109eeb3b0f7c1a02db5c624d22fbb20f43f0a226fc9",
            "fields": [
                {
                    "id": "2uodjq2i",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.chisquare object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m66ngkes",
                    "encoding": "",
                    "name": "df",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of degrees of freedom, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xr2edkpt",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``df`` is a scalar.  Otherwise,\n``np.array(df).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y0l_ks58",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.chisquare",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.chisquare",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1jik00s_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x50uhr7g",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "exu_pb2m",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jzyhwxa2",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gksfkyiy",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "evifh75x",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "3z8g30g5",
            "name": "RandomState.choice",
            "description": "choice(a, size=None, replace=True, p=None)\n    \n    Generates a random sample from a given 1-D array\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.choice`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    .. warning::\n        This function uses the C-long dtype, which is 32bit on windows\n        and otherwise 64bit on 64bit platforms (and 32bit on 32bit ones).\n        Since NumPy 2.0, NumPy's default integer is 32bit on 32bit platforms\n        and 64bit on 64bit platforms.\n    \n    \n    Parameters\n    ----------\n    a : 1-D array-like or int\n        If an ndarray, a random sample is generated from its elements.\n        If an int, the random sample is generated as if it were ``np.arange(a)``\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    replace : boolean, optional\n        Whether the sample is with or without replacement. Default is True,\n        meaning that a value of ``a`` can be selected multiple times.\n    p : 1-D array-like, optional\n        The probabilities associated with each entry in a.\n        If not given, the sample assumes a uniform distribution over all\n        entries in ``a``.\n    \n    Returns\n    -------\n    samples : single item or ndarray\n        The generated random samples\n    \n    Raises\n    ------\n    ValueError\n        If a is an int and less than zero, if a or p are not 1-dimensional,\n        if a is an array-like of size 0, if p is not a vector of\n        probabilities, if a and p have different lengths, or if\n        replace=False and the sample size is greater than the population\n        size\n    \n    See Also\n    --------\n    randint, shuffle, permutation\n    random.Generator.choice: which should be used in new code\n    \n    Notes\n    -----\n    Setting user-specified probabilities through ``p`` uses a more general but less\n    efficient sampler than the default. The general sampler produces a different sample\n    than the optimized sampler even if each element of ``p`` is 1 / len(a).\n    \n    Sampling random rows from a 2-D array is not possible with this function,\n    but is possible with `Generator.choice` through its ``axis`` keyword.\n    \n    Examples\n    --------\n    Generate a uniform random sample from np.arange(5) of size 3:\n    \n    >>> np.random.choice(5, 3)\n    array([0, 3, 4]) # random\n    >>> #This is equivalent to np.random.randint(0,5,3)\n    \n    Generate a non-uniform random sample from np.arange(5) of size 3:\n    \n    >>> np.random.choice(5, 3, p=[0.1, 0, 0.3, 0.6, 0])\n    array([3, 3, 0]) # random\n    \n    Generate a uniform random sample from np.arange(5) of size 3 without\n    replacement:\n    \n    >>> np.random.choice(5, 3, replace=False)\n    array([3,1,0]) # random\n    >>> #This is equivalent to np.random.permutation(np.arange(5))[:3]\n    \n    Generate a non-uniform random sample from np.arange(5) of size\n    3 without replacement:\n    \n    >>> np.random.choice(5, 3, replace=False, p=[0.1, 0, 0.3, 0.6, 0])\n    array([2, 3, 0]) # random\n    \n    Any of the above can be repeated with an arbitrary array-like\n    instead of just integers. For instance:\n    \n    >>> aa_milne_arr = ['pooh', 'rabbit', 'piglet', 'Christopher']\n    >>> np.random.choice(aa_milne_arr, 5, p=[0.5, 0.1, 0.1, 0.3])\n    array(['pooh', 'pooh', 'pooh', 'Christopher', 'piglet'], # random\n          dtype='<U11')",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7e7ea30fa6defffa2074109bfbaeab5803a9dc94e4031d829d41be670a654327",
            "fields": [
                {
                    "id": "zuhpqucm",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.choice object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fmgyjd1e",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "If an ndarray, a random sample is generated from its elements.\nIf an int, the random sample is generated as if it were ``np.arange(a)``",
                    "type": "1-D array-like or int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h5rlc6xd",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pu3svorp",
                    "encoding": "",
                    "name": "replace",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether the sample is with or without replacement. Default is True,\nmeaning that a value of ``a`` can be selected multiple times.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tnb4oc53",
                    "encoding": "",
                    "name": "p",
                    "value": "",
                    "defaultValue": "",
                    "description": "The probabilities associated with each entry in a.\nIf not given, the sample assumes a uniform distribution over all\nentries in ``a``.",
                    "type": "1-D array-like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fxualqt2",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.choice",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.choice",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "350wiw31",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6dqwrjv7",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "qx3e5lwy",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v0zctrnl",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "drx4tp_x",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qy8mt5es",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "g_jdj_h5",
            "name": "RandomState.dirichlet",
            "description": "dirichlet(alpha, size=None)\n    \n    Draw samples from the Dirichlet distribution.\n    \n    Draw `size` samples of dimension k from a Dirichlet distribution. A\n    Dirichlet-distributed random variable can be seen as a multivariate\n    generalization of a Beta distribution. The Dirichlet distribution\n    is a conjugate prior of a multinomial distribution in Bayesian\n    inference.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.dirichlet`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    alpha : sequence of floats, length k\n        Parameter of the distribution (length ``k`` for sample of\n        length ``k``).\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        vector of length ``k`` is returned.\n    \n    Returns\n    -------\n    samples : ndarray,\n        The drawn samples, of shape ``(size, k)``.\n    \n    Raises\n    ------\n    ValueError\n        If any value in ``alpha`` is less than or equal to zero\n    \n    See Also\n    --------\n    random.Generator.dirichlet: which should be used for new code.\n    \n    Notes\n    -----\n    The Dirichlet distribution is a distribution over vectors\n    :math:`x` that fulfil the conditions :math:`x_i>0` and\n    :math:`\\sum_{i=1}^k x_i = 1`.\n    \n    The probability density function :math:`p` of a\n    Dirichlet-distributed random vector :math:`X` is\n    proportional to\n    \n    .. math:: p(x) \\propto \\prod_{i=1}^{k}{x^{\\alpha_i-1}_i},\n    \n    where :math:`\\alpha` is a vector containing the positive\n    concentration parameters.\n    \n    The method uses the following property for computation: let :math:`Y`\n    be a random vector which has components that follow a standard gamma\n    distribution, then :math:`X = \\frac{1}{\\sum_{i=1}^k{Y_i}} Y`\n    is Dirichlet-distributed\n    \n    References\n    ----------\n    .. [1] David McKay, \"Information Theory, Inference and Learning\n           Algorithms,\" chapter 23,\n           https://www.inference.org.uk/mackay/itila/\n    .. [2] Wikipedia, \"Dirichlet distribution\",\n           https://en.wikipedia.org/wiki/Dirichlet_distribution\n    \n    Examples\n    --------\n    Taking an example cited in Wikipedia, this distribution can be used if\n    one wanted to cut strings (each of initial length 1.0) into K pieces\n    with different lengths, where each piece had, on average, a designated\n    average length, but allowing some variation in the relative sizes of\n    the pieces.\n    \n    >>> s = np.random.dirichlet((10, 5, 3), 20).transpose()\n    \n    >>> import matplotlib.pyplot as plt\n    >>> plt.barh(range(20), s[0])\n    >>> plt.barh(range(20), s[1], left=s[0], color='g')\n    >>> plt.barh(range(20), s[2], left=s[0]+s[1], color='r')\n    >>> plt.title(\"Lengths of Strings\")",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "823f5e94cb037baa42f354ddd1f85bfc262287f3d38ef3457c1e6670b1cf0146",
            "fields": [
                {
                    "id": "3wdxpmcs",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.dirichlet object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z1br1c6m",
                    "encoding": "",
                    "name": "alpha",
                    "value": "",
                    "defaultValue": "",
                    "description": "Parameter of the distribution (length ``k`` for sample of\nlength ``k``).",
                    "type": "sequence of floats, length k",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jlnk6lwr",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nvector of length ``k`` is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h3hu94fp",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.dirichlet",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.dirichlet",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pepc_ksf",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8ukt6grb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "3oxosqzz",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ntn2bn6k",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vaxamh69",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "egdatqqy",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "li0cmnzs",
            "name": "RandomState.exponential",
            "description": "exponential(scale=1.0, size=None)\n    \n    Draw samples from an exponential distribution.\n    \n    Its probability density function is\n    \n    .. math:: f(x; \\frac{1}{\\beta}) = \\frac{1}{\\beta} \\exp(-\\frac{x}{\\beta}),\n    \n    for ``x > 0`` and 0 elsewhere. :math:`\\beta` is the scale parameter,\n    which is the inverse of the rate parameter :math:`\\lambda = 1/\\beta`.\n    The rate parameter is an alternative, widely used parameterization\n    of the exponential distribution [3]_.\n    \n    The exponential distribution is a continuous analogue of the\n    geometric distribution.  It describes many common situations, such as\n    the size of raindrops measured over many rainstorms [1]_, or the time\n    between page requests to Wikipedia [2]_.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.exponential`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    scale : float or array_like of floats\n        The scale parameter, :math:`\\beta = 1/\\lambda`. Must be\n        non-negative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``scale`` is a scalar.  Otherwise,\n        ``np.array(scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized exponential distribution.\n    \n    Examples\n    --------\n    A real world example: Assume a company has 10000 customer support \n    agents and the average time between customer calls is 4 minutes.\n    \n    >>> n = 10000\n    >>> time_between_calls = np.random.default_rng().exponential(scale=4, size=n)\n    \n    What is the probability that a customer will call in the next \n    4 to 5 minutes? \n    \n    >>> x = ((time_between_calls < 5).sum())/n \n    >>> y = ((time_between_calls < 4).sum())/n\n    >>> x-y\n    0.08 # may vary\n    \n    See Also\n    --------\n    random.Generator.exponential: which should be used for new code.\n    \n    References\n    ----------\n    .. [1] Peyton Z. Peebles Jr., \"Probability, Random Variables and\n           Random Signal Principles\", 4th ed, 2001, p. 57.\n    .. [2] Wikipedia, \"Poisson process\",\n           https://en.wikipedia.org/wiki/Poisson_process\n    .. [3] Wikipedia, \"Exponential distribution\",\n           https://en.wikipedia.org/wiki/Exponential_distribution",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "80532f5bf5f5db6a46f4a21fee217107cdddf3215d0aa00ed0bf7dfe40f5310b",
            "fields": [
                {
                    "id": "tu1yipy1",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.exponential object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kmum3gw1",
                    "encoding": "",
                    "name": "scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "The scale parameter, :math:`\\beta = 1/\\lambda`. Must be\nnon-negative.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n2fw3acf",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``scale`` is a scalar.  Otherwise,\n``np.array(scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rsl64c2i",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.exponential",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.exponential",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s7sdq_l8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "41_kyi8j",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "zg9_m7sv",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qicv9z52",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "trhmiam6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d0nk2o6g",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "__v_ie69",
            "name": "RandomState.f",
            "description": "f(dfnum, dfden, size=None)\n    \n    Draw samples from an F distribution.\n    \n    Samples are drawn from an F distribution with specified parameters,\n    `dfnum` (degrees of freedom in numerator) and `dfden` (degrees of\n    freedom in denominator), where both parameters must be greater than\n    zero.\n    \n    The random variate of the F distribution (also known as the\n    Fisher distribution) is a continuous probability distribution\n    that arises in ANOVA tests, and is the ratio of two chi-square\n    variates.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.f`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    dfnum : float or array_like of floats\n        Degrees of freedom in numerator, must be > 0.\n    dfden : float or array_like of float\n        Degrees of freedom in denominator, must be > 0.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``dfnum`` and ``dfden`` are both scalars.\n        Otherwise, ``np.broadcast(dfnum, dfden).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Fisher distribution.\n    \n    See Also\n    --------\n    scipy.stats.f : probability density function, distribution or\n        cumulative density function, etc.\n    random.Generator.f: which should be used for new code.\n    \n    Notes\n    -----\n    The F statistic is used to compare in-group variances to between-group\n    variances. Calculating the distribution depends on the sampling, and\n    so it is a function of the respective degrees of freedom in the\n    problem.  The variable `dfnum` is the number of samples minus one, the\n    between-groups degrees of freedom, while `dfden` is the within-groups\n    degrees of freedom, the sum of the number of samples in each group\n    minus the number of groups.\n    \n    References\n    ----------\n    .. [1] Glantz, Stanton A. \"Primer of Biostatistics.\", McGraw-Hill,\n           Fifth Edition, 2002.\n    .. [2] Wikipedia, \"F-distribution\",\n           https://en.wikipedia.org/wiki/F-distribution\n    \n    Examples\n    --------\n    An example from Glantz[1], pp 47-40:\n    \n    Two groups, children of diabetics (25 people) and children from people\n    without diabetes (25 controls). Fasting blood glucose was measured,\n    case group had a mean value of 86.1, controls had a mean value of\n    82.2. Standard deviations were 2.09 and 2.49 respectively. Are these\n    data consistent with the null hypothesis that the parents diabetic\n    status does not affect their children's blood glucose levels?\n    Calculating the F statistic from the data gives a value of 36.01.\n    \n    Draw samples from the distribution:\n    \n    >>> dfnum = 1. # between group degrees of freedom\n    >>> dfden = 48. # within groups degrees of freedom\n    >>> s = np.random.f(dfnum, dfden, 1000)\n    \n    The lower bound for the top 1% of the samples is :\n    \n    >>> np.sort(s)[-10]\n    7.61988120985 # random\n    \n    So there is about a 1% chance that the F statistic will exceed 7.62,\n    the measured value is 36, so the null hypothesis is rejected at the 1%\n    level.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c8f81480e042e183859d212cac62c6743168ac7b1fcbfa26a6db174f58f9924f",
            "fields": [
                {
                    "id": "rrdtfs24",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.f object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j2q56erx",
                    "encoding": "",
                    "name": "dfnum",
                    "value": "",
                    "defaultValue": "",
                    "description": "Degrees of freedom in numerator, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6fu9_7yg",
                    "encoding": "",
                    "name": "dfden",
                    "value": "",
                    "defaultValue": "",
                    "description": "Degrees of freedom in denominator, must be > 0.",
                    "type": "float or arraylike of float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mnmlo1r1",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``dfnum`` and ``dfden`` are both scalars.\nOtherwise, ``np.broadcast(dfnum, dfden).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y6mbib1i",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.f",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.f",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9nwon7bb",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zhg42p5r",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "01i1j7wi",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lr570w2h",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0liid_ii",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "usvdio_7",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "h0nlnf99",
            "name": "RandomState.gamma",
            "description": "gamma(shape, scale=1.0, size=None)\n    \n    Draw samples from a Gamma distribution.\n    \n    Samples are drawn from a Gamma distribution with specified parameters,\n    `shape` (sometimes designated \"k\") and `scale` (sometimes designated\n    \"theta\"), where both parameters are > 0.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.gamma`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    shape : float or array_like of floats\n        The shape of the gamma distribution. Must be non-negative.\n    scale : float or array_like of floats, optional\n        The scale of the gamma distribution. Must be non-negative.\n        Default is equal to 1.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``shape`` and ``scale`` are both scalars.\n        Otherwise, ``np.broadcast(shape, scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized gamma distribution.\n    \n    See Also\n    --------\n    scipy.stats.gamma : probability density function, distribution or\n        cumulative density function, etc.\n    random.Generator.gamma: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density for the Gamma distribution is\n    \n    .. math:: p(x) = x^{k-1}\\frac{e^{-x/\\theta}}{\\theta^k\\Gamma(k)},\n    \n    where :math:`k` is the shape and :math:`\\theta` the scale,\n    and :math:`\\Gamma` is the Gamma function.\n    \n    The Gamma distribution is often used to model the times to failure of\n    electronic components, and arises naturally in processes for which the\n    waiting times between Poisson distributed events are relevant.\n    \n    References\n    ----------\n    .. [1] Weisstein, Eric W. \"Gamma Distribution.\" From MathWorld--A\n           Wolfram Web Resource.\n           https://mathworld.wolfram.com/GammaDistribution.html\n    .. [2] Wikipedia, \"Gamma distribution\",\n           https://en.wikipedia.org/wiki/Gamma_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> shape, scale = 2., 2.  # mean=4, std=2*sqrt(2)\n    >>> s = np.random.gamma(shape, scale, 1000)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> import scipy.special as sps  # doctest: +SKIP\n    >>> count, bins, ignored = plt.hist(s, 50, density=True)\n    >>> y = bins**(shape-1)*(np.exp(-bins/scale) /  # doctest: +SKIP\n    ...                      (sps.gamma(shape)*scale**shape))\n    >>> plt.plot(bins, y, linewidth=2, color='r')  # doctest: +SKIP\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0117b8e86b43a1603363c208f6ce3fae32a21ac8327044897a20f72ea6c4db9f",
            "fields": [
                {
                    "id": "deui7a6y",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.gamma object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0yg6cayx",
                    "encoding": "",
                    "name": "shape",
                    "value": "",
                    "defaultValue": "",
                    "description": "The shape of the gamma distribution. Must be non-negative.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ou0f10hp",
                    "encoding": "",
                    "name": "scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "The scale of the gamma distribution. Must be non-negative.\nDefault is equal to 1.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_huudfny",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``shape`` and ``scale`` are both scalars.\nOtherwise, ``np.broadcast(shape, scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2nfwz17k",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.gamma",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.gamma",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rbm8rva7",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7we_t4fk",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "lfnd_78n",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0xe55_t4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sjsa6y4n",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s0e3unfy",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "6um_rlp5",
            "name": "RandomState.geometric",
            "description": "geometric(p, size=None)\n    \n    Draw samples from the geometric distribution.\n    \n    Bernoulli trials are experiments with one of two outcomes:\n    success or failure (an example of such an experiment is flipping\n    a coin).  The geometric distribution models the number of trials\n    that must be run in order to achieve success.  It is therefore\n    supported on the positive integers, ``k = 1, 2, ...``.\n    \n    The probability mass function of the geometric distribution is\n    \n    .. math:: f(k) = (1 - p)^{k - 1} p\n    \n    where `p` is the probability of success of an individual trial.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.geometric`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    p : float or array_like of floats\n        The probability of success of an individual trial.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``p`` is a scalar.  Otherwise,\n        ``np.array(p).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized geometric distribution.\n    \n    See Also\n    --------\n    random.Generator.geometric: which should be used for new code.\n    \n    Examples\n    --------\n    Draw ten thousand values from the geometric distribution,\n    with the probability of an individual success equal to 0.35:\n    \n    >>> z = np.random.geometric(p=0.35, size=10000)\n    \n    How many trials succeeded after a single run?\n    \n    >>> (z == 1).sum() / 10000.\n    0.34889999999999999 #random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c973c4f2f2c8b2187b1792442cc04e56e2017cb3bd1e177788d668def9b750dc",
            "fields": [
                {
                    "id": "5exthd8p",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.geometric object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2f_au1_b",
                    "encoding": "",
                    "name": "p",
                    "value": "",
                    "defaultValue": "",
                    "description": "The probability of success of an individual trial.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m4__t8pu",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``p`` is a scalar.  Otherwise,\n``np.array(p).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n98l6qpg",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.geometric",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.geometric",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nzt562hf",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nx3c6o8t",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "y5xj1cj1",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c9xsnn6b",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9yl763gz",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "29pgpx8d",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "go66ilrb",
            "name": "RandomState.get_state",
            "description": "get_state(legacy=True)\n    \n    Return a tuple representing the internal state of the generator.\n    \n    For more details, see `set_state`.\n    \n    Parameters\n    ----------\n    legacy : bool, optional\n        Flag indicating to return a legacy tuple state when the BitGenerator\n        is MT19937, instead of a dict. Raises ValueError if the underlying\n        bit generator is not an instance of MT19937.\n    \n    Returns\n    -------\n    out : {tuple(str, ndarray of 624 uints, int, int, float), dict}\n        If legacy is True, the returned tuple has the following items:\n    \n        1. the string 'MT19937'.\n        2. a 1-D array of 624 unsigned integer keys.\n        3. an integer ``pos``.\n        4. an integer ``has_gauss``.\n        5. a float ``cached_gaussian``.\n    \n        If `legacy` is False, or the BitGenerator is not MT19937, then\n        state is returned as a dictionary.\n    \n    See Also\n    --------\n    set_state\n    \n    Notes\n    -----\n    `set_state` and `get_state` are not needed to work with any of the\n    random distributions in NumPy. If the internal state is manually altered,\n    the user should know exactly what he/she is doing.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e91a6c206147f8ecefa68829fea4c63640683f2ff4279ed378dc20375040bbcd",
            "fields": [
                {
                    "id": "zlgts3mq",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.get_state object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rgqq8n_x",
                    "encoding": "",
                    "name": "legacy",
                    "value": true,
                    "defaultValue": true,
                    "description": "Flag indicating to return a legacy tuple state when the BitGenerator\nis MT19937, instead of a dict. Raises ValueError if the underlying\nbit generator is not an instance of MT19937.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1zw6vjf9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.get_state",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.get_state",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "869l9i46",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3lhb5nav",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "pnispaha",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tvuhwzi_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gw_uf4kp",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4d61euje",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "ycir7yxv",
            "name": "RandomState.gumbel",
            "description": "gumbel(loc=0.0, scale=1.0, size=None)\n    \n    Draw samples from a Gumbel distribution.\n    \n    Draw samples from a Gumbel distribution with specified location and\n    scale.  For more information on the Gumbel distribution, see\n    Notes and References below.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.gumbel`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    loc : float or array_like of floats, optional\n        The location of the mode of the distribution. Default is 0.\n    scale : float or array_like of floats, optional\n        The scale parameter of the distribution. Default is 1. Must be non-\n        negative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``loc`` and ``scale`` are both scalars.\n        Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Gumbel distribution.\n    \n    See Also\n    --------\n    scipy.stats.gumbel_l\n    scipy.stats.gumbel_r\n    scipy.stats.genextreme\n    weibull\n    random.Generator.gumbel: which should be used for new code.\n    \n    Notes\n    -----\n    The Gumbel (or Smallest Extreme Value (SEV) or the Smallest Extreme\n    Value Type I) distribution is one of a class of Generalized Extreme\n    Value (GEV) distributions used in modeling extreme value problems.\n    The Gumbel is a special case of the Extreme Value Type I distribution\n    for maximums from distributions with \"exponential-like\" tails.\n    \n    The probability density for the Gumbel distribution is\n    \n    .. math:: p(x) = \\frac{e^{-(x - \\mu)/ \\beta}}{\\beta} e^{ -e^{-(x - \\mu)/\n              \\beta}},\n    \n    where :math:`\\mu` is the mode, a location parameter, and\n    :math:`\\beta` is the scale parameter.\n    \n    The Gumbel (named for German mathematician Emil Julius Gumbel) was used\n    very early in the hydrology literature, for modeling the occurrence of\n    flood events. It is also used for modeling maximum wind speed and\n    rainfall rates.  It is a \"fat-tailed\" distribution - the probability of\n    an event in the tail of the distribution is larger than if one used a\n    Gaussian, hence the surprisingly frequent occurrence of 100-year\n    floods. Floods were initially modeled as a Gaussian process, which\n    underestimated the frequency of extreme events.\n    \n    It is one of a class of extreme value distributions, the Generalized\n    Extreme Value (GEV) distributions, which also includes the Weibull and\n    Frechet.\n    \n    The function has a mean of :math:`\\mu + 0.57721\\beta` and a variance\n    of :math:`\\frac{\\pi^2}{6}\\beta^2`.\n    \n    References\n    ----------\n    .. [1] Gumbel, E. J., \"Statistics of Extremes,\"\n           New York: Columbia University Press, 1958.\n    .. [2] Reiss, R.-D. and Thomas, M., \"Statistical Analysis of Extreme\n           Values from Insurance, Finance, Hydrology and Other Fields,\"\n           Basel: Birkhauser Verlag, 2001.\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> mu, beta = 0, 0.1 # location and scale\n    >>> s = np.random.gumbel(mu, beta, 1000)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, ignored = plt.hist(s, 30, density=True)\n    >>> plt.plot(bins, (1/beta)*np.exp(-(bins - mu)/beta)\n    ...          * np.exp( -np.exp( -(bins - mu) /beta) ),\n    ...          linewidth=2, color='r')\n    >>> plt.show()\n    \n    Show how an extreme value distribution can arise from a Gaussian process\n    and compare to a Gaussian:\n    \n    >>> means = []\n    >>> maxima = []\n    >>> for i in range(0,1000) :\n    ...    a = np.random.normal(mu, beta, 1000)\n    ...    means.append(a.mean())\n    ...    maxima.append(a.max())\n    >>> count, bins, ignored = plt.hist(maxima, 30, density=True)\n    >>> beta = np.std(maxima) * np.sqrt(6) / np.pi\n    >>> mu = np.mean(maxima) - 0.57721*beta\n    >>> plt.plot(bins, (1/beta)*np.exp(-(bins - mu)/beta)\n    ...          * np.exp(-np.exp(-(bins - mu)/beta)),\n    ...          linewidth=2, color='r')\n    >>> plt.plot(bins, 1/(beta * np.sqrt(2 * np.pi))\n    ...          * np.exp(-(bins - mu)**2 / (2 * beta**2)),\n    ...          linewidth=2, color='g')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c9ce13a311a535fb5daf98a1cb43a3f60e34aa6a8796b1cae9d7b09a6515de04",
            "fields": [
                {
                    "id": "788o5ods",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.gumbel object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2egj2anc",
                    "encoding": "",
                    "name": "loc",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "The location of the mode of the distribution. Default is 0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oan_walr",
                    "encoding": "",
                    "name": "scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "The scale parameter of the distribution. Default is 1. Must be non-\nnegative.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ape94dnw",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``loc`` and ``scale`` are both scalars.\nOtherwise, ``np.broadcast(loc, scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_h8oltqk",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.gumbel",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.gumbel",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z0adkdos",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bln54qmr",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9fzfv87w",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0ge3anc9",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ozw20ny5",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sj6d2bfm",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "pke91ycg",
            "name": "RandomState.hypergeometric",
            "description": "hypergeometric(ngood, nbad, nsample, size=None)\n    \n    Draw samples from a Hypergeometric distribution.\n    \n    Samples are drawn from a hypergeometric distribution with specified\n    parameters, `ngood` (ways to make a good selection), `nbad` (ways to make\n    a bad selection), and `nsample` (number of items sampled, which is less\n    than or equal to the sum ``ngood + nbad``).\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.hypergeometric`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    ngood : int or array_like of ints\n        Number of ways to make a good selection.  Must be nonnegative.\n    nbad : int or array_like of ints\n        Number of ways to make a bad selection.  Must be nonnegative.\n    nsample : int or array_like of ints\n        Number of items sampled.  Must be at least 1 and at most\n        ``ngood + nbad``.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if `ngood`, `nbad`, and `nsample`\n        are all scalars.  Otherwise, ``np.broadcast(ngood, nbad, nsample).size``\n        samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized hypergeometric distribution. Each\n        sample is the number of good items within a randomly selected subset of\n        size `nsample` taken from a set of `ngood` good items and `nbad` bad items.\n    \n    See Also\n    --------\n    scipy.stats.hypergeom : probability density function, distribution or\n        cumulative density function, etc.\n    random.Generator.hypergeometric: which should be used for new code.\n    \n    Notes\n    -----\n    The probability mass function (PMF) for the Hypergeometric distribution is\n    \n    .. math:: P(x) = \\frac{\\binom{g}{x}\\binom{b}{n-x}}{\\binom{g+b}{n}},\n    \n    where :math:`0 \\le x \\le n` and :math:`n-b \\le x \\le g`\n    \n    for P(x) the probability of ``x`` good results in the drawn sample,\n    g = `ngood`, b = `nbad`, and n = `nsample`.\n    \n    Consider an urn with black and white marbles in it, `ngood` of them\n    are black and `nbad` are white. If you draw `nsample` balls without\n    replacement, then the hypergeometric distribution describes the\n    distribution of black balls in the drawn sample.\n    \n    Note that this distribution is very similar to the binomial\n    distribution, except that in this case, samples are drawn without\n    replacement, whereas in the Binomial case samples are drawn with\n    replacement (or the sample space is infinite). As the sample space\n    becomes large, this distribution approaches the binomial.\n    \n    References\n    ----------\n    .. [1] Lentner, Marvin, \"Elementary Applied Statistics\", Bogden\n           and Quigley, 1972.\n    .. [2] Weisstein, Eric W. \"Hypergeometric Distribution.\" From\n           MathWorld--A Wolfram Web Resource.\n           https://mathworld.wolfram.com/HypergeometricDistribution.html\n    .. [3] Wikipedia, \"Hypergeometric distribution\",\n           https://en.wikipedia.org/wiki/Hypergeometric_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> ngood, nbad, nsamp = 100, 2, 10\n    # number of good, number of bad, and number of samples\n    >>> s = np.random.hypergeometric(ngood, nbad, nsamp, 1000)\n    >>> from matplotlib.pyplot import hist\n    >>> hist(s)\n    #   note that it is very unlikely to grab both bad items\n    \n    Suppose you have an urn with 15 white and 15 black marbles.\n    If you pull 15 marbles at random, how likely is it that\n    12 or more of them are one color?\n    \n    >>> s = np.random.hypergeometric(15, 15, 15, 100000)\n    >>> sum(s>=12)/100000. + sum(s<=3)/100000.\n    #   answer = 0.003 ... pretty unlikely!",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "25d83942da9005d23062c5b06b730e13049a872cdd4d4ecd33d9f08dc8edb7e9",
            "fields": [
                {
                    "id": "64dv7ktk",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.hypergeometric object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zscwraqq",
                    "encoding": "",
                    "name": "ngood",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of ways to make a good selection.  Must be nonnegative.",
                    "type": "int or arraylike of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pvvqrzwi",
                    "encoding": "",
                    "name": "nbad",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of ways to make a bad selection.  Must be nonnegative.",
                    "type": "int or arraylike of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ja2s7md0",
                    "encoding": "",
                    "name": "nsample",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of items sampled.  Must be at least 1 and at most\n``ngood + nbad``.",
                    "type": "int or arraylike of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t5fwtqk_",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if `ngood`, `nbad`, and `nsample`\nare all scalars.  Otherwise, ``np.broadcast(ngood, nbad, nsample).size``\nsamples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yrb2c98w",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.hypergeometric",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.hypergeometric",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_tj_szsb",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hrckw8hm",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "kiad3_3r",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f89fhxxq",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d0fl4_em",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lt05_v1y",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "3eu81gmu",
            "name": "RandomState.laplace",
            "description": "laplace(loc=0.0, scale=1.0, size=None)\n    \n    Draw samples from the Laplace or double exponential distribution with\n    specified location (or mean) and scale (decay).\n    \n    The Laplace distribution is similar to the Gaussian/normal distribution,\n    but is sharper at the peak and has fatter tails. It represents the\n    difference between two independent, identically distributed exponential\n    random variables.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.laplace`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    loc : float or array_like of floats, optional\n        The position, :math:`\\mu`, of the distribution peak. Default is 0.\n    scale : float or array_like of floats, optional\n        :math:`\\lambda`, the exponential decay. Default is 1. Must be non-\n        negative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``loc`` and ``scale`` are both scalars.\n        Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Laplace distribution.\n    \n    See Also\n    --------\n    random.Generator.laplace: which should be used for new code.\n    \n    Notes\n    -----\n    It has the probability density function\n    \n    .. math:: f(x; \\mu, \\lambda) = \\frac{1}{2\\lambda}\n                                   \\exp\\left(-\\frac{|x - \\mu|}{\\lambda}\\right).\n    \n    The first law of Laplace, from 1774, states that the frequency\n    of an error can be expressed as an exponential function of the\n    absolute magnitude of the error, which leads to the Laplace\n    distribution. For many problems in economics and health\n    sciences, this distribution seems to model the data better\n    than the standard Gaussian distribution.\n    \n    References\n    ----------\n    .. [1] Abramowitz, M. and Stegun, I. A. (Eds.). \"Handbook of\n           Mathematical Functions with Formulas, Graphs, and Mathematical\n           Tables, 9th printing,\" New York: Dover, 1972.\n    .. [2] Kotz, Samuel, et. al. \"The Laplace Distribution and\n           Generalizations, \" Birkhauser, 2001.\n    .. [3] Weisstein, Eric W. \"Laplace Distribution.\"\n           From MathWorld--A Wolfram Web Resource.\n           https://mathworld.wolfram.com/LaplaceDistribution.html\n    .. [4] Wikipedia, \"Laplace distribution\",\n           https://en.wikipedia.org/wiki/Laplace_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution\n    \n    >>> loc, scale = 0., 1.\n    >>> s = np.random.laplace(loc, scale, 1000)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, ignored = plt.hist(s, 30, density=True)\n    >>> x = np.arange(-8., 8., .01)\n    >>> pdf = np.exp(-abs(x-loc)/scale)/(2.*scale)\n    >>> plt.plot(x, pdf)\n    \n    Plot Gaussian for comparison:\n    \n    >>> g = (1/(scale * np.sqrt(2 * np.pi)) *\n    ...      np.exp(-(x - loc)**2 / (2 * scale**2)))\n    >>> plt.plot(x,g)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8f1f22dcd5bc2ef16b580591028c4a6acffa94005f384ef3944533c96a44efb2",
            "fields": [
                {
                    "id": "hab_onz0",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.laplace object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k_eqkcf8",
                    "encoding": "",
                    "name": "loc",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "The position, :math:`\\mu`, of the distribution peak. Default is 0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "howyubld",
                    "encoding": "",
                    "name": "scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": ":math:`\\lambda`, the exponential decay. Default is 1. Must be non-\nnegative.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ntmeyqcn",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``loc`` and ``scale`` are both scalars.\nOtherwise, ``np.broadcast(loc, scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dp4_h_uc",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.laplace",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.laplace",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y8wg158f",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ca_nfxpv",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "3v_w8dw6",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p8c9hbhy",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a2bue24w",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v7f_ozng",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "qg0jrkeh",
            "name": "RandomState.logistic",
            "description": "logistic(loc=0.0, scale=1.0, size=None)\n    \n    Draw samples from a logistic distribution.\n    \n    Samples are drawn from a logistic distribution with specified\n    parameters, loc (location or mean, also median), and scale (>0).\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.logistic`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    loc : float or array_like of floats, optional\n        Parameter of the distribution. Default is 0.\n    scale : float or array_like of floats, optional\n        Parameter of the distribution. Must be non-negative.\n        Default is 1.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``loc`` and ``scale`` are both scalars.\n        Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized logistic distribution.\n    \n    See Also\n    --------\n    scipy.stats.logistic : probability density function, distribution or\n        cumulative density function, etc.\n    random.Generator.logistic: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density for the Logistic distribution is\n    \n    .. math:: P(x) = P(x) = \\frac{e^{-(x-\\mu)/s}}{s(1+e^{-(x-\\mu)/s})^2},\n    \n    where :math:`\\mu` = location and :math:`s` = scale.\n    \n    The Logistic distribution is used in Extreme Value problems where it\n    can act as a mixture of Gumbel distributions, in Epidemiology, and by\n    the World Chess Federation (FIDE) where it is used in the Elo ranking\n    system, assuming the performance of each player is a logistically\n    distributed random variable.\n    \n    References\n    ----------\n    .. [1] Reiss, R.-D. and Thomas M. (2001), \"Statistical Analysis of\n           Extreme Values, from Insurance, Finance, Hydrology and Other\n           Fields,\" Birkhauser Verlag, Basel, pp 132-133.\n    .. [2] Weisstein, Eric W. \"Logistic Distribution.\" From\n           MathWorld--A Wolfram Web Resource.\n           https://mathworld.wolfram.com/LogisticDistribution.html\n    .. [3] Wikipedia, \"Logistic-distribution\",\n           https://en.wikipedia.org/wiki/Logistic_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> loc, scale = 10, 1\n    >>> s = np.random.logistic(loc, scale, 10000)\n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, ignored = plt.hist(s, bins=50)\n    \n    #   plot against distribution\n    \n    >>> def logist(x, loc, scale):\n    ...     return np.exp((loc-x)/scale)/(scale*(1+np.exp((loc-x)/scale))**2)\n    >>> lgst_val = logist(bins, loc, scale)\n    >>> plt.plot(bins, lgst_val * count.max() / lgst_val.max())\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8fcde72c8f2aea9400d53a40f42d4ceff37002ebaba2b8f466e07ae52128375e",
            "fields": [
                {
                    "id": "rh4zug4c",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.logistic object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nxiaodwu",
                    "encoding": "",
                    "name": "loc",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Parameter of the distribution. Default is 0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dgy6xm74",
                    "encoding": "",
                    "name": "scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Parameter of the distribution. Must be non-negative.\nDefault is 1.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tv0rs6jw",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``loc`` and ``scale`` are both scalars.\nOtherwise, ``np.broadcast(loc, scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "90x9ub__",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.logistic",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.logistic",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mnwqfm3d",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b16pb2kd",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ode63tr4",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m0vmn0ni",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_7o_lj6q",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vo5v6pwf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "bxihkrns",
            "name": "RandomState.lognormal",
            "description": "lognormal(mean=0.0, sigma=1.0, size=None)\n    \n    Draw samples from a log-normal distribution.\n    \n    Draw samples from a log-normal distribution with specified mean,\n    standard deviation, and array shape.  Note that the mean and standard\n    deviation are not the values for the distribution itself, but of the\n    underlying normal distribution it is derived from.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.lognormal`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    mean : float or array_like of floats, optional\n        Mean value of the underlying normal distribution. Default is 0.\n    sigma : float or array_like of floats, optional\n        Standard deviation of the underlying normal distribution. Must be\n        non-negative. Default is 1.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``mean`` and ``sigma`` are both scalars.\n        Otherwise, ``np.broadcast(mean, sigma).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized log-normal distribution.\n    \n    See Also\n    --------\n    scipy.stats.lognorm : probability density function, distribution,\n        cumulative density function, etc.\n    random.Generator.lognormal: which should be used for new code.\n    \n    Notes\n    -----\n    A variable `x` has a log-normal distribution if `log(x)` is normally\n    distributed.  The probability density function for the log-normal\n    distribution is:\n    \n    .. math:: p(x) = \\frac{1}{\\sigma x \\sqrt{2\\pi}}\n                     e^{(-\\frac{(ln(x)-\\mu)^2}{2\\sigma^2})}\n    \n    where :math:`\\mu` is the mean and :math:`\\sigma` is the standard\n    deviation of the normally distributed logarithm of the variable.\n    A log-normal distribution results if a random variable is the *product*\n    of a large number of independent, identically-distributed variables in\n    the same way that a normal distribution results if the variable is the\n    *sum* of a large number of independent, identically-distributed\n    variables.\n    \n    References\n    ----------\n    .. [1] Limpert, E., Stahel, W. A., and Abbt, M., \"Log-normal\n           Distributions across the Sciences: Keys and Clues,\"\n           BioScience, Vol. 51, No. 5, May, 2001.\n           https://stat.ethz.ch/~stahel/lognormal/bioscience.pdf\n    .. [2] Reiss, R.D. and Thomas, M., \"Statistical Analysis of Extreme\n           Values,\" Basel: Birkhauser Verlag, 2001, pp. 31-32.\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> mu, sigma = 3., 1. # mean and standard deviation\n    >>> s = np.random.lognormal(mu, sigma, 1000)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, ignored = plt.hist(s, 100, density=True, align='mid')\n    \n    >>> x = np.linspace(min(bins), max(bins), 10000)\n    >>> pdf = (np.exp(-(np.log(x) - mu)**2 / (2 * sigma**2))\n    ...        / (x * sigma * np.sqrt(2 * np.pi)))\n    \n    >>> plt.plot(x, pdf, linewidth=2, color='r')\n    >>> plt.axis('tight')\n    >>> plt.show()\n    \n    Demonstrate that taking the products of random samples from a uniform\n    distribution can be fit well by a log-normal probability density\n    function.\n    \n    >>> # Generate a thousand samples: each is the product of 100 random\n    >>> # values, drawn from a normal distribution.\n    >>> b = []\n    >>> for i in range(1000):\n    ...    a = 10. + np.random.standard_normal(100)\n    ...    b.append(np.prod(a))\n    \n    >>> b = np.array(b) / np.min(b) # scale values to be positive\n    >>> count, bins, ignored = plt.hist(b, 100, density=True, align='mid')\n    >>> sigma = np.std(np.log(b))\n    >>> mu = np.mean(np.log(b))\n    \n    >>> x = np.linspace(min(bins), max(bins), 10000)\n    >>> pdf = (np.exp(-(np.log(x) - mu)**2 / (2 * sigma**2))\n    ...        / (x * sigma * np.sqrt(2 * np.pi)))\n    \n    >>> plt.plot(x, pdf, color='r', linewidth=2)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "79e132f1a1eaf7963222ce1fd9a1efe040d3a8815c90c8db9aa288617e118755",
            "fields": [
                {
                    "id": "iegsasgm",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.lognormal object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vnrtjocx",
                    "encoding": "",
                    "name": "mean",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Mean value of the underlying normal distribution. Default is 0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ns72xix_",
                    "encoding": "",
                    "name": "sigma",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Standard deviation of the underlying normal distribution. Must be\nnon-negative. Default is 1.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "803lvfzz",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``mean`` and ``sigma`` are both scalars.\nOtherwise, ``np.broadcast(mean, sigma).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_15byje_",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.lognormal",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.lognormal",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "my7w3zwp",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "53sipart",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "59wjx4oq",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iermudd4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zoj6vm7p",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "li8ndu9p",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "9l5oc12b",
            "name": "RandomState.logseries",
            "description": "logseries(p, size=None)\n    \n    Draw samples from a logarithmic series distribution.\n    \n    Samples are drawn from a log series distribution with specified\n    shape parameter, 0 <= ``p`` < 1.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.logseries`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    p : float or array_like of floats\n        Shape parameter for the distribution.  Must be in the range [0, 1).\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``p`` is a scalar.  Otherwise,\n        ``np.array(p).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized logarithmic series distribution.\n    \n    See Also\n    --------\n    scipy.stats.logser : probability density function, distribution or\n        cumulative density function, etc.\n    random.Generator.logseries: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density for the Log Series distribution is\n    \n    .. math:: P(k) = \\frac{-p^k}{k \\ln(1-p)},\n    \n    where p = probability.\n    \n    The log series distribution is frequently used to represent species\n    richness and occurrence, first proposed by Fisher, Corbet, and\n    Williams in 1943 [2].  It may also be used to model the numbers of\n    occupants seen in cars [3].\n    \n    References\n    ----------\n    .. [1] Buzas, Martin A.; Culver, Stephen J.,  Understanding regional\n           species diversity through the log series distribution of\n           occurrences: BIODIVERSITY RESEARCH Diversity & Distributions,\n           Volume 5, Number 5, September 1999 , pp. 187-195(9).\n    .. [2] Fisher, R.A,, A.S. Corbet, and C.B. Williams. 1943. The\n           relation between the number of species and the number of\n           individuals in a random sample of an animal population.\n           Journal of Animal Ecology, 12:42-58.\n    .. [3] D. J. Hand, F. Daly, D. Lunn, E. Ostrowski, A Handbook of Small\n           Data Sets, CRC Press, 1994.\n    .. [4] Wikipedia, \"Logarithmic distribution\",\n           https://en.wikipedia.org/wiki/Logarithmic_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> a = .6\n    >>> s = np.random.logseries(a, 10000)\n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, ignored = plt.hist(s)\n    \n    #   plot against distribution\n    \n    >>> def logseries(k, p):\n    ...     return -p**k/(k*np.log(1-p))\n    >>> plt.plot(bins, logseries(bins, a)*count.max()/\n    ...          logseries(bins, a).max(), 'r')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6db2101567251c2d15cccb2004e7567258efe2a00f74a65e8f42dfbe177ecab9",
            "fields": [
                {
                    "id": "1pwonard",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.logseries object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j99juzp1",
                    "encoding": "",
                    "name": "p",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape parameter for the distribution.  Must be in the range [0, 1).",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "db6wayjt",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``p`` is a scalar.  Otherwise,\n``np.array(p).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0ms1io56",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.logseries",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.logseries",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u8m_0upo",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1ezxiovq",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "xveiabpj",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dpxr4_88",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "awn1_0ac",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ggen6ntk",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "tw2zqaj3",
            "name": "RandomState.multinomial",
            "description": "multinomial(n, pvals, size=None)\n    \n    Draw samples from a multinomial distribution.\n    \n    The multinomial distribution is a multivariate generalization of the\n    binomial distribution.  Take an experiment with one of ``p``\n    possible outcomes.  An example of such an experiment is throwing a dice,\n    where the outcome can be 1 through 6.  Each sample drawn from the\n    distribution represents `n` such experiments.  Its values,\n    ``X_i = [X_0, X_1, ..., X_p]``, represent the number of times the\n    outcome was ``i``.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.multinomial`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    .. warning::\n      This function defaults to the C-long dtype, which is 32bit on windows\n      and otherwise 64bit on 64bit platforms (and 32bit on 32bit ones).\n      Since NumPy 2.0, NumPy's default integer is 32bit on 32bit platforms\n      and 64bit on 64bit platforms.\n    \n    \n    Parameters\n    ----------\n    n : int\n        Number of experiments.\n    pvals : sequence of floats, length p\n        Probabilities of each of the ``p`` different outcomes.  These\n        must sum to 1 (however, the last element is always assumed to\n        account for the remaining probability, as long as\n        ``sum(pvals[:-1]) <= 1)``.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    \n    Returns\n    -------\n    out : ndarray\n        The drawn samples, of shape *size*, if that was provided.  If not,\n        the shape is ``(N,)``.\n    \n        In other words, each entry ``out[i,j,...,:]`` is an N-dimensional\n        value drawn from the distribution.\n    \n    See Also\n    --------\n    random.Generator.multinomial: which should be used for new code.\n    \n    Examples\n    --------\n    Throw a dice 20 times:\n    \n    >>> np.random.multinomial(20, [1/6.]*6, size=1)\n    array([[4, 1, 7, 5, 2, 1]]) # random\n    \n    It landed 4 times on 1, once on 2, etc.\n    \n    Now, throw the dice 20 times, and 20 times again:\n    \n    >>> np.random.multinomial(20, [1/6.]*6, size=2)\n    array([[3, 4, 3, 3, 4, 3], # random\n           [2, 4, 3, 4, 0, 7]])\n    \n    For the first run, we threw 3 times 1, 4 times 2, etc.  For the second,\n    we threw 2 times 1, 4 times 2, etc.\n    \n    A loaded die is more likely to land on number 6:\n    \n    >>> np.random.multinomial(100, [1/7.]*5 + [2/7.])\n    array([11, 16, 14, 17, 16, 26]) # random\n    \n    The probability inputs should be normalized. As an implementation\n    detail, the value of the last entry is ignored and assumed to take\n    up any leftover probability mass, but this should not be relied on.\n    A biased coin which has twice as much weight on one side as on the\n    other should be sampled like so:\n    \n    >>> np.random.multinomial(100, [1.0 / 3, 2.0 / 3])  # RIGHT\n    array([38, 62]) # random\n    \n    not like:\n    \n    >>> np.random.multinomial(100, [1.0, 2.0])  # WRONG\n    Traceback (most recent call last):\n    ValueError: pvals < 0, pvals > 1 or pvals contains NaNs",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "633ae9526a53699b58dcf96553040d3e6981102428b3bf056598fa1a36228f7a",
            "fields": [
                {
                    "id": "jkqzdyf3",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.multinomial object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3new42ph",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of experiments.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mcs4e7ur",
                    "encoding": "",
                    "name": "pvals",
                    "value": "",
                    "defaultValue": "",
                    "description": "Probabilities of each of the ``p`` different outcomes.  These\nmust sum to 1 (however, the last element is always assumed to\naccount for the remaining probability, as long as\n``sum(pvals[:-1]) <= 1)``.",
                    "type": "sequence of floats, length p",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p98p62jm",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xbdtvhzf",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.multinomial",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.multinomial",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e79koecm",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ozu4srm8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "xny53m7e",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "73dknbzm",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_2ca59hg",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qwlwpmkv",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "g0dt4c_u",
            "name": "RandomState.multivariate_normal",
            "description": "multivariate_normal(mean, cov, size=None, check_valid='warn', tol=1e-8)\n    \n    Draw random samples from a multivariate normal distribution.\n    \n    The multivariate normal, multinormal or Gaussian distribution is a\n    generalization of the one-dimensional normal distribution to higher\n    dimensions.  Such a distribution is specified by its mean and\n    covariance matrix.  These parameters are analogous to the mean\n    (average or \"center\") and variance (standard deviation, or \"width,\"\n    squared) of the one-dimensional normal distribution.\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.multivariate_normal`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    mean : 1-D array_like, of length N\n        Mean of the N-dimensional distribution.\n    cov : 2-D array_like, of shape (N, N)\n        Covariance matrix of the distribution. It must be symmetric and\n        positive-semidefinite for proper sampling.\n    size : int or tuple of ints, optional\n        Given a shape of, for example, ``(m,n,k)``, ``m*n*k`` samples are\n        generated, and packed in an `m`-by-`n`-by-`k` arrangement.  Because\n        each sample is `N`-dimensional, the output shape is ``(m,n,k,N)``.\n        If no shape is specified, a single (`N`-D) sample is returned.\n    check_valid : { 'warn', 'raise', 'ignore' }, optional\n        Behavior when the covariance matrix is not positive semidefinite.\n    tol : float, optional\n        Tolerance when checking the singular values in covariance matrix.\n        cov is cast to double before the check.\n    \n    Returns\n    -------\n    out : ndarray\n        The drawn samples, of shape *size*, if that was provided.  If not,\n        the shape is ``(N,)``.\n    \n        In other words, each entry ``out[i,j,...,:]`` is an N-dimensional\n        value drawn from the distribution.\n    \n    See Also\n    --------\n    random.Generator.multivariate_normal: which should be used for new code.\n    \n    Notes\n    -----\n    The mean is a coordinate in N-dimensional space, which represents the\n    location where samples are most likely to be generated.  This is\n    analogous to the peak of the bell curve for the one-dimensional or\n    univariate normal distribution.\n    \n    Covariance indicates the level to which two variables vary together.\n    From the multivariate normal distribution, we draw N-dimensional\n    samples, :math:`X = [x_1, x_2, ... x_N]`.  The covariance matrix\n    element :math:`C_{ij}` is the covariance of :math:`x_i` and :math:`x_j`.\n    The element :math:`C_{ii}` is the variance of :math:`x_i` (i.e. its\n    \"spread\").\n    \n    Instead of specifying the full covariance matrix, popular\n    approximations include:\n    \n    - Spherical covariance (`cov` is a multiple of the identity matrix)\n    - Diagonal covariance (`cov` has non-negative elements, and only on\n      the diagonal)\n    \n    This geometrical property can be seen in two dimensions by plotting\n    generated data-points:\n    \n    >>> mean = [0, 0]\n    >>> cov = [[1, 0], [0, 100]]  # diagonal covariance\n    \n    Diagonal covariance means that points are oriented along x or y-axis:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> x, y = np.random.multivariate_normal(mean, cov, 5000).T\n    >>> plt.plot(x, y, 'x')\n    >>> plt.axis('equal')\n    >>> plt.show()\n    \n    Note that the covariance matrix must be positive semidefinite (a.k.a.\n    nonnegative-definite). Otherwise, the behavior of this method is\n    undefined and backwards compatibility is not guaranteed.\n    \n    References\n    ----------\n    .. [1] Papoulis, A., \"Probability, Random Variables, and Stochastic\n           Processes,\" 3rd ed., New York: McGraw-Hill, 1991.\n    .. [2] Duda, R. O., Hart, P. E., and Stork, D. G., \"Pattern\n           Classification,\" 2nd ed., New York: Wiley, 2001.\n    \n    Examples\n    --------\n    >>> mean = (1, 2)\n    >>> cov = [[1, 0], [0, 1]]\n    >>> x = np.random.multivariate_normal(mean, cov, (3, 3))\n    >>> x.shape\n    (3, 3, 2)\n    \n    Here we generate 800 samples from the bivariate normal distribution\n    with mean [0, 0] and covariance matrix [[6, -3], [-3, 3.5]].  The\n    expected variances of the first and second components of the sample\n    are 6 and 3.5, respectively, and the expected correlation\n    coefficient is -3/sqrt(6*3.5) \u2248 -0.65465.\n    \n    >>> cov = np.array([[6, -3], [-3, 3.5]])\n    >>> pts = np.random.multivariate_normal([0, 0], cov, size=800)\n    \n    Check that the mean, covariance, and correlation coefficient of the\n    sample are close to the expected values:\n    \n    >>> pts.mean(axis=0)\n    array([ 0.0326911 , -0.01280782])  # may vary\n    >>> np.cov(pts.T)\n    array([[ 5.96202397, -2.85602287],\n           [-2.85602287,  3.47613949]])  # may vary\n    >>> np.corrcoef(pts.T)[0, 1]\n    -0.6273591314603949  # may vary\n    \n    We can visualize this data with a scatter plot.  The orientation\n    of the point cloud illustrates the negative correlation of the\n    components of this sample.\n    \n    >>> import matplotlib.pyplot as plt\n    >>> plt.plot(pts[:, 0], pts[:, 1], '.', alpha=0.5)\n    >>> plt.axis('equal')\n    >>> plt.grid()\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3a55a69e3cffe5fb9722a84d02eb5d8cddd7d6fa715f6acc1c56a95420c4481e",
            "fields": [
                {
                    "id": "9511qmlq",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.multivariate_normal object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fm8t7fr3",
                    "encoding": "",
                    "name": "mean",
                    "value": "",
                    "defaultValue": "",
                    "description": "Mean of the N-dimensional distribution.",
                    "type": "1-D arraylike, of length N",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1gwc286y",
                    "encoding": "",
                    "name": "cov",
                    "value": "",
                    "defaultValue": "",
                    "description": "Covariance matrix of the distribution. It must be symmetric and\npositive-semidefinite for proper sampling.",
                    "type": "2-D arraylike, of shape (N, N)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "alup02hj",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Given a shape of, for example, ``(m,n,k)``, ``m*n*k`` samples are\ngenerated, and packed in an `m`-by-`n`-by-`k` arrangement.  Because\neach sample is `N`-dimensional, the output shape is ``(m,n,k,N)``.\nIf no shape is specified, a single (`N`-D) sample is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qip_7gh0",
                    "encoding": "",
                    "name": "check_valid",
                    "value": "warn",
                    "defaultValue": "warn",
                    "description": "Behavior when the covariance matrix is not positive semidefinite.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gw3t_mzt",
                    "encoding": "",
                    "name": "tol",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "Tolerance when checking the singular values in covariance matrix.\ncov is cast to double before the check.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "alohjs6d",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.multivariate_normal",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.multivariate_normal",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "569rsn4n",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mrn3ao0m",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ffzphcuz",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ojxjibyl",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "08jeme4d",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s8pw4c8o",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "0tbua5ei",
            "name": "RandomState.negative_binomial",
            "description": "negative_binomial(n, p, size=None)\n    \n    Draw samples from a negative binomial distribution.\n    \n    Samples are drawn from a negative binomial distribution with specified\n    parameters, `n` successes and `p` probability of success where `n`\n    is > 0 and `p` is in the interval [0, 1].\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.negative_binomial`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    n : float or array_like of floats\n        Parameter of the distribution, > 0.\n    p : float or array_like of floats\n        Parameter of the distribution, >= 0 and <=1.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``n`` and ``p`` are both scalars.\n        Otherwise, ``np.broadcast(n, p).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized negative binomial distribution,\n        where each sample is equal to N, the number of failures that\n        occurred before a total of n successes was reached.\n    \n    .. warning::\n       This function returns the C-long dtype, which is 32bit on windows\n       and otherwise 64bit on 64bit platforms (and 32bit on 32bit ones).\n       Since NumPy 2.0, NumPy's default integer is 32bit on 32bit platforms\n       and 64bit on 64bit platforms.\n    \n    See Also\n    --------\n    random.Generator.negative_binomial: which should be used for new code.\n    \n    Notes\n    -----\n    The probability mass function of the negative binomial distribution is\n    \n    .. math:: P(N;n,p) = \\frac{\\Gamma(N+n)}{N!\\Gamma(n)}p^{n}(1-p)^{N},\n    \n    where :math:`n` is the number of successes, :math:`p` is the\n    probability of success, :math:`N+n` is the number of trials, and\n    :math:`\\Gamma` is the gamma function. When :math:`n` is an integer,\n    :math:`\\frac{\\Gamma(N+n)}{N!\\Gamma(n)} = \\binom{N+n-1}{N}`, which is\n    the more common form of this term in the pmf. The negative\n    binomial distribution gives the probability of N failures given n\n    successes, with a success on the last trial.\n    \n    If one throws a die repeatedly until the third time a \"1\" appears,\n    then the probability distribution of the number of non-\"1\"s that\n    appear before the third \"1\" is a negative binomial distribution.\n    \n    References\n    ----------\n    .. [1] Weisstein, Eric W. \"Negative Binomial Distribution.\" From\n           MathWorld--A Wolfram Web Resource.\n           https://mathworld.wolfram.com/NegativeBinomialDistribution.html\n    .. [2] Wikipedia, \"Negative binomial distribution\",\n           https://en.wikipedia.org/wiki/Negative_binomial_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    A real world example. A company drills wild-cat oil\n    exploration wells, each with an estimated probability of\n    success of 0.1.  What is the probability of having one success\n    for each successive well, that is what is the probability of a\n    single success after drilling 5 wells, after 6 wells, etc.?\n    \n    >>> s = np.random.negative_binomial(1, 0.1, 100000)\n    >>> for i in range(1, 11): # doctest: +SKIP\n    ...    probability = sum(s<i) / 100000.\n    ...    print(i, \"wells drilled, probability of one success =\", probability)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a4cd8ec6bf2d010429955ba6f60daaca461baef7476ad4414c858dad9ba3b60d",
            "fields": [
                {
                    "id": "iju7xpkb",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.negative_binomial object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "__a9lwov",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "Parameter of the distribution, > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ct8bfbtd",
                    "encoding": "",
                    "name": "p",
                    "value": "",
                    "defaultValue": "",
                    "description": "Parameter of the distribution, >= 0 and <=1.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gt4xisfh",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``n`` and ``p`` are both scalars.\nOtherwise, ``np.broadcast(n, p).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7zg51fj_",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.negative_binomial",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.negative_binomial",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "plxjej32",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8jx3wuwy",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "xj5qnbq4",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x3stu10r",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uf9yy91g",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7mevbl0b",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "01jm73xt",
            "name": "RandomState.noncentral_chisquare",
            "description": "noncentral_chisquare(df, nonc, size=None)\n    \n    Draw samples from a noncentral chi-square distribution.\n    \n    The noncentral :math:`\\chi^2` distribution is a generalization of\n    the :math:`\\chi^2` distribution.\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.noncentral_chisquare`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    df : float or array_like of floats\n        Degrees of freedom, must be > 0.\n    nonc : float or array_like of floats\n        Non-centrality, must be non-negative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``df`` and ``nonc`` are both scalars.\n        Otherwise, ``np.broadcast(df, nonc).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized noncentral chi-square distribution.\n    \n    See Also\n    --------\n    random.Generator.noncentral_chisquare: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density function for the noncentral Chi-square\n    distribution is\n    \n    .. math:: P(x;df,nonc) = \\sum^{\\infty}_{i=0}\n                           \\frac{e^{-nonc/2}(nonc/2)^{i}}{i!}\n                           P_{Y_{df+2i}}(x),\n    \n    where :math:`Y_{q}` is the Chi-square with q degrees of freedom.\n    \n    References\n    ----------\n    .. [1] Wikipedia, \"Noncentral chi-squared distribution\"\n           https://en.wikipedia.org/wiki/Noncentral_chi-squared_distribution\n    \n    Examples\n    --------\n    Draw values from the distribution and plot the histogram\n    \n    >>> import matplotlib.pyplot as plt\n    >>> values = plt.hist(np.random.noncentral_chisquare(3, 20, 100000),\n    ...                   bins=200, density=True)\n    >>> plt.show()\n    \n    Draw values from a noncentral chisquare with very small noncentrality,\n    and compare to a chisquare.\n    \n    >>> plt.figure()\n    >>> values = plt.hist(np.random.noncentral_chisquare(3, .0000001, 100000),\n    ...                   bins=np.arange(0., 25, .1), density=True)\n    >>> values2 = plt.hist(np.random.chisquare(3, 100000),\n    ...                    bins=np.arange(0., 25, .1), density=True)\n    >>> plt.plot(values[1][0:-1], values[0]-values2[0], 'ob')\n    >>> plt.show()\n    \n    Demonstrate how large values of non-centrality lead to a more symmetric\n    distribution.\n    \n    >>> plt.figure()\n    >>> values = plt.hist(np.random.noncentral_chisquare(3, 20, 100000),\n    ...                   bins=200, density=True)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6a9b6e78dc36498ece2604db2016083daa9238271da968cea6d2a6ad5cea1ad5",
            "fields": [
                {
                    "id": "7arepiuo",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.noncentral_chisquare object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ngaju9uj",
                    "encoding": "",
                    "name": "df",
                    "value": "",
                    "defaultValue": "",
                    "description": "Degrees of freedom, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "axve3zit",
                    "encoding": "",
                    "name": "nonc",
                    "value": "",
                    "defaultValue": "",
                    "description": "Non-centrality, must be non-negative.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dohmssdw",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``df`` and ``nonc`` are both scalars.\nOtherwise, ``np.broadcast(df, nonc).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m2tmj49z",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.noncentral_chisquare",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.noncentral_chisquare",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z2lg3_co",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nhedandn",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9kfu5hwk",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9_pw65wn",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y3xbkxbx",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oyf8n3xs",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "g3o_7mgr",
            "name": "RandomState.noncentral_f",
            "description": "noncentral_f(dfnum, dfden, nonc, size=None)\n    \n    Draw samples from the noncentral F distribution.\n    \n    Samples are drawn from an F distribution with specified parameters,\n    `dfnum` (degrees of freedom in numerator) and `dfden` (degrees of\n    freedom in denominator), where both parameters > 1.\n    `nonc` is the non-centrality parameter.\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.noncentral_f`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    dfnum : float or array_like of floats\n        Numerator degrees of freedom, must be > 0.\n    dfden : float or array_like of floats\n        Denominator degrees of freedom, must be > 0.\n    nonc : float or array_like of floats\n        Non-centrality parameter, the sum of the squares of the numerator\n        means, must be >= 0.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``dfnum``, ``dfden``, and ``nonc``\n        are all scalars.  Otherwise, ``np.broadcast(dfnum, dfden, nonc).size``\n        samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized noncentral Fisher distribution.\n    \n    See Also\n    --------\n    random.Generator.noncentral_f: which should be used for new code.\n    \n    Notes\n    -----\n    When calculating the power of an experiment (power = probability of\n    rejecting the null hypothesis when a specific alternative is true) the\n    non-central F statistic becomes important.  When the null hypothesis is\n    true, the F statistic follows a central F distribution. When the null\n    hypothesis is not true, then it follows a non-central F statistic.\n    \n    References\n    ----------\n    .. [1] Weisstein, Eric W. \"Noncentral F-Distribution.\"\n           From MathWorld--A Wolfram Web Resource.\n           https://mathworld.wolfram.com/NoncentralF-Distribution.html\n    .. [2] Wikipedia, \"Noncentral F-distribution\",\n           https://en.wikipedia.org/wiki/Noncentral_F-distribution\n    \n    Examples\n    --------\n    In a study, testing for a specific alternative to the null hypothesis\n    requires use of the Noncentral F distribution. We need to calculate the\n    area in the tail of the distribution that exceeds the value of the F\n    distribution for the null hypothesis.  We'll plot the two probability\n    distributions for comparison.\n    \n    >>> dfnum = 3 # between group deg of freedom\n    >>> dfden = 20 # within groups degrees of freedom\n    >>> nonc = 3.0\n    >>> nc_vals = np.random.noncentral_f(dfnum, dfden, nonc, 1000000)\n    >>> NF = np.histogram(nc_vals, bins=50, density=True)\n    >>> c_vals = np.random.f(dfnum, dfden, 1000000)\n    >>> F = np.histogram(c_vals, bins=50, density=True)\n    >>> import matplotlib.pyplot as plt\n    >>> plt.plot(F[1][1:], F[0])\n    >>> plt.plot(NF[1][1:], NF[0])\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "751610f538a76f138cd6664b56580b4a37f703a65bcc64312e253cc0d54cb42a",
            "fields": [
                {
                    "id": "484mjida",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.noncentral_f object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0z0jtsn7",
                    "encoding": "",
                    "name": "dfnum",
                    "value": "",
                    "defaultValue": "",
                    "description": "Numerator degrees of freedom, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p0g9kcmx",
                    "encoding": "",
                    "name": "dfden",
                    "value": "",
                    "defaultValue": "",
                    "description": "Denominator degrees of freedom, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0k11dzdx",
                    "encoding": "",
                    "name": "nonc",
                    "value": "",
                    "defaultValue": "",
                    "description": "Non-centrality parameter, the sum of the squares of the numerator\nmeans, must be >= 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8a6k94h2",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``dfnum``, ``dfden``, and ``nonc``\nare all scalars.  Otherwise, ``np.broadcast(dfnum, dfden, nonc).size``\nsamples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9lw93n_n",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.noncentral_f",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.noncentral_f",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bs9c_ktl",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n7qegbvq",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0v4r43td",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "prerqjzb",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vs64fj96",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f2i0kxvw",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "xeo7kc3k",
            "name": "RandomState.normal",
            "description": "normal(loc=0.0, scale=1.0, size=None)\n    \n    Draw random samples from a normal (Gaussian) distribution.\n    \n    The probability density function of the normal distribution, first\n    derived by De Moivre and 200 years later by both Gauss and Laplace\n    independently [2]_, is often called the bell curve because of\n    its characteristic shape (see the example below).\n    \n    The normal distributions occurs often in nature.  For example, it\n    describes the commonly occurring distribution of samples influenced\n    by a large number of tiny, random disturbances, each with its own\n    unique distribution [2]_.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.normal`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    loc : float or array_like of floats\n        Mean (\"centre\") of the distribution.\n    scale : float or array_like of floats\n        Standard deviation (spread or \"width\") of the distribution. Must be\n        non-negative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``loc`` and ``scale`` are both scalars.\n        Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized normal distribution.\n    \n    See Also\n    --------\n    scipy.stats.norm : probability density function, distribution or\n        cumulative density function, etc.\n    random.Generator.normal: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density for the Gaussian distribution is\n    \n    .. math:: p(x) = \\frac{1}{\\sqrt{ 2 \\pi \\sigma^2 }}\n                     e^{ - \\frac{ (x - \\mu)^2 } {2 \\sigma^2} },\n    \n    where :math:`\\mu` is the mean and :math:`\\sigma` the standard\n    deviation. The square of the standard deviation, :math:`\\sigma^2`,\n    is called the variance.\n    \n    The function has its peak at the mean, and its \"spread\" increases with\n    the standard deviation (the function reaches 0.607 times its maximum at\n    :math:`x + \\sigma` and :math:`x - \\sigma` [2]_).  This implies that\n    normal is more likely to return samples lying close to the mean, rather\n    than those far away.\n    \n    References\n    ----------\n    .. [1] Wikipedia, \"Normal distribution\",\n           https://en.wikipedia.org/wiki/Normal_distribution\n    .. [2] P. R. Peebles Jr., \"Central Limit Theorem\" in \"Probability,\n           Random Variables and Random Signal Principles\", 4th ed., 2001,\n           pp. 51, 51, 125.\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> mu, sigma = 0, 0.1 # mean and standard deviation\n    >>> s = np.random.normal(mu, sigma, 1000)\n    \n    Verify the mean and the standard deviation:\n    \n    >>> abs(mu - np.mean(s))\n    0.0  # may vary\n    \n    >>> abs(sigma - np.std(s, ddof=1))\n    0.0  # may vary\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, ignored = plt.hist(s, 30, density=True)\n    >>> plt.plot(bins, 1/(sigma * np.sqrt(2 * np.pi)) *\n    ...                np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    ...          linewidth=2, color='r')\n    >>> plt.show()\n    \n    Two-by-four array of samples from the normal distribution with\n    mean 3 and standard deviation 2.5:\n    \n    >>> np.random.normal(3, 2.5, size=(2, 4))\n    array([[-4.49401501,  4.00950034, -1.81814867,  7.29718677],   # random\n           [ 0.39924804,  4.68456316,  4.99394529,  4.84057254]])  # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "651c1989aeb780b1255a33283e5cf28248b342a910e21718fd789abda9b1c9fa",
            "fields": [
                {
                    "id": "b1bbqfi6",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.normal object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yehn2yk9",
                    "encoding": "",
                    "name": "loc",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Mean (\"centre\") of the distribution.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2hnn1spz",
                    "encoding": "",
                    "name": "scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Standard deviation (spread or \"width\") of the distribution. Must be\nnon-negative.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xnvl91co",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``loc`` and ``scale`` are both scalars.\nOtherwise, ``np.broadcast(loc, scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3jqbgyyc",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.normal",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.normal",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "18cn_xlx",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pljmb8vh",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "gxiradqj",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "67jupv0t",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9ecyuaf8",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s0r4u1mr",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "waiyqd9r",
            "name": "RandomState.pareto",
            "description": "pareto(a, size=None)\n    \n    Draw samples from a Pareto II or Lomax distribution with\n    specified shape.\n    \n    The Lomax or Pareto II distribution is a shifted Pareto\n    distribution. The classical Pareto distribution can be\n    obtained from the Lomax distribution by adding 1 and\n    multiplying by the scale parameter ``m`` (see Notes).  The\n    smallest value of the Lomax distribution is zero while for the\n    classical Pareto distribution it is ``mu``, where the standard\n    Pareto distribution has location ``mu = 1``.  Lomax can also\n    be considered as a simplified version of the Generalized\n    Pareto distribution (available in SciPy), with the scale set\n    to one and the location set to zero.\n    \n    The Pareto distribution must be greater than zero, and is\n    unbounded above.  It is also known as the \"80-20 rule\".  In\n    this distribution, 80 percent of the weights are in the lowest\n    20 percent of the range, while the other 20 percent fill the\n    remaining 80 percent of the range.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.pareto`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    a : float or array_like of floats\n        Shape of the distribution. Must be positive.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``a`` is a scalar.  Otherwise,\n        ``np.array(a).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Pareto distribution.\n    \n    See Also\n    --------\n    scipy.stats.lomax : probability density function, distribution or\n        cumulative density function, etc.\n    scipy.stats.genpareto : probability density function, distribution or\n        cumulative density function, etc.\n    random.Generator.pareto: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density for the Pareto distribution is\n    \n    .. math:: p(x) = \\frac{am^a}{x^{a+1}}\n    \n    where :math:`a` is the shape and :math:`m` the scale.\n    \n    The Pareto distribution, named after the Italian economist\n    Vilfredo Pareto, is a power law probability distribution\n    useful in many real world problems.  Outside the field of\n    economics it is generally referred to as the Bradford\n    distribution. Pareto developed the distribution to describe\n    the distribution of wealth in an economy.  It has also found\n    use in insurance, web page access statistics, oil field sizes,\n    and many other problems, including the download frequency for\n    projects in Sourceforge [1]_.  It is one of the so-called\n    \"fat-tailed\" distributions.\n    \n    References\n    ----------\n    .. [1] Francis Hunt and Paul Johnson, On the Pareto Distribution of\n           Sourceforge projects.\n    .. [2] Pareto, V. (1896). Course of Political Economy. Lausanne.\n    .. [3] Reiss, R.D., Thomas, M.(2001), Statistical Analysis of Extreme\n           Values, Birkhauser Verlag, Basel, pp 23-30.\n    .. [4] Wikipedia, \"Pareto distribution\",\n           https://en.wikipedia.org/wiki/Pareto_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> a, m = 3., 2.  # shape and mode\n    >>> s = (np.random.pareto(a, 1000) + 1) * m\n    \n    Display the histogram of the samples, along with the probability\n    density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, _ = plt.hist(s, 100, density=True)\n    >>> fit = a*m**a / bins**(a+1)\n    >>> plt.plot(bins, max(count)*fit/max(fit), linewidth=2, color='r')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f4d1def2b5dd2e8a1ca3ba3ecfa4c53a256e863e798bfa535c0686293dd90374",
            "fields": [
                {
                    "id": "60oieq6v",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.pareto object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v9w7yuew",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape of the distribution. Must be positive.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c6gpw0mb",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``a`` is a scalar.  Otherwise,\n``np.array(a).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3hinpfkr",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.pareto",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.pareto",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6vny_3d3",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0o1ices5",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "j5o3_zw9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "elyaxmpe",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r96pg6fq",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mz3avw92",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "3z8wnmp4",
            "name": "RandomState.permutation",
            "description": "permutation(x)\n    \n    Randomly permute a sequence, or return a permuted range.\n    \n    If `x` is a multi-dimensional array, it is only shuffled along its\n    first index.\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.permutation`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    x : int or array_like\n        If `x` is an integer, randomly permute ``np.arange(x)``.\n        If `x` is an array, make a copy and shuffle the elements\n        randomly.\n    \n    Returns\n    -------\n    out : ndarray\n        Permuted sequence or array range.\n    \n    See Also\n    --------\n    random.Generator.permutation: which should be used for new code.\n    \n    Examples\n    --------\n    >>> np.random.permutation(10)\n    array([1, 7, 4, 3, 0, 9, 2, 5, 8, 6]) # random\n    \n    >>> np.random.permutation([1, 4, 9, 12, 15])\n    array([15,  1,  9,  4, 12]) # random\n    \n    >>> arr = np.arange(9).reshape((3, 3))\n    >>> np.random.permutation(arr)\n    array([[6, 7, 8], # random\n           [0, 1, 2],\n           [3, 4, 5]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a7995abbecddac90a7e23f7204e90c2c56fd20d5f9f284f4b04dd9c51cafc44b",
            "fields": [
                {
                    "id": "9uqljoog",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.permutation object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "csr2lvdp",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "If `x` is an integer, randomly permute ``np.arange(x)``.\nIf `x` is an array, make a copy and shuffle the elements\nrandomly.",
                    "type": "int or arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r9zmbz1p",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.permutation",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.permutation",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u_s025ps",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y5a5ope0",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "5zp5iyhw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0eik8uac",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ruhq0zyc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1srk4hak",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "jyg09fpi",
            "name": "RandomState.poisson",
            "description": "poisson(lam=1.0, size=None)\n    \n    Draw samples from a Poisson distribution.\n    \n    The Poisson distribution is the limit of the binomial distribution\n    for large N.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.poisson`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    lam : float or array_like of floats\n        Expected number of events occurring in a fixed-time interval,\n        must be >= 0. A sequence must be broadcastable over the requested\n        size.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``lam`` is a scalar. Otherwise,\n        ``np.array(lam).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Poisson distribution.\n    \n    See Also\n    --------\n    random.Generator.poisson: which should be used for new code.\n    \n    Notes\n    -----\n    The probability mass function (PMF) of Poisson distribution is\n    \n    .. math:: f(k; \\lambda)=\\frac{\\lambda^k e^{-\\lambda}}{k!}\n    \n    For events with an expected separation :math:`\\lambda` the Poisson\n    distribution :math:`f(k; \\lambda)` describes the probability of\n    :math:`k` events occurring within the observed\n    interval :math:`\\lambda`.\n    \n    Because the output is limited to the range of the C int64 type, a\n    ValueError is raised when `lam` is within 10 sigma of the maximum\n    representable value.\n    \n    References\n    ----------\n    .. [1] Weisstein, Eric W. \"Poisson Distribution.\"\n           From MathWorld--A Wolfram Web Resource.\n           https://mathworld.wolfram.com/PoissonDistribution.html\n    .. [2] Wikipedia, \"Poisson distribution\",\n           https://en.wikipedia.org/wiki/Poisson_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> import numpy as np\n    >>> s = np.random.poisson(5, 10000)\n    \n    Display histogram of the sample:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, ignored = plt.hist(s, 14, density=True)\n    >>> plt.show()\n    \n    Draw each 100 values for lambda 100 and 500:\n    \n    >>> s = np.random.poisson(lam=(100., 500.), size=(100, 2))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1e8d56b07997c6405c62224afc15041d8ca6b04964a669e6ee4a3746569160c9",
            "fields": [
                {
                    "id": "v5bu037g",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.poisson object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mkw_tmh5",
                    "encoding": "",
                    "name": "lam",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Expected number of events occurring in a fixed-time interval,\nmust be >= 0. A sequence must be broadcastable over the requested\nsize.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t6ku48h9",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``lam`` is a scalar. Otherwise,\n``np.array(lam).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8m75blj_",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.poisson",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.poisson",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o4p66c7j",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kuhjnrvz",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "rqgvammv",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tl6c18hp",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ef8ixauc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fjqtlvic",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "gazt42c5",
            "name": "RandomState.power",
            "description": "power(a, size=None)\n    \n    Draws samples in [0, 1] from a power distribution with positive\n    exponent a - 1.\n    \n    Also known as the power function distribution.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.power`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    a : float or array_like of floats\n        Parameter of the distribution. Must be non-negative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``a`` is a scalar.  Otherwise,\n        ``np.array(a).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized power distribution.\n    \n    Raises\n    ------\n    ValueError\n        If a <= 0.\n    \n    See Also\n    --------\n    random.Generator.power: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density function is\n    \n    .. math:: P(x; a) = ax^{a-1}, 0 \\le x \\le 1, a>0.\n    \n    The power function distribution is just the inverse of the Pareto\n    distribution. It may also be seen as a special case of the Beta\n    distribution.\n    \n    It is used, for example, in modeling the over-reporting of insurance\n    claims.\n    \n    References\n    ----------\n    .. [1] Christian Kleiber, Samuel Kotz, \"Statistical size distributions\n           in economics and actuarial sciences\", Wiley, 2003.\n    .. [2] Heckert, N. A. and Filliben, James J. \"NIST Handbook 148:\n           Dataplot Reference Manual, Volume 2: Let Subcommands and Library\n           Functions\", National Institute of Standards and Technology\n           Handbook Series, June 2003.\n           https://www.itl.nist.gov/div898/software/dataplot/refman2/auxillar/powpdf.pdf\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> a = 5. # shape\n    >>> samples = 1000\n    >>> s = np.random.power(a, samples)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, ignored = plt.hist(s, bins=30)\n    >>> x = np.linspace(0, 1, 100)\n    >>> y = a*x**(a-1.)\n    >>> normed_y = samples*np.diff(bins)[0]*y\n    >>> plt.plot(x, normed_y)\n    >>> plt.show()\n    \n    Compare the power function distribution to the inverse of the Pareto.\n    \n    >>> from scipy import stats # doctest: +SKIP\n    >>> rvs = np.random.power(5, 1000000)\n    >>> rvsp = np.random.pareto(5, 1000000)\n    >>> xx = np.linspace(0,1,100)\n    >>> powpdf = stats.powerlaw.pdf(xx,5)  # doctest: +SKIP\n    \n    >>> plt.figure()\n    >>> plt.hist(rvs, bins=50, density=True)\n    >>> plt.plot(xx,powpdf,'r-')  # doctest: +SKIP\n    >>> plt.title('np.random.power(5)')\n    \n    >>> plt.figure()\n    >>> plt.hist(1./(1.+rvsp), bins=50, density=True)\n    >>> plt.plot(xx,powpdf,'r-')  # doctest: +SKIP\n    >>> plt.title('inverse of 1 + np.random.pareto(5)')\n    \n    >>> plt.figure()\n    >>> plt.hist(1./(1.+rvsp), bins=50, density=True)\n    >>> plt.plot(xx,powpdf,'r-')  # doctest: +SKIP\n    >>> plt.title('inverse of stats.pareto(5)')",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "41c7ff4024180f84f17af6c3bfe552a706b7de9ccf15dc12eb45a7166f6de7f1",
            "fields": [
                {
                    "id": "eh5bcos9",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.power object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xwdot_cc",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Parameter of the distribution. Must be non-negative.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5_4fpy2q",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``a`` is a scalar.  Otherwise,\n``np.array(a).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3ty00ii8",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.power",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.power",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dttw2qpr",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i4qemy72",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "lkmwpefv",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zme4m3r3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z_94q7j_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aqu9ektj",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "2rmhom_f",
            "name": "RandomState.rand",
            "description": "rand(d0, d1, ..., dn)\n    \n    Random values in a given shape.\n    \n    .. note::\n        This is a convenience function for users porting code from Matlab,\n        and wraps `random_sample`. That function takes a\n        tuple to specify the size of the output, which is consistent with\n        other NumPy functions like `numpy.zeros` and `numpy.ones`.\n    \n    Create an array of the given shape and populate it with\n    random samples from a uniform distribution\n    over ``[0, 1)``.\n    \n    Parameters\n    ----------\n    d0, d1, ..., dn : int, optional\n        The dimensions of the returned array, must be non-negative.\n        If no argument is given a single Python float is returned.\n    \n    Returns\n    -------\n    out : ndarray, shape ``(d0, d1, ..., dn)``\n        Random values.\n    \n    See Also\n    --------\n    random\n    \n    Examples\n    --------\n    >>> np.random.rand(3,2)\n    array([[ 0.14022471,  0.96360618],  #random\n           [ 0.37601032,  0.25528411],  #random\n           [ 0.49313049,  0.94909878]]) #random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ad819c231b03c0e4b2d6432908e06dfc370aab086c3a25dfd07c995c2a9f5111",
            "fields": [
                {
                    "id": "fg2z8mqj",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.rand object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ljw6w_sb",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "198dqq5j",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.rand",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.rand",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "932wf29p",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a6sfmtom",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "nd01mdbx",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ye8yp_nk",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8he2qcfe",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h6ajxi6r",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "rbt60y4e",
            "name": "RandomState.randint",
            "description": "randint(low, high=None, size=None, dtype=int)\n    \n    Return random integers from `low` (inclusive) to `high` (exclusive).\n    \n    Return random integers from the \"discrete uniform\" distribution of\n    the specified dtype in the \"half-open\" interval [`low`, `high`). If\n    `high` is None (the default), then results are from [0, `low`).\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.integers`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    low : int or array-like of ints\n        Lowest (signed) integers to be drawn from the distribution (unless\n        ``high=None``, in which case this parameter is one above the\n        *highest* such integer).\n    high : int or array-like of ints, optional\n        If provided, one above the largest (signed) integer to be drawn\n        from the distribution (see above for behavior if ``high=None``).\n        If array-like, must contain integer values\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    dtype : dtype, optional\n        Desired dtype of the result. Byteorder must be native.\n        The default value is long.\n    \n        .. warning::\n          This function defaults to the C-long dtype, which is 32bit on windows\n          and otherwise 64bit on 64bit platforms (and 32bit on 32bit ones).\n          Since NumPy 2.0, NumPy's default integer is 32bit on 32bit platforms\n          and 64bit on 64bit platforms.  Which corresponds to `np.intp`.\n          (`dtype=int` is not the same as in most NumPy functions.)\n    \n    Returns\n    -------\n    out : int or ndarray of ints\n        `size`-shaped array of random integers from the appropriate\n        distribution, or a single such random int if `size` not provided.\n    \n    See Also\n    --------\n    random_integers : similar to `randint`, only for the closed\n        interval [`low`, `high`], and 1 is the lowest value if `high` is\n        omitted.\n    random.Generator.integers: which should be used for new code.\n    \n    Examples\n    --------\n    >>> np.random.randint(2, size=10)\n    array([1, 0, 0, 0, 1, 1, 0, 0, 1, 0]) # random\n    >>> np.random.randint(1, size=10)\n    array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    \n    Generate a 2 x 4 array of ints between 0 and 4, inclusive:\n    \n    >>> np.random.randint(5, size=(2, 4))\n    array([[4, 0, 2, 1], # random\n           [3, 2, 2, 0]])\n    \n    Generate a 1 x 3 array with 3 different upper bounds\n    \n    >>> np.random.randint(1, [3, 5, 10])\n    array([2, 2, 9]) # random\n    \n    Generate a 1 by 3 array with 3 different lower bounds\n    \n    >>> np.random.randint([1, 5, 7], 10)\n    array([9, 8, 7]) # random\n    \n    Generate a 2 by 4 array using broadcasting with dtype of uint8\n    \n    >>> np.random.randint([1, 3, 5, 7], [[10], [20]], dtype=np.uint8)\n    array([[ 8,  6,  9,  7], # random\n           [ 1, 16,  9, 12]], dtype=uint8)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "00cd86842873a25e2184cbf5d32664eb8e537933b921fdd6e47e26d142ad9435",
            "fields": [
                {
                    "id": "bjo7zbp2",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.randint object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pxg0zq5i",
                    "encoding": "",
                    "name": "low",
                    "value": "",
                    "defaultValue": "",
                    "description": "Lowest (signed) integers to be drawn from the distribution (unless\n``high=None``, in which case this parameter is one above the\n*highest* such integer).",
                    "type": "int or array-like of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v5mmi9zk",
                    "encoding": "",
                    "name": "high",
                    "value": "",
                    "defaultValue": "",
                    "description": "If provided, one above the largest (signed) integer to be drawn\nfrom the distribution (see above for behavior if ``high=None``).\nIf array-like, must contain integer values",
                    "type": "int or array-like of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f2vb8pai",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0ymvp8mm",
                    "encoding": "",
                    "name": "dtype",
                    "value": "builtins.type",
                    "defaultValue": "builtins.type",
                    "description": "Desired dtype of the result. Byteorder must be native.\nThe default value is long.\n\n.. warning::\n  This function defaults to the C-long dtype, which is 32bit on windows\n  and otherwise 64bit on 64bit platforms (and 32bit on 32bit ones).\n  Since NumPy 2.0, NumPy's default integer is 32bit on 32bit platforms\n  and 64bit on 64bit platforms.  Which corresponds to `np.intp`.\n  (`dtype=int` is not the same as in most NumPy functions.)",
                    "type": "builtins.type",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y0f0bevg",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.randint",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.randint",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7_j0iwsk",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0zul2i6u",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "_qu79p10",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9bkepwcb",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gownmkxj",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v1nu718h",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "g0q37pb1",
            "name": "RandomState.randn",
            "description": "randn(d0, d1, ..., dn)\n    \n    Return a sample (or samples) from the \"standard normal\" distribution.\n    \n    .. note::\n        This is a convenience function for users porting code from Matlab,\n        and wraps `standard_normal`. That function takes a\n        tuple to specify the size of the output, which is consistent with\n        other NumPy functions like `numpy.zeros` and `numpy.ones`.\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.standard_normal`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    If positive int_like arguments are provided, `randn` generates an array\n    of shape ``(d0, d1, ..., dn)``, filled\n    with random floats sampled from a univariate \"normal\" (Gaussian)\n    distribution of mean 0 and variance 1. A single float randomly sampled\n    from the distribution is returned if no argument is provided.\n    \n    Parameters\n    ----------\n    d0, d1, ..., dn : int, optional\n        The dimensions of the returned array, must be non-negative.\n        If no argument is given a single Python float is returned.\n    \n    Returns\n    -------\n    Z : ndarray or float\n        A ``(d0, d1, ..., dn)``-shaped array of floating-point samples from\n        the standard normal distribution, or a single such float if\n        no parameters were supplied.\n    \n    See Also\n    --------\n    standard_normal : Similar, but takes a tuple as its argument.\n    normal : Also accepts mu and sigma arguments.\n    random.Generator.standard_normal: which should be used for new code.\n    \n    Notes\n    -----\n    For random samples from the normal distribution with mean ``mu`` and\n    standard deviation ``sigma``, use::\n    \n        sigma * np.random.randn(...) + mu\n    \n    Examples\n    --------\n    >>> np.random.randn()\n    2.1923875335537315  # random\n    \n    Two-by-four array of samples from the normal distribution with\n    mean 3 and standard deviation 2.5:\n    \n    >>> 3 + 2.5 * np.random.randn(2, 4)\n    array([[-4.49401501,  4.00950034, -1.81814867,  7.29718677],   # random\n           [ 0.39924804,  4.68456316,  4.99394529,  4.84057254]])  # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c6fe72edcce687fe774fa1edc7ff9d046b4910f6b86fdc29856b20c0850ec45d",
            "fields": [
                {
                    "id": "3cqu5lil",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.randn object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ky7dgojw",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6jqmtxe2",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.randn",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.randn",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nysw4vi0",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "etgzaflj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "1_2k6488",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z2xjd1ij",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3obcrvvh",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "je_w8xf3",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "diqpzas7",
            "name": "RandomState.random",
            "description": "random(size=None)\n    \n    Return random floats in the half-open interval [0.0, 1.0). Alias for\n    `random_sample` to ease forward-porting to the new random API.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "46059e788cda51b478214b563a3cb28a050b8333540b23a9522f3e2637c4fad6",
            "fields": [
                {
                    "id": "t379v3hr",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.random object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ugt_4ld6",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a0ronp2t",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.random",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.random",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3plt_tg3",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v6sqrkia",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ziyw085e",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6sx1aa4y",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xqtdgp2g",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5xhf6rii",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "wwqix0os",
            "name": "RandomState.random_integers",
            "description": "random_integers(low, high=None, size=None)\n    \n    Random integers of type `numpy.int_` between `low` and `high`, inclusive.\n    \n    Return random integers of type `numpy.int_` from the \"discrete uniform\"\n    distribution in the closed interval [`low`, `high`].  If `high` is\n    None (the default), then results are from [1, `low`]. The `numpy.int_`\n    type translates to the C long integer type and its precision\n    is platform dependent.\n    \n    This function has been deprecated. Use randint instead.\n    \n    .. deprecated:: 1.11.0\n    \n    Parameters\n    ----------\n    low : int\n        Lowest (signed) integer to be drawn from the distribution (unless\n        ``high=None``, in which case this parameter is the *highest* such\n        integer).\n    high : int, optional\n        If provided, the largest (signed) integer to be drawn from the\n        distribution (see above for behavior if ``high=None``).\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    \n    Returns\n    -------\n    out : int or ndarray of ints\n        `size`-shaped array of random integers from the appropriate\n        distribution, or a single such random int if `size` not provided.\n    \n    See Also\n    --------\n    randint : Similar to `random_integers`, only for the half-open\n        interval [`low`, `high`), and 0 is the lowest value if `high` is\n        omitted.\n    \n    Notes\n    -----\n    To sample from N evenly spaced floating-point numbers between a and b,\n    use::\n    \n      a + (b - a) * (np.random.random_integers(N) - 1) / (N - 1.)\n    \n    Examples\n    --------\n    >>> np.random.random_integers(5)\n    4 # random\n    >>> type(np.random.random_integers(5))\n    <class 'numpy.int64'>\n    >>> np.random.random_integers(5, size=(3,2))\n    array([[5, 4], # random\n           [3, 3],\n           [4, 5]])\n    \n    Choose five random numbers from the set of five evenly-spaced\n    numbers between 0 and 2.5, inclusive (*i.e.*, from the set\n    :math:`{0, 5/8, 10/8, 15/8, 20/8}`):\n    \n    >>> 2.5 * (np.random.random_integers(5, size=(5,)) - 1) / 4.\n    array([ 0.625,  1.25 ,  0.625,  0.625,  2.5  ]) # random\n    \n    Roll two six sided dice 1000 times and sum the results:\n    \n    >>> d1 = np.random.random_integers(1, 6, 1000)\n    >>> d2 = np.random.random_integers(1, 6, 1000)\n    >>> dsums = d1 + d2\n    \n    Display results as a histogram:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, ignored = plt.hist(dsums, 11, density=True)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "280a3ffe775d05da7b4183d5386ffb8510ee2e919e9d636ec3f18a58dd096294",
            "fields": [
                {
                    "id": "zrb7b32h",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.random_integers object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l3d96267",
                    "encoding": "",
                    "name": "low",
                    "value": "",
                    "defaultValue": "",
                    "description": "Lowest (signed) integer to be drawn from the distribution (unless\n``high=None``, in which case this parameter is the *highest* such\ninteger).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o1itoahg",
                    "encoding": "",
                    "name": "high",
                    "value": "",
                    "defaultValue": "",
                    "description": "If provided, the largest (signed) integer to be drawn from the\ndistribution (see above for behavior if ``high=None``).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5umicps1",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7u_mrnvz",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.random_integers",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.random_integers",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dntu7qm5",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jev4mhtq",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "2g5zmlpg",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1q3xy712",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j1nq9kxg",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8ckjs8n8",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "frdel4e0",
            "name": "RandomState.random_sample",
            "description": "random_sample(size=None)\n    \n    Return random floats in the half-open interval [0.0, 1.0).\n    \n    Results are from the \"continuous uniform\" distribution over the\n    stated interval.  To sample :math:`Unif[a, b), b > a` multiply\n    the output of `random_sample` by `(b-a)` and add `a`::\n    \n      (b - a) * random_sample() + a\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.random`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    \n    Returns\n    -------\n    out : float or ndarray of floats\n        Array of random floats of shape `size` (unless ``size=None``, in which\n        case a single float is returned).\n    \n    See Also\n    --------\n    random.Generator.random: which should be used for new code.\n    \n    Examples\n    --------\n    >>> np.random.random_sample()\n    0.47108547995356098 # random\n    >>> type(np.random.random_sample())\n    <class 'float'>\n    >>> np.random.random_sample((5,))\n    array([ 0.30220482,  0.86820401,  0.1654503 ,  0.11659149,  0.54323428]) # random\n    \n    Three-by-two array of random numbers from [-5, 0):\n    \n    >>> 5 * np.random.random_sample((3, 2)) - 5\n    array([[-3.99149989, -0.52338984], # random\n           [-2.99091858, -0.79479508],\n           [-1.23204345, -1.75224494]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "dc3c8a71bf2a9d517ccfb7d3958d537363a51fca9cdf533b6c75e3bc0e65cf6d",
            "fields": [
                {
                    "id": "7zzuql06",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.random_sample object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ovf3oz5q",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "16_8e_r6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.random_sample",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.random_sample",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3j7z5s12",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "svfgderg",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "wnhkx6ie",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i8cpgbd1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v74iwp30",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t1ahvqe7",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "r4abq6cz",
            "name": "RandomState.rayleigh",
            "description": "rayleigh(scale=1.0, size=None)\n    \n    Draw samples from a Rayleigh distribution.\n    \n    The :math:`\\chi` and Weibull distributions are generalizations of the\n    Rayleigh.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.rayleigh`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    scale : float or array_like of floats, optional\n        Scale, also equals the mode. Must be non-negative. Default is 1.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``scale`` is a scalar.  Otherwise,\n        ``np.array(scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Rayleigh distribution.\n    \n    See Also\n    --------\n    random.Generator.rayleigh: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density function for the Rayleigh distribution is\n    \n    .. math:: P(x;scale) = \\frac{x}{scale^2}e^{\\frac{-x^2}{2 \\cdotp scale^2}}\n    \n    The Rayleigh distribution would arise, for example, if the East\n    and North components of the wind velocity had identical zero-mean\n    Gaussian distributions.  Then the wind speed would have a Rayleigh\n    distribution.\n    \n    References\n    ----------\n    .. [1] Brighton Webs Ltd., \"Rayleigh Distribution,\"\n           https://web.archive.org/web/20090514091424/http://brighton-webs.co.uk:80/distributions/rayleigh.asp\n    .. [2] Wikipedia, \"Rayleigh distribution\"\n           https://en.wikipedia.org/wiki/Rayleigh_distribution\n    \n    Examples\n    --------\n    Draw values from the distribution and plot the histogram\n    \n    >>> from matplotlib.pyplot import hist\n    >>> values = hist(np.random.rayleigh(3, 100000), bins=200, density=True)\n    \n    Wave heights tend to follow a Rayleigh distribution. If the mean wave\n    height is 1 meter, what fraction of waves are likely to be larger than 3\n    meters?\n    \n    >>> meanvalue = 1\n    >>> modevalue = np.sqrt(2 / np.pi) * meanvalue\n    >>> s = np.random.rayleigh(modevalue, 1000000)\n    \n    The percentage of waves larger than 3 meters is:\n    \n    >>> 100.*sum(s>3)/1000000.\n    0.087300000000000003 # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "01afbfa29066622c834dbd160038bb08d0befa4344b90d539390538df7883314",
            "fields": [
                {
                    "id": "hgop5x39",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.rayleigh object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zlv000eg",
                    "encoding": "",
                    "name": "scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Scale, also equals the mode. Must be non-negative. Default is 1.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oq5snj45",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``scale`` is a scalar.  Otherwise,\n``np.array(scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ajau_vk8",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.rayleigh",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.rayleigh",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jps2aobt",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4moxesft",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "x84c5k9y",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tqvsjl0l",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x9uvnfz7",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "og5z5skd",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "lcubsn50",
            "name": "RandomState.seed",
            "description": "seed(seed=None)\n    \n    Reseed a legacy MT19937 BitGenerator\n    \n    Notes\n    -----\n    This is a convenience, legacy function.\n    \n    The best practice is to **not** reseed a BitGenerator, rather to\n    recreate a new one. This method is here for legacy reasons.\n    This example demonstrates best practice.\n    \n    >>> from numpy.random import MT19937\n    >>> from numpy.random import RandomState, SeedSequence\n    >>> rs = RandomState(MT19937(SeedSequence(123456789)))\n    # Later, you want to restart the stream\n    >>> rs = RandomState(MT19937(SeedSequence(987654321)))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3b83262181c9f839f6438f3b10e102942889bc4e93d3879fd68e289bf682c36c",
            "fields": [
                {
                    "id": "1uog5j5v",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.seed object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hyyixup_",
                    "encoding": "",
                    "name": "seed",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wj9brtsx",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.seed",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.seed",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4a68vu9w",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9w03_xhb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "qz3p8oz5",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jlb066al",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xpi21ibk",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "daw3m0_a",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "zcslh0en",
            "name": "RandomState.set_state",
            "description": "set_state(state)\n    \n    Set the internal state of the generator from a tuple.\n    \n    For use if one has reason to manually (re-)set the internal state of\n    the bit generator used by the RandomState instance. By default,\n    RandomState uses the \"Mersenne Twister\"[1]_ pseudo-random number\n    generating algorithm.\n    \n    Parameters\n    ----------\n    state : {tuple(str, ndarray of 624 uints, int, int, float), dict}\n        The `state` tuple has the following items:\n    \n        1. the string 'MT19937', specifying the Mersenne Twister algorithm.\n        2. a 1-D array of 624 unsigned integers ``keys``.\n        3. an integer ``pos``.\n        4. an integer ``has_gauss``.\n        5. a float ``cached_gaussian``.\n    \n        If state is a dictionary, it is directly set using the BitGenerators\n        `state` property.\n    \n    Returns\n    -------\n    out : None\n        Returns 'None' on success.\n    \n    See Also\n    --------\n    get_state\n    \n    Notes\n    -----\n    `set_state` and `get_state` are not needed to work with any of the\n    random distributions in NumPy. If the internal state is manually altered,\n    the user should know exactly what he/she is doing.\n    \n    For backwards compatibility, the form (str, array of 624 uints, int) is\n    also accepted although it is missing some information about the cached\n    Gaussian value: ``state = ('MT19937', keys, pos)``.\n    \n    References\n    ----------\n    .. [1] M. Matsumoto and T. Nishimura, \"Mersenne Twister: A\n       623-dimensionally equidistributed uniform pseudorandom number\n       generator,\" *ACM Trans. on Modeling and Computer Simulation*,\n       Vol. 8, No. 1, pp. 3-30, Jan. 1998.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4193e6c91b07a426a9c11c6c567c61a40bd580a3756506af51ba4de3bfda70c5",
            "fields": [
                {
                    "id": "y6j5tn7l",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.set_state object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n8oa2u0x",
                    "encoding": "",
                    "name": "state",
                    "value": "",
                    "defaultValue": "",
                    "description": "The `state` tuple has the following items:\n\n1. the string 'MT19937', specifying the Mersenne Twister algorithm.\n2. a 1-D array of 624 unsigned integers ``keys``.\n3. an integer ``pos``.\n4. an integer ``has_gauss``.\n5. a float ``cached_gaussian``.\n\nIf state is a dictionary, it is directly set using the BitGenerators\n`state` property.",
                    "type": "{tuple(str, ndarray of 624 uints, int, int, float), dict}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vbgc_akz",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.set_state",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.set_state",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j0o0x3ul",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h8tsk9ej",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "93_suzgy",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3ufvzrsz",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jw3q3__r",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bmesozk1",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "do5cqnqf",
            "name": "RandomState.shuffle",
            "description": "shuffle(x)\n    \n    Modify a sequence in-place by shuffling its contents.\n    \n    This function only shuffles the array along the first axis of a\n    multi-dimensional array. The order of sub-arrays is changed but\n    their contents remains the same.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.shuffle`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    x : ndarray or MutableSequence\n        The array, list or mutable sequence to be shuffled.\n    \n    Returns\n    -------\n    None\n    \n    See Also\n    --------\n    random.Generator.shuffle: which should be used for new code.\n    \n    Examples\n    --------\n    >>> arr = np.arange(10)\n    >>> np.random.shuffle(arr)\n    >>> arr\n    [1 7 5 2 9 4 3 6 0 8] # random\n    \n    Multi-dimensional arrays are only shuffled along the first axis:\n    \n    >>> arr = np.arange(9).reshape((3, 3))\n    >>> np.random.shuffle(arr)\n    >>> arr\n    array([[3, 4, 5], # random\n           [6, 7, 8],\n           [0, 1, 2]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c03035709a5031a46c7555a99913c0176d978be3c9b7f03ee33eb8938da01184",
            "fields": [
                {
                    "id": "i_j3jpw0",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.shuffle object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w4w2yw8y",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array, list or mutable sequence to be shuffled.",
                    "type": "ndarray or MutableSequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hxbjtz_o",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.shuffle",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.shuffle",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s52rp254",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j9vq92ei",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9elws7zy",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aybn4ffn",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "51m4b2nl",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fg2uocfc",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "scncft1z",
            "name": "RandomState.standard_cauchy",
            "description": "standard_cauchy(size=None)\n    \n    Draw samples from a standard Cauchy distribution with mode = 0.\n    \n    Also known as the Lorentz distribution.\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.standard_cauchy`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    \n    Returns\n    -------\n    samples : ndarray or scalar\n        The drawn samples.\n    \n    See Also\n    --------\n    random.Generator.standard_cauchy: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density function for the full Cauchy distribution is\n    \n    .. math:: P(x; x_0, \\gamma) = \\frac{1}{\\pi \\gamma \\bigl[ 1+\n              (\\frac{x-x_0}{\\gamma})^2 \\bigr] }\n    \n    and the Standard Cauchy distribution just sets :math:`x_0=0` and\n    :math:`\\gamma=1`\n    \n    The Cauchy distribution arises in the solution to the driven harmonic\n    oscillator problem, and also describes spectral line broadening. It\n    also describes the distribution of values at which a line tilted at\n    a random angle will cut the x axis.\n    \n    When studying hypothesis tests that assume normality, seeing how the\n    tests perform on data from a Cauchy distribution is a good indicator of\n    their sensitivity to a heavy-tailed distribution, since the Cauchy looks\n    very much like a Gaussian distribution, but with heavier tails.\n    \n    References\n    ----------\n    .. [1] NIST/SEMATECH e-Handbook of Statistical Methods, \"Cauchy\n          Distribution\",\n          https://www.itl.nist.gov/div898/handbook/eda/section3/eda3663.htm\n    .. [2] Weisstein, Eric W. \"Cauchy Distribution.\" From MathWorld--A\n          Wolfram Web Resource.\n          https://mathworld.wolfram.com/CauchyDistribution.html\n    .. [3] Wikipedia, \"Cauchy distribution\"\n          https://en.wikipedia.org/wiki/Cauchy_distribution\n    \n    Examples\n    --------\n    Draw samples and plot the distribution:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> s = np.random.standard_cauchy(1000000)\n    >>> s = s[(s>-25) & (s<25)]  # truncate distribution so it plots well\n    >>> plt.hist(s, bins=100)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7d06e3d0031bf6770ef17991fdeb9a03a5b2382dc6f6ee0c7d1a33670726d07a",
            "fields": [
                {
                    "id": "drdcbi6b",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.standard_cauchy object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "snbiac_0",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xqa_hbfs",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.standard_cauchy",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.standard_cauchy",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y0lehpt9",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c9r5_xiv",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "43_45s_l",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3z3pgyoa",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "88ictl5w",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q315d1gs",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "cuubrb37",
            "name": "RandomState.standard_exponential",
            "description": "standard_exponential(size=None)\n    \n    Draw samples from the standard exponential distribution.\n    \n    `standard_exponential` is identical to the exponential distribution\n    with a scale parameter of 1.\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.standard_exponential`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    \n    Returns\n    -------\n    out : float or ndarray\n        Drawn samples.\n    \n    See Also\n    --------\n    random.Generator.standard_exponential: which should be used for new code.\n    \n    Examples\n    --------\n    Output a 3x8000 array:\n    \n    >>> n = np.random.standard_exponential((3, 8000))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b1eb4fef14ccfba08129e1d0c7847caaa398ceb9e303c0a91333c13c097ce58f",
            "fields": [
                {
                    "id": "ficu4yp4",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.standard_exponential object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "khllaldd",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6ekf5xr8",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.standard_exponential",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.standard_exponential",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ccbvydm4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ul4b0rno",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "fd9wnl75",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yndkvnsz",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6j082cy_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i_si9onl",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "6uekcqpa",
            "name": "RandomState.standard_gamma",
            "description": "standard_gamma(shape, size=None)\n    \n    Draw samples from a standard Gamma distribution.\n    \n    Samples are drawn from a Gamma distribution with specified parameters,\n    shape (sometimes designated \"k\") and scale=1.\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.standard_gamma`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    shape : float or array_like of floats\n        Parameter, must be non-negative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``shape`` is a scalar.  Otherwise,\n        ``np.array(shape).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized standard gamma distribution.\n    \n    See Also\n    --------\n    scipy.stats.gamma : probability density function, distribution or\n        cumulative density function, etc.\n    random.Generator.standard_gamma: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density for the Gamma distribution is\n    \n    .. math:: p(x) = x^{k-1}\\frac{e^{-x/\\theta}}{\\theta^k\\Gamma(k)},\n    \n    where :math:`k` is the shape and :math:`\\theta` the scale,\n    and :math:`\\Gamma` is the Gamma function.\n    \n    The Gamma distribution is often used to model the times to failure of\n    electronic components, and arises naturally in processes for which the\n    waiting times between Poisson distributed events are relevant.\n    \n    References\n    ----------\n    .. [1] Weisstein, Eric W. \"Gamma Distribution.\" From MathWorld--A\n           Wolfram Web Resource.\n           https://mathworld.wolfram.com/GammaDistribution.html\n    .. [2] Wikipedia, \"Gamma distribution\",\n           https://en.wikipedia.org/wiki/Gamma_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> shape, scale = 2., 1. # mean and width\n    >>> s = np.random.standard_gamma(shape, 1000000)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> import scipy.special as sps  # doctest: +SKIP\n    >>> count, bins, ignored = plt.hist(s, 50, density=True)\n    >>> y = bins**(shape-1) * ((np.exp(-bins/scale))/  # doctest: +SKIP\n    ...                       (sps.gamma(shape) * scale**shape))\n    >>> plt.plot(bins, y, linewidth=2, color='r')  # doctest: +SKIP\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9ad4af6a702f734b0fe8ec06ea930909d477853dc6323f9a734721232a1f82ff",
            "fields": [
                {
                    "id": "4_t0rymm",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.standard_gamma object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dbdr5t_q",
                    "encoding": "",
                    "name": "shape",
                    "value": "",
                    "defaultValue": "",
                    "description": "Parameter, must be non-negative.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uo_bq8hh",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``shape`` is a scalar.  Otherwise,\n``np.array(shape).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "joxoua0w",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.standard_gamma",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.standard_gamma",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t_zdjbhf",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nty2oqu9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "w58qldvw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "362ucf1t",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f1ucp3g5",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kfh6nmz7",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "7osf2ohz",
            "name": "RandomState.standard_normal",
            "description": "standard_normal(size=None)\n    \n    Draw samples from a standard Normal distribution (mean=0, stdev=1).\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.standard_normal`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    \n    Returns\n    -------\n    out : float or ndarray\n        A floating-point array of shape ``size`` of drawn samples, or a\n        single sample if ``size`` was not specified.\n    \n    See Also\n    --------\n    normal :\n        Equivalent function with additional ``loc`` and ``scale`` arguments\n        for setting the mean and standard deviation.\n    random.Generator.standard_normal: which should be used for new code.\n    \n    Notes\n    -----\n    For random samples from the normal distribution with mean ``mu`` and\n    standard deviation ``sigma``, use one of::\n    \n        mu + sigma * np.random.standard_normal(size=...)\n        np.random.normal(mu, sigma, size=...)\n    \n    Examples\n    --------\n    >>> np.random.standard_normal()\n    2.1923875335537315 #random\n    \n    >>> s = np.random.standard_normal(8000)\n    >>> s\n    array([ 0.6888893 ,  0.78096262, -0.89086505, ...,  0.49876311,  # random\n           -0.38672696, -0.4685006 ])                                # random\n    >>> s.shape\n    (8000,)\n    >>> s = np.random.standard_normal(size=(3, 4, 2))\n    >>> s.shape\n    (3, 4, 2)\n    \n    Two-by-four array of samples from the normal distribution with\n    mean 3 and standard deviation 2.5:\n    \n    >>> 3 + 2.5 * np.random.standard_normal(size=(2, 4))\n    array([[-4.49401501,  4.00950034, -1.81814867,  7.29718677],   # random\n           [ 0.39924804,  4.68456316,  4.99394529,  4.84057254]])  # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7aeacfaa307be315561067a6247e5272a8df4a1331150b405628d97b2b3f27e5",
            "fields": [
                {
                    "id": "uh46n8ah",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.standard_normal object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o2q8n9w_",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yu9qegvb",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.standard_normal",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.standard_normal",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kbj4buqk",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "unos_27l",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "7erks3zq",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x7qhutfu",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rhmzg499",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "33x75vj0",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "20sja68v",
            "name": "RandomState.standard_t",
            "description": "standard_t(df, size=None)\n    \n    Draw samples from a standard Student's t distribution with `df` degrees\n    of freedom.\n    \n    A special case of the hyperbolic distribution.  As `df` gets\n    large, the result resembles that of the standard normal\n    distribution (`standard_normal`).\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.standard_t`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    df : float or array_like of floats\n        Degrees of freedom, must be > 0.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``df`` is a scalar.  Otherwise,\n        ``np.array(df).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized standard Student's t distribution.\n    \n    See Also\n    --------\n    random.Generator.standard_t: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density function for the t distribution is\n    \n    .. math:: P(x, df) = \\frac{\\Gamma(\\frac{df+1}{2})}{\\sqrt{\\pi df}\n              \\Gamma(\\frac{df}{2})}\\Bigl( 1+\\frac{x^2}{df} \\Bigr)^{-(df+1)/2}\n    \n    The t test is based on an assumption that the data come from a\n    Normal distribution. The t test provides a way to test whether\n    the sample mean (that is the mean calculated from the data) is\n    a good estimate of the true mean.\n    \n    The derivation of the t-distribution was first published in\n    1908 by William Gosset while working for the Guinness Brewery\n    in Dublin. Due to proprietary issues, he had to publish under\n    a pseudonym, and so he used the name Student.\n    \n    References\n    ----------\n    .. [1] Dalgaard, Peter, \"Introductory Statistics With R\",\n           Springer, 2002.\n    .. [2] Wikipedia, \"Student's t-distribution\"\n           https://en.wikipedia.org/wiki/Student's_t-distribution\n    \n    Examples\n    --------\n    From Dalgaard page 83 [1]_, suppose the daily energy intake for 11\n    women in kilojoules (kJ) is:\n    \n    >>> intake = np.array([5260., 5470, 5640, 6180, 6390, 6515, 6805, 7515, \\\n    ...                    7515, 8230, 8770])\n    \n    Does their energy intake deviate systematically from the recommended\n    value of 7725 kJ? Our null hypothesis will be the absence of deviation,\n    and the alternate hypothesis will be the presence of an effect that could be\n    either positive or negative, hence making our test 2-tailed. \n    \n    Because we are estimating the mean and we have N=11 values in our sample,\n    we have N-1=10 degrees of freedom. We set our significance level to 95% and \n    compute the t statistic using the empirical mean and empirical standard \n    deviation of our intake. We use a ddof of 1 to base the computation of our \n    empirical standard deviation on an unbiased estimate of the variance (note:\n    the final estimate is not unbiased due to the concave nature of the square \n    root).\n    \n    >>> np.mean(intake)\n    6753.636363636364\n    >>> intake.std(ddof=1)\n    1142.1232221373727\n    >>> t = (np.mean(intake)-7725)/(intake.std(ddof=1)/np.sqrt(len(intake)))\n    >>> t\n    -2.8207540608310198\n    \n    We draw 1000000 samples from Student's t distribution with the adequate\n    degrees of freedom.\n    \n    >>> import matplotlib.pyplot as plt\n    >>> s = np.random.standard_t(10, size=1000000)\n    >>> h = plt.hist(s, bins=100, density=True)\n    \n    Does our t statistic land in one of the two critical regions found at \n    both tails of the distribution?\n    \n    >>> np.sum(np.abs(t) < np.abs(s)) / float(len(s))\n    0.018318  #random < 0.05, statistic is in critical region\n    \n    The probability value for this 2-tailed test is about 1.83%, which is \n    lower than the 5% pre-determined significance threshold. \n    \n    Therefore, the probability of observing values as extreme as our intake\n    conditionally on the null hypothesis being true is too low, and we reject \n    the null hypothesis of no deviation.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "63dffe18f7d62926f76d200c14548637d0c5185b7ddc929ed47355755f0e85c1",
            "fields": [
                {
                    "id": "jomtiply",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.standard_t object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b1ac3ll1",
                    "encoding": "",
                    "name": "df",
                    "value": "",
                    "defaultValue": "",
                    "description": "Degrees of freedom, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "toglxe_u",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``df`` is a scalar.  Otherwise,\n``np.array(df).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3ya3xs7v",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.standard_t",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.standard_t",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_luo1j85",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zp18ki8b",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "8gxfqrpq",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iqdj1d8y",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hwv4b3v5",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "25x9yu8d",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "b4nndrgq",
            "name": "RandomState.tomaxint",
            "description": "tomaxint(size=None)\n    \n    Return a sample of uniformly distributed random integers in the interval\n    [0, ``np.iinfo(\"long\").max``].\n    \n    .. warning::\n       This function uses the C-long dtype, which is 32bit on windows\n       and otherwise 64bit on 64bit platforms (and 32bit on 32bit ones).\n       Since NumPy 2.0, NumPy's default integer is 32bit on 32bit platforms\n       and 64bit on 64bit platforms.\n    \n    Parameters\n    ----------\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    \n    Returns\n    -------\n    out : ndarray\n        Drawn samples, with shape `size`.\n    \n    See Also\n    --------\n    randint : Uniform sampling over a given half-open interval of integers.\n    random_integers : Uniform sampling over a given closed interval of\n        integers.\n    \n    Examples\n    --------\n    >>> rs = np.random.RandomState() # need a RandomState object\n    >>> rs.tomaxint((2,2,2))\n    array([[[1170048599, 1600360186], # random\n            [ 739731006, 1947757578]],\n           [[1871712945,  752307660],\n            [1601631370, 1479324245]]])\n    >>> rs.tomaxint((2,2,2)) < np.iinfo(np.int_).max\n    array([[[ True,  True],\n            [ True,  True]],\n           [[ True,  True],\n            [ True,  True]]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "99b81aa57bb6ab4ea85c3f785fda5c32c4c4b4c3f4e9e3dbe9f5aae676b37fdf",
            "fields": [
                {
                    "id": "e1ckre_r",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.tomaxint object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a996b0ef",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ao1r_xg6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.tomaxint",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.tomaxint",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ql2b5_gg",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t23qyub7",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bz9j474i",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qd5mr3g5",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ren6qwaz",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "68r2ivqf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "d9ysr_jz",
            "name": "RandomState.triangular",
            "description": "triangular(left, mode, right, size=None)\n    \n    Draw samples from the triangular distribution over the\n    interval ``[left, right]``.\n    \n    The triangular distribution is a continuous probability\n    distribution with lower limit left, peak at mode, and upper\n    limit right. Unlike the other distributions, these parameters\n    directly define the shape of the pdf.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.triangular`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    left : float or array_like of floats\n        Lower limit.\n    mode : float or array_like of floats\n        The value where the peak of the distribution occurs.\n        The value must fulfill the condition ``left <= mode <= right``.\n    right : float or array_like of floats\n        Upper limit, must be larger than `left`.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``left``, ``mode``, and ``right``\n        are all scalars.  Otherwise, ``np.broadcast(left, mode, right).size``\n        samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized triangular distribution.\n    \n    See Also\n    --------\n    random.Generator.triangular: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density function for the triangular distribution is\n    \n    .. math:: P(x;l, m, r) = \\begin{cases}\n              \\frac{2(x-l)}{(r-l)(m-l)}& \\text{for $l \\leq x \\leq m$},\\\\\n              \\frac{2(r-x)}{(r-l)(r-m)}& \\text{for $m \\leq x \\leq r$},\\\\\n              0& \\text{otherwise}.\n              \\end{cases}\n    \n    The triangular distribution is often used in ill-defined\n    problems where the underlying distribution is not known, but\n    some knowledge of the limits and mode exists. Often it is used\n    in simulations.\n    \n    References\n    ----------\n    .. [1] Wikipedia, \"Triangular distribution\"\n           https://en.wikipedia.org/wiki/Triangular_distribution\n    \n    Examples\n    --------\n    Draw values from the distribution and plot the histogram:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> h = plt.hist(np.random.triangular(-3, 0, 8, 100000), bins=200,\n    ...              density=True)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a76396d795b53b4b57496a33ae5e698d74e584bd0a83eda165b55ddbced7d858",
            "fields": [
                {
                    "id": "1m_z9zau",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.triangular object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3pplfnju",
                    "encoding": "",
                    "name": "left",
                    "value": "",
                    "defaultValue": "",
                    "description": "Lower limit.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pv0c9bdn",
                    "encoding": "",
                    "name": "mode",
                    "value": "",
                    "defaultValue": "",
                    "description": "The value where the peak of the distribution occurs.\nThe value must fulfill the condition ``left <= mode <= right``.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oua11kvc",
                    "encoding": "",
                    "name": "right",
                    "value": "",
                    "defaultValue": "",
                    "description": "Upper limit, must be larger than `left`.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z9w68tkq",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``left``, ``mode``, and ``right``\nare all scalars.  Otherwise, ``np.broadcast(left, mode, right).size``\nsamples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7lf3g7qz",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.triangular",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.triangular",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dk6_z48m",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "15b51k95",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ddac0wwt",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d4qmgbqu",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tw5i7vy6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mxeqn_8m",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "cwsd70b_",
            "name": "RandomState.uniform",
            "description": "uniform(low=0.0, high=1.0, size=None)\n    \n    Draw samples from a uniform distribution.\n    \n    Samples are uniformly distributed over the half-open interval\n    ``[low, high)`` (includes low, but excludes high).  In other words,\n    any value within the given interval is equally likely to be drawn\n    by `uniform`.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.uniform`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    low : float or array_like of floats, optional\n        Lower boundary of the output interval.  All values generated will be\n        greater than or equal to low.  The default value is 0.\n    high : float or array_like of floats\n        Upper boundary of the output interval.  All values generated will be\n        less than or equal to high.  The high limit may be included in the \n        returned array of floats due to floating-point rounding in the \n        equation ``low + (high-low) * random_sample()``.  The default value \n        is 1.0.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``low`` and ``high`` are both scalars.\n        Otherwise, ``np.broadcast(low, high).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized uniform distribution.\n    \n    See Also\n    --------\n    randint : Discrete uniform distribution, yielding integers.\n    random_integers : Discrete uniform distribution over the closed\n                      interval ``[low, high]``.\n    random_sample : Floats uniformly distributed over ``[0, 1)``.\n    random : Alias for `random_sample`.\n    rand : Convenience function that accepts dimensions as input, e.g.,\n           ``rand(2,2)`` would generate a 2-by-2 array of floats,\n           uniformly distributed over ``[0, 1)``.\n    random.Generator.uniform: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density function of the uniform distribution is\n    \n    .. math:: p(x) = \\frac{1}{b - a}\n    \n    anywhere within the interval ``[a, b)``, and zero elsewhere.\n    \n    When ``high`` == ``low``, values of ``low`` will be returned.\n    If ``high`` < ``low``, the results are officially undefined\n    and may eventually raise an error, i.e. do not rely on this\n    function to behave when passed arguments satisfying that\n    inequality condition. The ``high`` limit may be included in the\n    returned array of floats due to floating-point rounding in the\n    equation ``low + (high-low) * random_sample()``. For example:\n    \n    >>> x = np.float32(5*0.99999999)\n    >>> x\n    np.float32(5.0)\n    \n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> s = np.random.uniform(-1,0,1000)\n    \n    All values are within the given interval:\n    \n    >>> np.all(s >= -1)\n    True\n    >>> np.all(s < 0)\n    True\n    \n    Display the histogram of the samples, along with the\n    probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, ignored = plt.hist(s, 15, density=True)\n    >>> plt.plot(bins, np.ones_like(bins), linewidth=2, color='r')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2332ad4e62caf6dc6606f8cf06f5bfd9f6e73a2092bb59fdc599075d78368169",
            "fields": [
                {
                    "id": "heh0y0gr",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.uniform object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ekw8k07b",
                    "encoding": "",
                    "name": "low",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Lower boundary of the output interval.  All values generated will be\ngreater than or equal to low.  The default value is 0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gn7x48l2",
                    "encoding": "",
                    "name": "high",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Upper boundary of the output interval.  All values generated will be\nless than or equal to high.  The high limit may be included in the \nreturned array of floats due to floating-point rounding in the \nequation ``low + (high-low) * random_sample()``.  The default value \nis 1.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fhoxoqk4",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``low`` and ``high`` are both scalars.\nOtherwise, ``np.broadcast(low, high).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f1eeiiw8",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.uniform",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.uniform",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9ecrp5m7",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1dpia1yk",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "jwau4x3j",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2s__r0uz",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ot2qem45",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m0wpm9aq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "x_kvw3r4",
            "name": "RandomState.vonmises",
            "description": "vonmises(mu, kappa, size=None)\n    \n    Draw samples from a von Mises distribution.\n    \n    Samples are drawn from a von Mises distribution with specified mode\n    (mu) and concentration (kappa), on the interval [-pi, pi].\n    \n    The von Mises distribution (also known as the circular normal\n    distribution) is a continuous probability distribution on the unit\n    circle.  It may be thought of as the circular analogue of the normal\n    distribution.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.vonmises`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    mu : float or array_like of floats\n        Mode (\"center\") of the distribution.\n    kappa : float or array_like of floats\n        Concentration of the distribution, has to be >=0.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``mu`` and ``kappa`` are both scalars.\n        Otherwise, ``np.broadcast(mu, kappa).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized von Mises distribution.\n    \n    See Also\n    --------\n    scipy.stats.vonmises : probability density function, distribution, or\n        cumulative density function, etc.\n    random.Generator.vonmises: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density for the von Mises distribution is\n    \n    .. math:: p(x) = \\frac{e^{\\kappa cos(x-\\mu)}}{2\\pi I_0(\\kappa)},\n    \n    where :math:`\\mu` is the mode and :math:`\\kappa` the concentration,\n    and :math:`I_0(\\kappa)` is the modified Bessel function of order 0.\n    \n    The von Mises is named for Richard Edler von Mises, who was born in\n    Austria-Hungary, in what is now the Ukraine.  He fled to the United\n    States in 1939 and became a professor at Harvard.  He worked in\n    probability theory, aerodynamics, fluid mechanics, and philosophy of\n    science.\n    \n    References\n    ----------\n    .. [1] Abramowitz, M. and Stegun, I. A. (Eds.). \"Handbook of\n           Mathematical Functions with Formulas, Graphs, and Mathematical\n           Tables, 9th printing,\" New York: Dover, 1972.\n    .. [2] von Mises, R., \"Mathematical Theory of Probability\n           and Statistics\", New York: Academic Press, 1964.\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> mu, kappa = 0.0, 4.0 # mean and concentration\n    >>> s = np.random.vonmises(mu, kappa, 1000)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.special import i0  # doctest: +SKIP\n    >>> plt.hist(s, 50, density=True)\n    >>> x = np.linspace(-np.pi, np.pi, num=51)\n    >>> y = np.exp(kappa*np.cos(x-mu))/(2*np.pi*i0(kappa))  # doctest: +SKIP\n    >>> plt.plot(x, y, linewidth=2, color='r')  # doctest: +SKIP\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a858a26351bd5d0738505b8da89f5d485a8c709280a136b58bd08c5078718c24",
            "fields": [
                {
                    "id": "mk9xjdei",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.vonmises object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7kc083d4",
                    "encoding": "",
                    "name": "mu",
                    "value": "",
                    "defaultValue": "",
                    "description": "Mode (\"center\") of the distribution.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b8t7x67e",
                    "encoding": "",
                    "name": "kappa",
                    "value": "",
                    "defaultValue": "",
                    "description": "Concentration of the distribution, has to be >=0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g6wyzk81",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``mu`` and ``kappa`` are both scalars.\nOtherwise, ``np.broadcast(mu, kappa).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l103bv54",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.vonmises",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.vonmises",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qhobr6gs",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gwa9v_uf",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "_o1mnfzp",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rqomi8xl",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "odlwcpdo",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2419nvqy",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "dxzc7hd3",
            "name": "RandomState.wald",
            "description": "wald(mean, scale, size=None)\n    \n    Draw samples from a Wald, or inverse Gaussian, distribution.\n    \n    As the scale approaches infinity, the distribution becomes more like a\n    Gaussian. Some references claim that the Wald is an inverse Gaussian\n    with mean equal to 1, but this is by no means universal.\n    \n    The inverse Gaussian distribution was first studied in relationship to\n    Brownian motion. In 1956 M.C.K. Tweedie used the name inverse Gaussian\n    because there is an inverse relationship between the time to cover a\n    unit distance and distance covered in unit time.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.wald`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    mean : float or array_like of floats\n        Distribution mean, must be > 0.\n    scale : float or array_like of floats\n        Scale parameter, must be > 0.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``mean`` and ``scale`` are both scalars.\n        Otherwise, ``np.broadcast(mean, scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Wald distribution.\n    \n    See Also\n    --------\n    random.Generator.wald: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density function for the Wald distribution is\n    \n    .. math:: P(x;mean,scale) = \\sqrt{\\frac{scale}{2\\pi x^3}}e^\n                                \\frac{-scale(x-mean)^2}{2\\cdotp mean^2x}\n    \n    As noted above the inverse Gaussian distribution first arise\n    from attempts to model Brownian motion. It is also a\n    competitor to the Weibull for use in reliability modeling and\n    modeling stock returns and interest rate processes.\n    \n    References\n    ----------\n    .. [1] Brighton Webs Ltd., Wald Distribution,\n           https://web.archive.org/web/20090423014010/http://www.brighton-webs.co.uk:80/distributions/wald.asp\n    .. [2] Chhikara, Raj S., and Folks, J. Leroy, \"The Inverse Gaussian\n           Distribution: Theory : Methodology, and Applications\", CRC Press,\n           1988.\n    .. [3] Wikipedia, \"Inverse Gaussian distribution\"\n           https://en.wikipedia.org/wiki/Inverse_Gaussian_distribution\n    \n    Examples\n    --------\n    Draw values from the distribution and plot the histogram:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> h = plt.hist(np.random.wald(3, 2, 100000), bins=200, density=True)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "724498ecd471883893bebc5603e3f1737bcd377dfd4edac9cca3303748646ec3",
            "fields": [
                {
                    "id": "l7vj0l34",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.wald object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ll54l57o",
                    "encoding": "",
                    "name": "mean",
                    "value": "",
                    "defaultValue": "",
                    "description": "Distribution mean, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "du58t5it",
                    "encoding": "",
                    "name": "scale",
                    "value": "",
                    "defaultValue": "",
                    "description": "Scale parameter, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6rk4i39w",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``mean`` and ``scale`` are both scalars.\nOtherwise, ``np.broadcast(mean, scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bvvneyxf",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.wald",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.wald",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ewzcuxqu",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8j9nnitb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ce2zcex4",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dgkiwbb7",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wddqpo7_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lklrm5u7",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "k7t_gj6k",
            "name": "RandomState.weibull",
            "description": "weibull(a, size=None)\n    \n    Draw samples from a Weibull distribution.\n    \n    Draw samples from a 1-parameter Weibull distribution with the given\n    shape parameter `a`.\n    \n    .. math:: X = (-ln(U))^{1/a}\n    \n    Here, U is drawn from the uniform distribution over (0,1].\n    \n    The more common 2-parameter Weibull, including a scale parameter\n    :math:`\\lambda` is just :math:`X = \\lambda(-ln(U))^{1/a}`.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.weibull`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    a : float or array_like of floats\n        Shape parameter of the distribution.  Must be nonnegative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``a`` is a scalar.  Otherwise,\n        ``np.array(a).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Weibull distribution.\n    \n    See Also\n    --------\n    scipy.stats.weibull_max\n    scipy.stats.weibull_min\n    scipy.stats.genextreme\n    gumbel\n    random.Generator.weibull: which should be used for new code.\n    \n    Notes\n    -----\n    The Weibull (or Type III asymptotic extreme value distribution\n    for smallest values, SEV Type III, or Rosin-Rammler\n    distribution) is one of a class of Generalized Extreme Value\n    (GEV) distributions used in modeling extreme value problems.\n    This class includes the Gumbel and Frechet distributions.\n    \n    The probability density for the Weibull distribution is\n    \n    .. math:: p(x) = \\frac{a}\n                     {\\lambda}(\\frac{x}{\\lambda})^{a-1}e^{-(x/\\lambda)^a},\n    \n    where :math:`a` is the shape and :math:`\\lambda` the scale.\n    \n    The function has its peak (the mode) at\n    :math:`\\lambda(\\frac{a-1}{a})^{1/a}`.\n    \n    When ``a = 1``, the Weibull distribution reduces to the exponential\n    distribution.\n    \n    References\n    ----------\n    .. [1] Waloddi Weibull, Royal Technical University, Stockholm,\n           1939 \"A Statistical Theory Of The Strength Of Materials\",\n           Ingeniorsvetenskapsakademiens Handlingar Nr 151, 1939,\n           Generalstabens Litografiska Anstalts Forlag, Stockholm.\n    .. [2] Waloddi Weibull, \"A Statistical Distribution Function of\n           Wide Applicability\", Journal Of Applied Mechanics ASME Paper\n           1951.\n    .. [3] Wikipedia, \"Weibull distribution\",\n           https://en.wikipedia.org/wiki/Weibull_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> a = 5. # shape\n    >>> s = np.random.weibull(a, 1000)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> x = np.arange(1,100.)/50.\n    >>> def weib(x,n,a):\n    ...     return (a / n) * (x / n)**(a - 1) * np.exp(-(x / n)**a)\n    \n    >>> count, bins, ignored = plt.hist(np.random.weibull(5.,1000))\n    >>> x = np.arange(1,100.)/50.\n    >>> scale = count.max()/weib(x, 1., 5.).max()\n    >>> plt.plot(x, weib(x, 1., 5.)*scale)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7f6ba0aca456ad9477dc03497237b779be06fc294d47bd02c5b603f28d5052e3",
            "fields": [
                {
                    "id": "2gseuf1p",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.weibull object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qk90ekp4",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape parameter of the distribution.  Must be nonnegative.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3qq7ntyq",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``a`` is a scalar.  Otherwise,\n``np.array(a).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n_lb1iah",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.weibull",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.weibull",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "btbwmuif",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k9dt61gp",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "29ms37lh",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fzwttall",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jzlkq1xd",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2uamkb5f",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "hn7x6_7v",
            "name": "RandomState.zipf",
            "description": "zipf(a, size=None)\n    \n    Draw samples from a Zipf distribution.\n    \n    Samples are drawn from a Zipf distribution with specified parameter\n    `a` > 1.\n    \n    The Zipf distribution (also known as the zeta distribution) is a\n    discrete probability distribution that satisfies Zipf's law: the\n    frequency of an item is inversely proportional to its rank in a\n    frequency table.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.zipf`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    a : float or array_like of floats\n        Distribution parameter. Must be greater than 1.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``a`` is a scalar. Otherwise,\n        ``np.array(a).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Zipf distribution.\n    \n    See Also\n    --------\n    scipy.stats.zipf : probability density function, distribution, or\n        cumulative density function, etc.\n    random.Generator.zipf: which should be used for new code.\n    \n    Notes\n    -----\n    The probability mass function (PMF) for the Zipf distribution is\n    \n    .. math:: p(k) = \\frac{k^{-a}}{\\zeta(a)},\n    \n    for integers :math:`k \\geq 1`, where :math:`\\zeta` is the Riemann Zeta\n    function.\n    \n    It is named for the American linguist George Kingsley Zipf, who noted\n    that the frequency of any word in a sample of a language is inversely\n    proportional to its rank in the frequency table.\n    \n    References\n    ----------\n    .. [1] Zipf, G. K., \"Selected Studies of the Principle of Relative\n           Frequency in Language,\" Cambridge, MA: Harvard Univ. Press,\n           1932.\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> a = 4.0\n    >>> n = 20000\n    >>> s = np.random.zipf(a, n)\n    \n    Display the histogram of the samples, along with\n    the expected histogram based on the probability\n    density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.special import zeta  # doctest: +SKIP\n    \n    `bincount` provides a fast histogram for small integers.\n    \n    >>> count = np.bincount(s)\n    >>> k = np.arange(1, s.max() + 1)\n    \n    >>> plt.bar(k, count[1:], alpha=0.5, label='sample count')\n    >>> plt.plot(k, n*(k**-a)/zeta(a), 'k.-', alpha=0.5,\n    ...          label='expected count')   # doctest: +SKIP\n    >>> plt.semilogy()\n    >>> plt.grid(alpha=0.4)\n    >>> plt.legend()\n    >>> plt.title(f'Zipf sample, a={a}, size={n}')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b014e5ff43f3fc7f5a78fefa3058722651716294134964b1cc74159fec98f2ee",
            "fields": [
                {
                    "id": "b5u48hlf",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.mtrand.RandomState.zipf object",
                    "type": "Object:numpy.random.mtrand.RandomState",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4io7llh4",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Distribution parameter. Must be greater than 1.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nnzwqf2b",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``a`` is a scalar. Otherwise,\n``np.array(a).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g9_v3k8f",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.mtrand.RandomState.zipf",
                    "defaultValue": "numpy.matlib.numpy.random.mtrand.RandomState.zipf",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yj83_t1z",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sn6qbtej",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "unp4lj_q",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9ycewsdk",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand.RandomState",
                    "defaultValue": "numpy.random.mtrand.RandomState",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dmmwh1tk",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n5s6e5vr",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "om3uglfa",
            "name": "SFC64.__init__",
            "description": "\nSFC64(seed=None)\n    \n    BitGenerator for Chris Doty-Humphrey's Small Fast Chaotic PRNG.\n    \n    Parameters\n    ----------\n    seed : {None, int, array_like[ints], SeedSequence}, optional\n        A seed to initialize the `BitGenerator`. If None, then fresh,\n        unpredictable entropy will be pulled from the OS. If an ``int`` or\n        ``array_like[ints]`` is passed, then it will be passed to\n        `SeedSequence` to derive the initial `BitGenerator` state. One may also\n        pass in a `SeedSequence` instance.\n    \n    Notes\n    -----\n    `SFC64` is a 256-bit implementation of Chris Doty-Humphrey's Small Fast\n    Chaotic PRNG ([1]_). `SFC64` has a few different cycles that one might be\n    on, depending on the seed; the expected period will be about\n    :math:`2^{255}` ([2]_). `SFC64` incorporates a 64-bit counter which means\n    that the absolute minimum cycle length is :math:`2^{64}` and that distinct\n    seeds will not run into each other for at least :math:`2^{64}` iterations.\n    \n    `SFC64` provides a capsule containing function pointers that produce\n    doubles, and unsigned 32 and 64- bit integers. These are not\n    directly consumable in Python and must be consumed by a `Generator`\n    or similar object that supports low-level access.\n    \n    **State and Seeding**\n    \n    The `SFC64` state vector consists of 4 unsigned 64-bit values. The last\n    is a 64-bit counter that increments by 1 each iteration.\n    \n    The input seed is processed by `SeedSequence` to generate the first\n    3 values, then the `SFC64` algorithm is iterated a small number of times\n    to mix.\n    \n    **Compatibility Guarantee**\n    \n    `SFC64` makes a guarantee that a fixed seed will always produce the same\n    random integer stream.\n    \n    References\n    ----------\n    .. [1] `\"PractRand\"\n            <https://pracrand.sourceforge.net/RNG_engines.txt>`_\n    .. [2] `\"Random Invertible Mapping Statistics\"\n            <https://www.pcg-random.org/posts/random-invertible-mapping-statistics.html>`_",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "94039984620bb356874468105b0294275110012f21d96f01587729c17d1c109f",
            "fields": [
                {
                    "id": "9cu17x02",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to SFC64 object",
                    "type": "Object:numpy.random._sfc64.SFC64",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "z57pvjyb",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hlykdxhc",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jlp834o2",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._sfc64.SFC64.__init__",
                    "defaultValue": "numpy.matlib.numpy.random._sfc64.SFC64.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ux1wrsd2",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vovfykif",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "65m44ckr",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4tpulxby",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._sfc64.SFC64",
                    "defaultValue": "numpy.random._sfc64.SFC64",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tvfcaf9y",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jstzurho",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "bn43y_ug",
            "name": "SFC64.random_raw",
            "description": "random_raw(self, size=None)\n    \n    Return randoms as generated by the underlying BitGenerator\n    \n    Parameters\n    ----------\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    output : bool, optional\n        Output values.  Used for performance testing since the generated\n        values are not returned.\n    \n    Returns\n    -------\n    out : uint or ndarray\n        Drawn samples.\n    \n    Notes\n    -----\n    This method directly exposes the raw underlying pseudo-random\n    number generator. All values are returned as unsigned 64-bit\n    values irrespective of the number of bits produced by the PRNG.\n    \n    See the class docstring for the number of bits returned.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7c09243b227669f26ed60d824a83bd53fa9fa2f7d00945574fa7467b67d93009",
            "fields": [
                {
                    "id": "wtd56m5u",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._sfc64.SFC64.random_raw object",
                    "type": "Object:numpy.random._sfc64.SFC64",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h6vj5395",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rpfu121i",
                    "encoding": "",
                    "name": "output",
                    "value": true,
                    "defaultValue": true,
                    "description": "Output values.  Used for performance testing since the generated\nvalues are not returned.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kw5t26gm",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._sfc64.SFC64.random_raw",
                    "defaultValue": "numpy.matlib.numpy.random._sfc64.SFC64.random_raw",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k_op29j8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7b90fjqt",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "qc0r084l",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ynpopiw_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._sfc64.SFC64",
                    "defaultValue": "numpy.random._sfc64.SFC64",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "41j6_wp5",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "90ut0mme",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "otu9xijd",
            "name": "SFC64.spawn",
            "description": "spawn(n_children)\n    \n    Create new independent child bit generators.\n    \n    See :ref:`seedsequence-spawn` for additional notes on spawning\n    children.  Some bit generators also implement ``jumped``\n    as a different approach for creating independent streams.\n    \n    .. versionadded:: 1.25.0\n    \n    Parameters\n    ----------\n    n_children : int\n    \n    Returns\n    -------\n    child_bit_generators : list of BitGenerators\n    \n    Raises\n    ------\n    TypeError\n        When the underlying SeedSequence does not implement spawning.\n    \n    See Also\n    --------\n    random.Generator.spawn, random.SeedSequence.spawn :\n        Equivalent method on the generator and seed sequence.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6e2fd64ed8b75b5acdc467c21df261e2f21199e1370fad765b4d49425d50be74",
            "fields": [
                {
                    "id": "rxeddv97",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random._sfc64.SFC64.spawn object",
                    "type": "Object:numpy.random._sfc64.SFC64",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5iw6ldnu",
                    "encoding": "",
                    "name": "n_children",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u034_ydl",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random._sfc64.SFC64.spawn",
                    "defaultValue": "numpy.matlib.numpy.random._sfc64.SFC64.spawn",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cate05v_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kuxkbu77",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "zzazg8o4",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hoix2vqa",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random._sfc64.SFC64",
                    "defaultValue": "numpy.random._sfc64.SFC64",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l5nlgn0_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jjnonosi",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "qg2q5vnd",
            "name": "SeedSequence.__init__",
            "description": "\nSeedSequence(entropy=None, *, spawn_key=(), pool_size=4)\n    \n    SeedSequence mixes sources of entropy in a reproducible way to set the\n    initial state for independent and very probably non-overlapping\n    BitGenerators.\n    \n    Once the SeedSequence is instantiated, you can call the `generate_state`\n    method to get an appropriately sized seed. Calling `spawn(n) <spawn>` will\n    create ``n`` SeedSequences that can be used to seed independent\n    BitGenerators, i.e. for different threads.\n    \n    Parameters\n    ----------\n    entropy : {None, int, sequence[int]}, optional\n        The entropy for creating a `SeedSequence`.\n        All integer values must be non-negative.\n    spawn_key : {(), sequence[int]}, optional\n        An additional source of entropy based on the position of this\n        `SeedSequence` in the tree of such objects created with the\n        `SeedSequence.spawn` method. Typically, only `SeedSequence.spawn` will\n        set this, and users will not.\n    pool_size : {int}, optional\n        Size of the pooled entropy to store. Default is 4 to give a 128-bit\n        entropy pool. 8 (for 256 bits) is another reasonable choice if working\n        with larger PRNGs, but there is very little to be gained by selecting\n        another value.\n    n_children_spawned : {int}, optional\n        The number of children already spawned. Only pass this if\n        reconstructing a `SeedSequence` from a serialized form.\n    \n    Notes\n    -----\n    \n    Best practice for achieving reproducible bit streams is to use\n    the default ``None`` for the initial entropy, and then use\n    `SeedSequence.entropy` to log/pickle the `entropy` for reproducibility:\n    \n    >>> sq1 = np.random.SeedSequence()\n    >>> sq1.entropy\n    243799254704924441050048792905230269161  # random\n    >>> sq2 = np.random.SeedSequence(sq1.entropy)\n    >>> np.all(sq1.generate_state(10) == sq2.generate_state(10))\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a9290dc611c6179a66779b4f3116e29880976fcf545ea67763e747a6dfb7d2f3",
            "fields": [
                {
                    "id": "9mmibsol",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to SeedSequence object",
                    "type": "Object:numpy.random.bit_generator.SeedSequence",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "dyt875j3",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3x_mefo9",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x6uc1hdd",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.bit_generator.SeedSequence.__init__",
                    "defaultValue": "numpy.matlib.numpy.random.bit_generator.SeedSequence.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5xrm3zzg",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "we3u1ssb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "i0vq54hc",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nabdqjuh",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.bit_generator.SeedSequence",
                    "defaultValue": "numpy.random.bit_generator.SeedSequence",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "smyht7yl",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sdd3_zfr",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "ide0nfyp",
            "name": "SeedSequence.generate_state",
            "description": "generate_state(n_words, dtype=np.uint32)\n    \n    Return the requested number of words for PRNG seeding.\n    \n    A BitGenerator should call this method in its constructor with\n    an appropriate `n_words` parameter to properly seed itself.\n    \n    Parameters\n    ----------\n    n_words : int\n    dtype : np.uint32 or np.uint64, optional\n        The size of each word. This should only be either `uint32` or\n        `uint64`. Strings (`'uint32'`, `'uint64'`) are fine. Note that\n        requesting `uint64` will draw twice as many bits as `uint32` for\n        the same `n_words`. This is a convenience for `BitGenerator`\\ s\n        that express their states as `uint64` arrays.\n    \n    Returns\n    -------\n    state : uint32 or uint64 array, shape=(n_words,)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bb5154e8bd876edd46219694f86ef7e3468aebc45bf1b9d1101433486bdc6dad",
            "fields": [
                {
                    "id": "535rg4da",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.bit_generator.SeedSequence.generate_state object",
                    "type": "Object:numpy.random.bit_generator.SeedSequence",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sl6b5wsb",
                    "encoding": "",
                    "name": "n_words",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cpk7gbi6",
                    "encoding": "",
                    "name": "dtype",
                    "value": "builtins.type",
                    "defaultValue": "builtins.type",
                    "description": "The size of each word. This should only be either `uint32` or\n`uint64`. Strings (`'uint32'`, `'uint64'`) are fine. Note that\nrequesting `uint64` will draw twice as many bits as `uint32` for\nthe same `n_words`. This is a convenience for `BitGenerator`\\ s\nthat express their states as `uint64` arrays.",
                    "type": "builtins.type",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w7_0fgto",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.bit_generator.SeedSequence.generate_state",
                    "defaultValue": "numpy.matlib.numpy.random.bit_generator.SeedSequence.generate_state",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "epr7tgzv",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fqvgq_9u",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0ivbembw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xxad_734",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.bit_generator.SeedSequence",
                    "defaultValue": "numpy.random.bit_generator.SeedSequence",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9t3vx3bt",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a79ikfq5",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "3j6mqs62",
            "name": "SeedSequence.spawn",
            "description": "spawn(n_children)\n    \n    Spawn a number of child `SeedSequence` s by extending the\n    `spawn_key`.\n    \n    See :ref:`seedsequence-spawn` for additional notes on spawning\n    children.\n    \n    Parameters\n    ----------\n    n_children : int\n    \n    Returns\n    -------\n    seqs : list of `SeedSequence` s\n    \n    See Also\n    --------\n    random.Generator.spawn, random.BitGenerator.spawn :\n        Equivalent method on the generator and bit generator.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b0bcee3f6dda09b6cfdc0ff12c22092e43cba3d5b05d8e8ba089f17d39d2782b",
            "fields": [
                {
                    "id": "zfwg065u",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to numpy.random.bit_generator.SeedSequence.spawn object",
                    "type": "Object:numpy.random.bit_generator.SeedSequence",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2w2i9h5t",
                    "encoding": "",
                    "name": "n_children",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b7pmhfsj",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.matlib.numpy.random.bit_generator.SeedSequence.spawn",
                    "defaultValue": "numpy.matlib.numpy.random.bit_generator.SeedSequence.spawn",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "20uozea5",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7gmjs4he",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "skle80k3",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gz9qkt6h",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.bit_generator.SeedSequence",
                    "defaultValue": "numpy.random.bit_generator.SeedSequence",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3hmtl3zd",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8x6fvc2w",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "xs2xqwhn",
            "name": "random.beta",
            "description": "beta(a, b, size=None)\n    \n    Draw samples from a Beta distribution.\n    \n    The Beta distribution is a special case of the Dirichlet distribution,\n    and is related to the Gamma distribution.  It has the probability\n    distribution function\n    \n    .. math:: f(x; a,b) = \\frac{1}{B(\\alpha, \\beta)} x^{\\alpha - 1}\n                                                     (1 - x)^{\\beta - 1},\n    \n    where the normalization, B, is the beta function,\n    \n    .. math:: B(\\alpha, \\beta) = \\int_0^1 t^{\\alpha - 1}\n                                 (1 - t)^{\\beta - 1} dt.\n    \n    It is often seen in Bayesian inference and order statistics.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.beta`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    \n    Parameters\n    ----------\n    a : float or array_like of floats\n        Alpha, positive (>0).\n    b : float or array_like of floats\n        Beta, positive (>0).\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``a`` and ``b`` are both scalars.\n        Otherwise, ``np.broadcast(a, b).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized beta distribution.\n    \n    See Also\n    --------\n    random.Generator.beta: which should be used for new code.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9fe95f0d2e55fd10056c93f9cbcb436a9edd30d07f098459e3b84fd2a949f0ea",
            "fields": [
                {
                    "id": "tknap91q",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Alpha, positive (>0).",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lt7h96cz",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Beta, positive (>0).",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lslqr7a6",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``a`` and ``b`` are both scalars.\nOtherwise, ``np.broadcast(a, b).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "erv9j43r",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.beta",
                    "defaultValue": "numpy.random.beta",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pkx9xdn4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i9vlb3sa",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "e_lv4mrp",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0koe23hw",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vlmqes90",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0x8ko6mi",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ixbu6n2j",
            "name": "random.binomial",
            "description": "binomial(n, p, size=None)\n    \n    Draw samples from a binomial distribution.\n    \n    Samples are drawn from a binomial distribution with specified\n    parameters, n trials and p probability of success where\n    n an integer >= 0 and p is in the interval [0,1]. (n may be\n    input as a float, but it is truncated to an integer in use)\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.binomial`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    n : int or array_like of ints\n        Parameter of the distribution, >= 0. Floats are also accepted,\n        but they will be truncated to integers.\n    p : float or array_like of floats\n        Parameter of the distribution, >= 0 and <=1.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``n`` and ``p`` are both scalars.\n        Otherwise, ``np.broadcast(n, p).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized binomial distribution, where\n        each sample is equal to the number of successes over the n trials.\n    \n    See Also\n    --------\n    scipy.stats.binom : probability density function, distribution or\n        cumulative density function, etc.\n    random.Generator.binomial: which should be used for new code.\n    \n    Notes\n    -----\n    The probability mass function (PMF) for the binomial distribution is\n    \n    .. math:: P(N) = \\binom{n}{N}p^N(1-p)^{n-N},\n    \n    where :math:`n` is the number of trials, :math:`p` is the probability\n    of success, and :math:`N` is the number of successes.\n    \n    When estimating the standard error of a proportion in a population by\n    using a random sample, the normal distribution works well unless the\n    product p*n <=5, where p = population proportion estimate, and n =\n    number of samples, in which case the binomial distribution is used\n    instead. For example, a sample of 15 people shows 4 who are left\n    handed, and 11 who are right handed. Then p = 4/15 = 27%. 0.27*15 = 4,\n    so the binomial distribution should be used in this case.\n    \n    References\n    ----------\n    .. [1] Dalgaard, Peter, \"Introductory Statistics with R\",\n           Springer-Verlag, 2002.\n    .. [2] Glantz, Stanton A. \"Primer of Biostatistics.\", McGraw-Hill,\n           Fifth Edition, 2002.\n    .. [3] Lentner, Marvin, \"Elementary Applied Statistics\", Bogden\n           and Quigley, 1972.\n    .. [4] Weisstein, Eric W. \"Binomial Distribution.\" From MathWorld--A\n           Wolfram Web Resource.\n           https://mathworld.wolfram.com/BinomialDistribution.html\n    .. [5] Wikipedia, \"Binomial distribution\",\n           https://en.wikipedia.org/wiki/Binomial_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> n, p = 10, .5  # number of trials, probability of each trial\n    >>> s = np.random.binomial(n, p, 1000)\n    # result of flipping a coin 10 times, tested 1000 times.\n    \n    A real world example. A company drills 9 wild-cat oil exploration\n    wells, each with an estimated probability of success of 0.1. All nine\n    wells fail. What is the probability of that happening?\n    \n    Let's do 20,000 trials of the model, and count the number that\n    generate zero positive results.\n    \n    >>> sum(np.random.binomial(9, 0.1, 20000) == 0)/20000.\n    # answer = 0.38885, or 38%.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "dc0ff8132a0c41197607b6016028ca6fa4faffd6794359abccda072022e41793",
            "fields": [
                {
                    "id": "sc5bfebb",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "Parameter of the distribution, >= 0. Floats are also accepted,\nbut they will be truncated to integers.",
                    "type": "int or arraylike of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3j40sioi",
                    "encoding": "",
                    "name": "p",
                    "value": "",
                    "defaultValue": "",
                    "description": "Parameter of the distribution, >= 0 and <=1.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uot_kgjl",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``n`` and ``p`` are both scalars.\nOtherwise, ``np.broadcast(n, p).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fbzyemq6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.binomial",
                    "defaultValue": "numpy.random.binomial",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uo5na_at",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ltdm7a8b",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ulhevk3d",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w72gqp3z",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c2b5c5cq",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3y12cza9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "etmv8khj",
            "name": "random.bytes",
            "description": "bytes(length)\n    \n    Return random bytes.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.bytes`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    length : int\n        Number of random bytes.\n    \n    Returns\n    -------\n    out : bytes\n        String of length `length`.\n    \n    See Also\n    --------\n    random.Generator.bytes: which should be used for new code.\n    \n    Examples\n    --------\n    >>> np.random.bytes(10)\n    b' eh\\x85\\x022SZ\\xbf\\xa4' #random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "467225d0d3a3329c19b2d9c9dad118f639b343af8292eb823769c32aedc66217",
            "fields": [
                {
                    "id": "q7148x_l",
                    "encoding": "",
                    "name": "length",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of random bytes.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pf7mo7d9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.bytes",
                    "defaultValue": "numpy.random.bytes",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tp6dy2hm",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jtnopqtd",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "m0bf9how",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oec33ara",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kacn1h6d",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0nw9iqlc",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "0k2qudwk",
            "name": "random.chisquare",
            "description": "chisquare(df, size=None)\n    \n    Draw samples from a chi-square distribution.\n    \n    When `df` independent random variables, each with standard normal\n    distributions (mean 0, variance 1), are squared and summed, the\n    resulting distribution is chi-square (see Notes).  This distribution\n    is often used in hypothesis testing.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.chisquare`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    df : float or array_like of floats\n         Number of degrees of freedom, must be > 0.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``df`` is a scalar.  Otherwise,\n        ``np.array(df).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized chi-square distribution.\n    \n    Raises\n    ------\n    ValueError\n        When `df` <= 0 or when an inappropriate `size` (e.g. ``size=-1``)\n        is given.\n    \n    See Also\n    --------\n    random.Generator.chisquare: which should be used for new code.\n    \n    Notes\n    -----\n    The variable obtained by summing the squares of `df` independent,\n    standard normally distributed random variables:\n    \n    .. math:: Q = \\sum_{i=1}^{\\mathtt{df}} X^2_i\n    \n    is chi-square distributed, denoted\n    \n    .. math:: Q \\sim \\chi^2_k.\n    \n    The probability density function of the chi-squared distribution is\n    \n    .. math:: p(x) = \\frac{(1/2)^{k/2}}{\\Gamma(k/2)}\n                     x^{k/2 - 1} e^{-x/2},\n    \n    where :math:`\\Gamma` is the gamma function,\n    \n    .. math:: \\Gamma(x) = \\int_0^{-\\infty} t^{x - 1} e^{-t} dt.\n    \n    References\n    ----------\n    .. [1] NIST \"Engineering Statistics Handbook\"\n           https://www.itl.nist.gov/div898/handbook/eda/section3/eda3666.htm\n    \n    Examples\n    --------\n    >>> np.random.chisquare(2,4)\n    array([ 1.89920014,  9.00867716,  3.13710533,  5.62318272]) # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ccbde87aa3bafa42fea5d6ac92d396774a814002ab5789689eb68fcde05c663b",
            "fields": [
                {
                    "id": "6n32o6pg",
                    "encoding": "",
                    "name": "df",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of degrees of freedom, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rhwasnqc",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``df`` is a scalar.  Otherwise,\n``np.array(df).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yafg1vs3",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.chisquare",
                    "defaultValue": "numpy.random.chisquare",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jns887ob",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x9mx91br",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "s13molgr",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oeaumo9f",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c24sq2tv",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xbxgfs3x",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "d2zs3yk4",
            "name": "random.choice",
            "description": "choice(a, size=None, replace=True, p=None)\n    \n    Generates a random sample from a given 1-D array\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.choice`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    .. warning::\n        This function uses the C-long dtype, which is 32bit on windows\n        and otherwise 64bit on 64bit platforms (and 32bit on 32bit ones).\n        Since NumPy 2.0, NumPy's default integer is 32bit on 32bit platforms\n        and 64bit on 64bit platforms.\n    \n    \n    Parameters\n    ----------\n    a : 1-D array-like or int\n        If an ndarray, a random sample is generated from its elements.\n        If an int, the random sample is generated as if it were ``np.arange(a)``\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    replace : boolean, optional\n        Whether the sample is with or without replacement. Default is True,\n        meaning that a value of ``a`` can be selected multiple times.\n    p : 1-D array-like, optional\n        The probabilities associated with each entry in a.\n        If not given, the sample assumes a uniform distribution over all\n        entries in ``a``.\n    \n    Returns\n    -------\n    samples : single item or ndarray\n        The generated random samples\n    \n    Raises\n    ------\n    ValueError\n        If a is an int and less than zero, if a or p are not 1-dimensional,\n        if a is an array-like of size 0, if p is not a vector of\n        probabilities, if a and p have different lengths, or if\n        replace=False and the sample size is greater than the population\n        size\n    \n    See Also\n    --------\n    randint, shuffle, permutation\n    random.Generator.choice: which should be used in new code\n    \n    Notes\n    -----\n    Setting user-specified probabilities through ``p`` uses a more general but less\n    efficient sampler than the default. The general sampler produces a different sample\n    than the optimized sampler even if each element of ``p`` is 1 / len(a).\n    \n    Sampling random rows from a 2-D array is not possible with this function,\n    but is possible with `Generator.choice` through its ``axis`` keyword.\n    \n    Examples\n    --------\n    Generate a uniform random sample from np.arange(5) of size 3:\n    \n    >>> np.random.choice(5, 3)\n    array([0, 3, 4]) # random\n    >>> #This is equivalent to np.random.randint(0,5,3)\n    \n    Generate a non-uniform random sample from np.arange(5) of size 3:\n    \n    >>> np.random.choice(5, 3, p=[0.1, 0, 0.3, 0.6, 0])\n    array([3, 3, 0]) # random\n    \n    Generate a uniform random sample from np.arange(5) of size 3 without\n    replacement:\n    \n    >>> np.random.choice(5, 3, replace=False)\n    array([3,1,0]) # random\n    >>> #This is equivalent to np.random.permutation(np.arange(5))[:3]\n    \n    Generate a non-uniform random sample from np.arange(5) of size\n    3 without replacement:\n    \n    >>> np.random.choice(5, 3, replace=False, p=[0.1, 0, 0.3, 0.6, 0])\n    array([2, 3, 0]) # random\n    \n    Any of the above can be repeated with an arbitrary array-like\n    instead of just integers. For instance:\n    \n    >>> aa_milne_arr = ['pooh', 'rabbit', 'piglet', 'Christopher']\n    >>> np.random.choice(aa_milne_arr, 5, p=[0.5, 0.1, 0.1, 0.3])\n    array(['pooh', 'pooh', 'pooh', 'Christopher', 'piglet'], # random\n          dtype='<U11')",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2c7aab1b5cce289c2f8b6495938ddcd15ac61cb4a702f06bfbdf3790a43bb3b6",
            "fields": [
                {
                    "id": "l127pacx",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "If an ndarray, a random sample is generated from its elements.\nIf an int, the random sample is generated as if it were ``np.arange(a)``",
                    "type": "1-D array-like or int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2fg3jc2o",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1uqnukt9",
                    "encoding": "",
                    "name": "replace",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether the sample is with or without replacement. Default is True,\nmeaning that a value of ``a`` can be selected multiple times.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xeovmtnk",
                    "encoding": "",
                    "name": "p",
                    "value": "",
                    "defaultValue": "",
                    "description": "The probabilities associated with each entry in a.\nIf not given, the sample assumes a uniform distribution over all\nentries in ``a``.",
                    "type": "1-D array-like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r01tfcft",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.choice",
                    "defaultValue": "numpy.random.choice",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g31_n8fz",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d8nl0l6p",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "16cir4__",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2reckqs4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xk2jyuu2",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qks2p1k9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "eb0ug4g_",
            "name": "random.default_rng",
            "description": "default_rng(seed=None)\n    \n    Construct a new Generator with the default BitGenerator (PCG64).\n    \n    Parameters\n    ----------\n    seed : {None, int, array_like[ints], SeedSequence, BitGenerator, Generator, RandomState}, optional\n        A seed to initialize the `BitGenerator`. If None, then fresh,\n        unpredictable entropy will be pulled from the OS. If an ``int`` or\n        ``array_like[ints]`` is passed, then all values must be non-negative and will be\n        passed to `SeedSequence` to derive the initial `BitGenerator` state. One may also\n        pass in a `SeedSequence` instance.\n        Additionally, when passed a `BitGenerator`, it will be wrapped by\n        `Generator`. If passed a `Generator`, it will be returned unaltered.\n        When passed a legacy `RandomState` instance it will be coerced to a `Generator`.\n    \n    Returns\n    -------\n    Generator\n        The initialized generator object.\n    \n    Notes\n    -----\n    If ``seed`` is not a `BitGenerator` or a `Generator`, a new `BitGenerator`\n    is instantiated. This function does not manage a default global instance.\n    \n    See :ref:`seeding_and_entropy` for more information about seeding.\n    \n    Examples\n    --------\n    `default_rng` is the recommended constructor for the random number class\n    `Generator`. Here are several ways we can construct a random \n    number generator using `default_rng` and the `Generator` class. \n    \n    Here we use `default_rng` to generate a random float:\n    \n    >>> import numpy as np\n    >>> rng = np.random.default_rng(12345)\n    >>> print(rng)\n    Generator(PCG64)\n    >>> rfloat = rng.random()\n    >>> rfloat\n    0.22733602246716966\n    >>> type(rfloat)\n    <class 'float'>\n     \n    Here we use `default_rng` to generate 3 random integers between 0 \n    (inclusive) and 10 (exclusive):\n        \n    >>> import numpy as np\n    >>> rng = np.random.default_rng(12345)\n    >>> rints = rng.integers(low=0, high=10, size=3)\n    >>> rints\n    array([6, 2, 7])\n    >>> type(rints[0])\n    <class 'numpy.int64'>\n    \n    Here we specify a seed so that we have reproducible results:\n    \n    >>> import numpy as np\n    >>> rng = np.random.default_rng(seed=42)\n    >>> print(rng)\n    Generator(PCG64)\n    >>> arr1 = rng.random((3, 3))\n    >>> arr1\n    array([[0.77395605, 0.43887844, 0.85859792],\n           [0.69736803, 0.09417735, 0.97562235],\n           [0.7611397 , 0.78606431, 0.12811363]])\n    \n    If we exit and restart our Python interpreter, we'll see that we\n    generate the same random numbers again:\n    \n    >>> import numpy as np\n    >>> rng = np.random.default_rng(seed=42)\n    >>> arr2 = rng.random((3, 3))\n    >>> arr2\n    array([[0.77395605, 0.43887844, 0.85859792],\n           [0.69736803, 0.09417735, 0.97562235],\n           [0.7611397 , 0.78606431, 0.12811363]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "dfd33f46f52ef5c0823d0fe2b55d1698f98ab9336762cd63714e05fda1c57b64",
            "fields": [
                {
                    "id": "eqotvuqg",
                    "encoding": "",
                    "name": "seed",
                    "value": "",
                    "defaultValue": "",
                    "description": "A seed to initialize the `BitGenerator`. If None, then fresh,\nunpredictable entropy will be pulled from the OS. If an ``int`` or\n``array_like[ints]`` is passed, then all values must be non-negative and will be\npassed to `SeedSequence` to derive the initial `BitGenerator` state. One may also\npass in a `SeedSequence` instance.\nAdditionally, when passed a `BitGenerator`, it will be wrapped by\n`Generator`. If passed a `Generator`, it will be returned unaltered.\nWhen passed a legacy `RandomState` instance it will be coerced to a `Generator`.",
                    "type": "{None, int, arraylike[ints], SeedSequence, BitGenerator, Generator, RandomState}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4wqxwmev",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.default_rng",
                    "defaultValue": "numpy.random.default_rng",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c59y3vh1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w2imxiaq",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "roxidv3l",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "68lg4qhj",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v8isr4ni",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ispwvawg",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "qc3d4zlj",
            "name": "random.dirichlet",
            "description": "dirichlet(alpha, size=None)\n    \n    Draw samples from the Dirichlet distribution.\n    \n    Draw `size` samples of dimension k from a Dirichlet distribution. A\n    Dirichlet-distributed random variable can be seen as a multivariate\n    generalization of a Beta distribution. The Dirichlet distribution\n    is a conjugate prior of a multinomial distribution in Bayesian\n    inference.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.dirichlet`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    alpha : sequence of floats, length k\n        Parameter of the distribution (length ``k`` for sample of\n        length ``k``).\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        vector of length ``k`` is returned.\n    \n    Returns\n    -------\n    samples : ndarray,\n        The drawn samples, of shape ``(size, k)``.\n    \n    Raises\n    ------\n    ValueError\n        If any value in ``alpha`` is less than or equal to zero\n    \n    See Also\n    --------\n    random.Generator.dirichlet: which should be used for new code.\n    \n    Notes\n    -----\n    The Dirichlet distribution is a distribution over vectors\n    :math:`x` that fulfil the conditions :math:`x_i>0` and\n    :math:`\\sum_{i=1}^k x_i = 1`.\n    \n    The probability density function :math:`p` of a\n    Dirichlet-distributed random vector :math:`X` is\n    proportional to\n    \n    .. math:: p(x) \\propto \\prod_{i=1}^{k}{x^{\\alpha_i-1}_i},\n    \n    where :math:`\\alpha` is a vector containing the positive\n    concentration parameters.\n    \n    The method uses the following property for computation: let :math:`Y`\n    be a random vector which has components that follow a standard gamma\n    distribution, then :math:`X = \\frac{1}{\\sum_{i=1}^k{Y_i}} Y`\n    is Dirichlet-distributed\n    \n    References\n    ----------\n    .. [1] David McKay, \"Information Theory, Inference and Learning\n           Algorithms,\" chapter 23,\n           https://www.inference.org.uk/mackay/itila/\n    .. [2] Wikipedia, \"Dirichlet distribution\",\n           https://en.wikipedia.org/wiki/Dirichlet_distribution\n    \n    Examples\n    --------\n    Taking an example cited in Wikipedia, this distribution can be used if\n    one wanted to cut strings (each of initial length 1.0) into K pieces\n    with different lengths, where each piece had, on average, a designated\n    average length, but allowing some variation in the relative sizes of\n    the pieces.\n    \n    >>> s = np.random.dirichlet((10, 5, 3), 20).transpose()\n    \n    >>> import matplotlib.pyplot as plt\n    >>> plt.barh(range(20), s[0])\n    >>> plt.barh(range(20), s[1], left=s[0], color='g')\n    >>> plt.barh(range(20), s[2], left=s[0]+s[1], color='r')\n    >>> plt.title(\"Lengths of Strings\")",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1b5363897bd9e4d89189c8659ff866ea6a2018ce3ceef0ba5d8a45f31754d56a",
            "fields": [
                {
                    "id": "vlpq74tn",
                    "encoding": "",
                    "name": "alpha",
                    "value": "",
                    "defaultValue": "",
                    "description": "Parameter of the distribution (length ``k`` for sample of\nlength ``k``).",
                    "type": "sequence of floats, length k",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2ofjzijx",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nvector of length ``k`` is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i3ilinvs",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.dirichlet",
                    "defaultValue": "numpy.random.dirichlet",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g_m1g7ym",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ar_w6ych",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "lqaetfjx",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9gub1mu4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mj1hamcg",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f8uziv6b",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "c37lr87q",
            "name": "random.exponential",
            "description": "exponential(scale=1.0, size=None)\n    \n    Draw samples from an exponential distribution.\n    \n    Its probability density function is\n    \n    .. math:: f(x; \\frac{1}{\\beta}) = \\frac{1}{\\beta} \\exp(-\\frac{x}{\\beta}),\n    \n    for ``x > 0`` and 0 elsewhere. :math:`\\beta` is the scale parameter,\n    which is the inverse of the rate parameter :math:`\\lambda = 1/\\beta`.\n    The rate parameter is an alternative, widely used parameterization\n    of the exponential distribution [3]_.\n    \n    The exponential distribution is a continuous analogue of the\n    geometric distribution.  It describes many common situations, such as\n    the size of raindrops measured over many rainstorms [1]_, or the time\n    between page requests to Wikipedia [2]_.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.exponential`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    scale : float or array_like of floats\n        The scale parameter, :math:`\\beta = 1/\\lambda`. Must be\n        non-negative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``scale`` is a scalar.  Otherwise,\n        ``np.array(scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized exponential distribution.\n    \n    Examples\n    --------\n    A real world example: Assume a company has 10000 customer support \n    agents and the average time between customer calls is 4 minutes.\n    \n    >>> n = 10000\n    >>> time_between_calls = np.random.default_rng().exponential(scale=4, size=n)\n    \n    What is the probability that a customer will call in the next \n    4 to 5 minutes? \n    \n    >>> x = ((time_between_calls < 5).sum())/n \n    >>> y = ((time_between_calls < 4).sum())/n\n    >>> x-y\n    0.08 # may vary\n    \n    See Also\n    --------\n    random.Generator.exponential: which should be used for new code.\n    \n    References\n    ----------\n    .. [1] Peyton Z. Peebles Jr., \"Probability, Random Variables and\n           Random Signal Principles\", 4th ed, 2001, p. 57.\n    .. [2] Wikipedia, \"Poisson process\",\n           https://en.wikipedia.org/wiki/Poisson_process\n    .. [3] Wikipedia, \"Exponential distribution\",\n           https://en.wikipedia.org/wiki/Exponential_distribution",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "acf445774cb8d6cc2a03379f53c14c0aeffc3620ea8eea1942447747c3d6e306",
            "fields": [
                {
                    "id": "jceg77hl",
                    "encoding": "",
                    "name": "scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "The scale parameter, :math:`\\beta = 1/\\lambda`. Must be\nnon-negative.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tx1kk6kt",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``scale`` is a scalar.  Otherwise,\n``np.array(scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o14v7nlk",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.exponential",
                    "defaultValue": "numpy.random.exponential",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rsxatmq4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y1_grdtg",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "vep2btof",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "40ww4ej7",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6ldvsj3c",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "voywcwk8",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "hqj8esew",
            "name": "random.f",
            "description": "f(dfnum, dfden, size=None)\n    \n    Draw samples from an F distribution.\n    \n    Samples are drawn from an F distribution with specified parameters,\n    `dfnum` (degrees of freedom in numerator) and `dfden` (degrees of\n    freedom in denominator), where both parameters must be greater than\n    zero.\n    \n    The random variate of the F distribution (also known as the\n    Fisher distribution) is a continuous probability distribution\n    that arises in ANOVA tests, and is the ratio of two chi-square\n    variates.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.f`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    dfnum : float or array_like of floats\n        Degrees of freedom in numerator, must be > 0.\n    dfden : float or array_like of float\n        Degrees of freedom in denominator, must be > 0.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``dfnum`` and ``dfden`` are both scalars.\n        Otherwise, ``np.broadcast(dfnum, dfden).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Fisher distribution.\n    \n    See Also\n    --------\n    scipy.stats.f : probability density function, distribution or\n        cumulative density function, etc.\n    random.Generator.f: which should be used for new code.\n    \n    Notes\n    -----\n    The F statistic is used to compare in-group variances to between-group\n    variances. Calculating the distribution depends on the sampling, and\n    so it is a function of the respective degrees of freedom in the\n    problem.  The variable `dfnum` is the number of samples minus one, the\n    between-groups degrees of freedom, while `dfden` is the within-groups\n    degrees of freedom, the sum of the number of samples in each group\n    minus the number of groups.\n    \n    References\n    ----------\n    .. [1] Glantz, Stanton A. \"Primer of Biostatistics.\", McGraw-Hill,\n           Fifth Edition, 2002.\n    .. [2] Wikipedia, \"F-distribution\",\n           https://en.wikipedia.org/wiki/F-distribution\n    \n    Examples\n    --------\n    An example from Glantz[1], pp 47-40:\n    \n    Two groups, children of diabetics (25 people) and children from people\n    without diabetes (25 controls). Fasting blood glucose was measured,\n    case group had a mean value of 86.1, controls had a mean value of\n    82.2. Standard deviations were 2.09 and 2.49 respectively. Are these\n    data consistent with the null hypothesis that the parents diabetic\n    status does not affect their children's blood glucose levels?\n    Calculating the F statistic from the data gives a value of 36.01.\n    \n    Draw samples from the distribution:\n    \n    >>> dfnum = 1. # between group degrees of freedom\n    >>> dfden = 48. # within groups degrees of freedom\n    >>> s = np.random.f(dfnum, dfden, 1000)\n    \n    The lower bound for the top 1% of the samples is :\n    \n    >>> np.sort(s)[-10]\n    7.61988120985 # random\n    \n    So there is about a 1% chance that the F statistic will exceed 7.62,\n    the measured value is 36, so the null hypothesis is rejected at the 1%\n    level.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f5dfe44029b9945f04c7e628bda331fa0b38d15cd3948604d4ee305d4f1d4ac4",
            "fields": [
                {
                    "id": "zffprzil",
                    "encoding": "",
                    "name": "dfnum",
                    "value": "",
                    "defaultValue": "",
                    "description": "Degrees of freedom in numerator, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y9jeanl7",
                    "encoding": "",
                    "name": "dfden",
                    "value": "",
                    "defaultValue": "",
                    "description": "Degrees of freedom in denominator, must be > 0.",
                    "type": "float or arraylike of float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lu2gizt3",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``dfnum`` and ``dfden`` are both scalars.\nOtherwise, ``np.broadcast(dfnum, dfden).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n45_wc7g",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.f",
                    "defaultValue": "numpy.random.f",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ho687b_v",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gchu3hdp",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "rktf6801",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "col9ap8u",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ek9o5zy9",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ht_5dgmm",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "mo_fbj__",
            "name": "random.gamma",
            "description": "gamma(shape, scale=1.0, size=None)\n    \n    Draw samples from a Gamma distribution.\n    \n    Samples are drawn from a Gamma distribution with specified parameters,\n    `shape` (sometimes designated \"k\") and `scale` (sometimes designated\n    \"theta\"), where both parameters are > 0.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.gamma`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    shape : float or array_like of floats\n        The shape of the gamma distribution. Must be non-negative.\n    scale : float or array_like of floats, optional\n        The scale of the gamma distribution. Must be non-negative.\n        Default is equal to 1.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``shape`` and ``scale`` are both scalars.\n        Otherwise, ``np.broadcast(shape, scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized gamma distribution.\n    \n    See Also\n    --------\n    scipy.stats.gamma : probability density function, distribution or\n        cumulative density function, etc.\n    random.Generator.gamma: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density for the Gamma distribution is\n    \n    .. math:: p(x) = x^{k-1}\\frac{e^{-x/\\theta}}{\\theta^k\\Gamma(k)},\n    \n    where :math:`k` is the shape and :math:`\\theta` the scale,\n    and :math:`\\Gamma` is the Gamma function.\n    \n    The Gamma distribution is often used to model the times to failure of\n    electronic components, and arises naturally in processes for which the\n    waiting times between Poisson distributed events are relevant.\n    \n    References\n    ----------\n    .. [1] Weisstein, Eric W. \"Gamma Distribution.\" From MathWorld--A\n           Wolfram Web Resource.\n           https://mathworld.wolfram.com/GammaDistribution.html\n    .. [2] Wikipedia, \"Gamma distribution\",\n           https://en.wikipedia.org/wiki/Gamma_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> shape, scale = 2., 2.  # mean=4, std=2*sqrt(2)\n    >>> s = np.random.gamma(shape, scale, 1000)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> import scipy.special as sps  # doctest: +SKIP\n    >>> count, bins, ignored = plt.hist(s, 50, density=True)\n    >>> y = bins**(shape-1)*(np.exp(-bins/scale) /  # doctest: +SKIP\n    ...                      (sps.gamma(shape)*scale**shape))\n    >>> plt.plot(bins, y, linewidth=2, color='r')  # doctest: +SKIP\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "86db58b66030c739de7d15854e71124e10837a23cbc51065403cd4de19512374",
            "fields": [
                {
                    "id": "hyaewcf0",
                    "encoding": "",
                    "name": "shape",
                    "value": "",
                    "defaultValue": "",
                    "description": "The shape of the gamma distribution. Must be non-negative.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cuqaszla",
                    "encoding": "",
                    "name": "scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "The scale of the gamma distribution. Must be non-negative.\nDefault is equal to 1.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b_wfvwcu",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``shape`` and ``scale`` are both scalars.\nOtherwise, ``np.broadcast(shape, scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ckit6aa5",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.gamma",
                    "defaultValue": "numpy.random.gamma",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6kylafxh",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wjx573k2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "7izjjtg_",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0ygcu1aq",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bnjqg6q8",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1drijoc5",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "myapdbnd",
            "name": "random.geometric",
            "description": "geometric(p, size=None)\n    \n    Draw samples from the geometric distribution.\n    \n    Bernoulli trials are experiments with one of two outcomes:\n    success or failure (an example of such an experiment is flipping\n    a coin).  The geometric distribution models the number of trials\n    that must be run in order to achieve success.  It is therefore\n    supported on the positive integers, ``k = 1, 2, ...``.\n    \n    The probability mass function of the geometric distribution is\n    \n    .. math:: f(k) = (1 - p)^{k - 1} p\n    \n    where `p` is the probability of success of an individual trial.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.geometric`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    p : float or array_like of floats\n        The probability of success of an individual trial.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``p`` is a scalar.  Otherwise,\n        ``np.array(p).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized geometric distribution.\n    \n    See Also\n    --------\n    random.Generator.geometric: which should be used for new code.\n    \n    Examples\n    --------\n    Draw ten thousand values from the geometric distribution,\n    with the probability of an individual success equal to 0.35:\n    \n    >>> z = np.random.geometric(p=0.35, size=10000)\n    \n    How many trials succeeded after a single run?\n    \n    >>> (z == 1).sum() / 10000.\n    0.34889999999999999 #random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "78a5c60918e18ab4f4e7156642af67a05028a750cc40a10253e2fb9c8b1d3c4b",
            "fields": [
                {
                    "id": "zb671cfz",
                    "encoding": "",
                    "name": "p",
                    "value": "",
                    "defaultValue": "",
                    "description": "The probability of success of an individual trial.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tjzlcy4w",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``p`` is a scalar.  Otherwise,\n``np.array(p).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mlphstkg",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.geometric",
                    "defaultValue": "numpy.random.geometric",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cb7_y04g",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "74dnpuxk",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "5wxnbsw8",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f1uk8ejk",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xf9uqkos",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zigv4fhq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "u6xyzzzs",
            "name": "random.get_state",
            "description": "get_state(legacy=True)\n    \n    Return a tuple representing the internal state of the generator.\n    \n    For more details, see `set_state`.\n    \n    Parameters\n    ----------\n    legacy : bool, optional\n        Flag indicating to return a legacy tuple state when the BitGenerator\n        is MT19937, instead of a dict. Raises ValueError if the underlying\n        bit generator is not an instance of MT19937.\n    \n    Returns\n    -------\n    out : {tuple(str, ndarray of 624 uints, int, int, float), dict}\n        If legacy is True, the returned tuple has the following items:\n    \n        1. the string 'MT19937'.\n        2. a 1-D array of 624 unsigned integer keys.\n        3. an integer ``pos``.\n        4. an integer ``has_gauss``.\n        5. a float ``cached_gaussian``.\n    \n        If `legacy` is False, or the BitGenerator is not MT19937, then\n        state is returned as a dictionary.\n    \n    See Also\n    --------\n    set_state\n    \n    Notes\n    -----\n    `set_state` and `get_state` are not needed to work with any of the\n    random distributions in NumPy. If the internal state is manually altered,\n    the user should know exactly what he/she is doing.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1d5ad00ba9e4735ab8776e23325debf805d8a1f66b1449d742c4b4a2082a0e32",
            "fields": [
                {
                    "id": "kzzl0v6d",
                    "encoding": "",
                    "name": "legacy",
                    "value": true,
                    "defaultValue": true,
                    "description": "Flag indicating to return a legacy tuple state when the BitGenerator\nis MT19937, instead of a dict. Raises ValueError if the underlying\nbit generator is not an instance of MT19937.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r148qhfr",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.get_state",
                    "defaultValue": "numpy.random.get_state",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n2_etn6t",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hd5dz3zb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "fcb6thft",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9jph_4tb",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i1bqzqfr",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d7ufxj59",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "urgoli8e",
            "name": "random.gumbel",
            "description": "gumbel(loc=0.0, scale=1.0, size=None)\n    \n    Draw samples from a Gumbel distribution.\n    \n    Draw samples from a Gumbel distribution with specified location and\n    scale.  For more information on the Gumbel distribution, see\n    Notes and References below.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.gumbel`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    loc : float or array_like of floats, optional\n        The location of the mode of the distribution. Default is 0.\n    scale : float or array_like of floats, optional\n        The scale parameter of the distribution. Default is 1. Must be non-\n        negative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``loc`` and ``scale`` are both scalars.\n        Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Gumbel distribution.\n    \n    See Also\n    --------\n    scipy.stats.gumbel_l\n    scipy.stats.gumbel_r\n    scipy.stats.genextreme\n    weibull\n    random.Generator.gumbel: which should be used for new code.\n    \n    Notes\n    -----\n    The Gumbel (or Smallest Extreme Value (SEV) or the Smallest Extreme\n    Value Type I) distribution is one of a class of Generalized Extreme\n    Value (GEV) distributions used in modeling extreme value problems.\n    The Gumbel is a special case of the Extreme Value Type I distribution\n    for maximums from distributions with \"exponential-like\" tails.\n    \n    The probability density for the Gumbel distribution is\n    \n    .. math:: p(x) = \\frac{e^{-(x - \\mu)/ \\beta}}{\\beta} e^{ -e^{-(x - \\mu)/\n              \\beta}},\n    \n    where :math:`\\mu` is the mode, a location parameter, and\n    :math:`\\beta` is the scale parameter.\n    \n    The Gumbel (named for German mathematician Emil Julius Gumbel) was used\n    very early in the hydrology literature, for modeling the occurrence of\n    flood events. It is also used for modeling maximum wind speed and\n    rainfall rates.  It is a \"fat-tailed\" distribution - the probability of\n    an event in the tail of the distribution is larger than if one used a\n    Gaussian, hence the surprisingly frequent occurrence of 100-year\n    floods. Floods were initially modeled as a Gaussian process, which\n    underestimated the frequency of extreme events.\n    \n    It is one of a class of extreme value distributions, the Generalized\n    Extreme Value (GEV) distributions, which also includes the Weibull and\n    Frechet.\n    \n    The function has a mean of :math:`\\mu + 0.57721\\beta` and a variance\n    of :math:`\\frac{\\pi^2}{6}\\beta^2`.\n    \n    References\n    ----------\n    .. [1] Gumbel, E. J., \"Statistics of Extremes,\"\n           New York: Columbia University Press, 1958.\n    .. [2] Reiss, R.-D. and Thomas, M., \"Statistical Analysis of Extreme\n           Values from Insurance, Finance, Hydrology and Other Fields,\"\n           Basel: Birkhauser Verlag, 2001.\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> mu, beta = 0, 0.1 # location and scale\n    >>> s = np.random.gumbel(mu, beta, 1000)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, ignored = plt.hist(s, 30, density=True)\n    >>> plt.plot(bins, (1/beta)*np.exp(-(bins - mu)/beta)\n    ...          * np.exp( -np.exp( -(bins - mu) /beta) ),\n    ...          linewidth=2, color='r')\n    >>> plt.show()\n    \n    Show how an extreme value distribution can arise from a Gaussian process\n    and compare to a Gaussian:\n    \n    >>> means = []\n    >>> maxima = []\n    >>> for i in range(0,1000) :\n    ...    a = np.random.normal(mu, beta, 1000)\n    ...    means.append(a.mean())\n    ...    maxima.append(a.max())\n    >>> count, bins, ignored = plt.hist(maxima, 30, density=True)\n    >>> beta = np.std(maxima) * np.sqrt(6) / np.pi\n    >>> mu = np.mean(maxima) - 0.57721*beta\n    >>> plt.plot(bins, (1/beta)*np.exp(-(bins - mu)/beta)\n    ...          * np.exp(-np.exp(-(bins - mu)/beta)),\n    ...          linewidth=2, color='r')\n    >>> plt.plot(bins, 1/(beta * np.sqrt(2 * np.pi))\n    ...          * np.exp(-(bins - mu)**2 / (2 * beta**2)),\n    ...          linewidth=2, color='g')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c1bdf96dfe8d63dceda6b2fcc4918d66312e24f75ff3741424b0788a6df2059b",
            "fields": [
                {
                    "id": "knr5n5bg",
                    "encoding": "",
                    "name": "loc",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "The location of the mode of the distribution. Default is 0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o8a62p6a",
                    "encoding": "",
                    "name": "scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "The scale parameter of the distribution. Default is 1. Must be non-\nnegative.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ooub6y1e",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``loc`` and ``scale`` are both scalars.\nOtherwise, ``np.broadcast(loc, scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0avxe0u7",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.gumbel",
                    "defaultValue": "numpy.random.gumbel",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i4ozil02",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "31mmspgt",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "feo_ekpl",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wcy2gzg4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "07rrh6d4",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bz9q8v53",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "blvhalkl",
            "name": "random.hypergeometric",
            "description": "hypergeometric(ngood, nbad, nsample, size=None)\n    \n    Draw samples from a Hypergeometric distribution.\n    \n    Samples are drawn from a hypergeometric distribution with specified\n    parameters, `ngood` (ways to make a good selection), `nbad` (ways to make\n    a bad selection), and `nsample` (number of items sampled, which is less\n    than or equal to the sum ``ngood + nbad``).\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.hypergeometric`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    ngood : int or array_like of ints\n        Number of ways to make a good selection.  Must be nonnegative.\n    nbad : int or array_like of ints\n        Number of ways to make a bad selection.  Must be nonnegative.\n    nsample : int or array_like of ints\n        Number of items sampled.  Must be at least 1 and at most\n        ``ngood + nbad``.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if `ngood`, `nbad`, and `nsample`\n        are all scalars.  Otherwise, ``np.broadcast(ngood, nbad, nsample).size``\n        samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized hypergeometric distribution. Each\n        sample is the number of good items within a randomly selected subset of\n        size `nsample` taken from a set of `ngood` good items and `nbad` bad items.\n    \n    See Also\n    --------\n    scipy.stats.hypergeom : probability density function, distribution or\n        cumulative density function, etc.\n    random.Generator.hypergeometric: which should be used for new code.\n    \n    Notes\n    -----\n    The probability mass function (PMF) for the Hypergeometric distribution is\n    \n    .. math:: P(x) = \\frac{\\binom{g}{x}\\binom{b}{n-x}}{\\binom{g+b}{n}},\n    \n    where :math:`0 \\le x \\le n` and :math:`n-b \\le x \\le g`\n    \n    for P(x) the probability of ``x`` good results in the drawn sample,\n    g = `ngood`, b = `nbad`, and n = `nsample`.\n    \n    Consider an urn with black and white marbles in it, `ngood` of them\n    are black and `nbad` are white. If you draw `nsample` balls without\n    replacement, then the hypergeometric distribution describes the\n    distribution of black balls in the drawn sample.\n    \n    Note that this distribution is very similar to the binomial\n    distribution, except that in this case, samples are drawn without\n    replacement, whereas in the Binomial case samples are drawn with\n    replacement (or the sample space is infinite). As the sample space\n    becomes large, this distribution approaches the binomial.\n    \n    References\n    ----------\n    .. [1] Lentner, Marvin, \"Elementary Applied Statistics\", Bogden\n           and Quigley, 1972.\n    .. [2] Weisstein, Eric W. \"Hypergeometric Distribution.\" From\n           MathWorld--A Wolfram Web Resource.\n           https://mathworld.wolfram.com/HypergeometricDistribution.html\n    .. [3] Wikipedia, \"Hypergeometric distribution\",\n           https://en.wikipedia.org/wiki/Hypergeometric_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> ngood, nbad, nsamp = 100, 2, 10\n    # number of good, number of bad, and number of samples\n    >>> s = np.random.hypergeometric(ngood, nbad, nsamp, 1000)\n    >>> from matplotlib.pyplot import hist\n    >>> hist(s)\n    #   note that it is very unlikely to grab both bad items\n    \n    Suppose you have an urn with 15 white and 15 black marbles.\n    If you pull 15 marbles at random, how likely is it that\n    12 or more of them are one color?\n    \n    >>> s = np.random.hypergeometric(15, 15, 15, 100000)\n    >>> sum(s>=12)/100000. + sum(s<=3)/100000.\n    #   answer = 0.003 ... pretty unlikely!",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d0cd3ffb48020f7a23b3e7e081902908cde195a25ef9f51d05453931e83239a8",
            "fields": [
                {
                    "id": "vb75kqn_",
                    "encoding": "",
                    "name": "ngood",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of ways to make a good selection.  Must be nonnegative.",
                    "type": "int or arraylike of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5ioqus10",
                    "encoding": "",
                    "name": "nbad",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of ways to make a bad selection.  Must be nonnegative.",
                    "type": "int or arraylike of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f085m3jg",
                    "encoding": "",
                    "name": "nsample",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of items sampled.  Must be at least 1 and at most\n``ngood + nbad``.",
                    "type": "int or arraylike of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hn6axzu0",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if `ngood`, `nbad`, and `nsample`\nare all scalars.  Otherwise, ``np.broadcast(ngood, nbad, nsample).size``\nsamples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kw80rpzq",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.hypergeometric",
                    "defaultValue": "numpy.random.hypergeometric",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ovh29x7c",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lxwxemrh",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "1q207o4e",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p8jy65se",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dmfcvpwv",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ihg8bdq9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "1ify15f2",
            "name": "random.laplace",
            "description": "laplace(loc=0.0, scale=1.0, size=None)\n    \n    Draw samples from the Laplace or double exponential distribution with\n    specified location (or mean) and scale (decay).\n    \n    The Laplace distribution is similar to the Gaussian/normal distribution,\n    but is sharper at the peak and has fatter tails. It represents the\n    difference between two independent, identically distributed exponential\n    random variables.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.laplace`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    loc : float or array_like of floats, optional\n        The position, :math:`\\mu`, of the distribution peak. Default is 0.\n    scale : float or array_like of floats, optional\n        :math:`\\lambda`, the exponential decay. Default is 1. Must be non-\n        negative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``loc`` and ``scale`` are both scalars.\n        Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Laplace distribution.\n    \n    See Also\n    --------\n    random.Generator.laplace: which should be used for new code.\n    \n    Notes\n    -----\n    It has the probability density function\n    \n    .. math:: f(x; \\mu, \\lambda) = \\frac{1}{2\\lambda}\n                                   \\exp\\left(-\\frac{|x - \\mu|}{\\lambda}\\right).\n    \n    The first law of Laplace, from 1774, states that the frequency\n    of an error can be expressed as an exponential function of the\n    absolute magnitude of the error, which leads to the Laplace\n    distribution. For many problems in economics and health\n    sciences, this distribution seems to model the data better\n    than the standard Gaussian distribution.\n    \n    References\n    ----------\n    .. [1] Abramowitz, M. and Stegun, I. A. (Eds.). \"Handbook of\n           Mathematical Functions with Formulas, Graphs, and Mathematical\n           Tables, 9th printing,\" New York: Dover, 1972.\n    .. [2] Kotz, Samuel, et. al. \"The Laplace Distribution and\n           Generalizations, \" Birkhauser, 2001.\n    .. [3] Weisstein, Eric W. \"Laplace Distribution.\"\n           From MathWorld--A Wolfram Web Resource.\n           https://mathworld.wolfram.com/LaplaceDistribution.html\n    .. [4] Wikipedia, \"Laplace distribution\",\n           https://en.wikipedia.org/wiki/Laplace_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution\n    \n    >>> loc, scale = 0., 1.\n    >>> s = np.random.laplace(loc, scale, 1000)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, ignored = plt.hist(s, 30, density=True)\n    >>> x = np.arange(-8., 8., .01)\n    >>> pdf = np.exp(-abs(x-loc)/scale)/(2.*scale)\n    >>> plt.plot(x, pdf)\n    \n    Plot Gaussian for comparison:\n    \n    >>> g = (1/(scale * np.sqrt(2 * np.pi)) *\n    ...      np.exp(-(x - loc)**2 / (2 * scale**2)))\n    >>> plt.plot(x,g)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f92a4c2ce5c4396de62747973027b025eb5d53fe1213c7884821ac747e976570",
            "fields": [
                {
                    "id": "4tuofyud",
                    "encoding": "",
                    "name": "loc",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "The position, :math:`\\mu`, of the distribution peak. Default is 0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "onqu6p4t",
                    "encoding": "",
                    "name": "scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": ":math:`\\lambda`, the exponential decay. Default is 1. Must be non-\nnegative.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b0n39uto",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``loc`` and ``scale`` are both scalars.\nOtherwise, ``np.broadcast(loc, scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dbjrm_h7",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.laplace",
                    "defaultValue": "numpy.random.laplace",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "phkfnkzo",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0t14u_cr",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "8zzzcpeb",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n55c3pkj",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "euvxr6vt",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s8xpazsk",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "c241rhoy",
            "name": "random.logistic",
            "description": "logistic(loc=0.0, scale=1.0, size=None)\n    \n    Draw samples from a logistic distribution.\n    \n    Samples are drawn from a logistic distribution with specified\n    parameters, loc (location or mean, also median), and scale (>0).\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.logistic`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    loc : float or array_like of floats, optional\n        Parameter of the distribution. Default is 0.\n    scale : float or array_like of floats, optional\n        Parameter of the distribution. Must be non-negative.\n        Default is 1.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``loc`` and ``scale`` are both scalars.\n        Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized logistic distribution.\n    \n    See Also\n    --------\n    scipy.stats.logistic : probability density function, distribution or\n        cumulative density function, etc.\n    random.Generator.logistic: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density for the Logistic distribution is\n    \n    .. math:: P(x) = P(x) = \\frac{e^{-(x-\\mu)/s}}{s(1+e^{-(x-\\mu)/s})^2},\n    \n    where :math:`\\mu` = location and :math:`s` = scale.\n    \n    The Logistic distribution is used in Extreme Value problems where it\n    can act as a mixture of Gumbel distributions, in Epidemiology, and by\n    the World Chess Federation (FIDE) where it is used in the Elo ranking\n    system, assuming the performance of each player is a logistically\n    distributed random variable.\n    \n    References\n    ----------\n    .. [1] Reiss, R.-D. and Thomas M. (2001), \"Statistical Analysis of\n           Extreme Values, from Insurance, Finance, Hydrology and Other\n           Fields,\" Birkhauser Verlag, Basel, pp 132-133.\n    .. [2] Weisstein, Eric W. \"Logistic Distribution.\" From\n           MathWorld--A Wolfram Web Resource.\n           https://mathworld.wolfram.com/LogisticDistribution.html\n    .. [3] Wikipedia, \"Logistic-distribution\",\n           https://en.wikipedia.org/wiki/Logistic_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> loc, scale = 10, 1\n    >>> s = np.random.logistic(loc, scale, 10000)\n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, ignored = plt.hist(s, bins=50)\n    \n    #   plot against distribution\n    \n    >>> def logist(x, loc, scale):\n    ...     return np.exp((loc-x)/scale)/(scale*(1+np.exp((loc-x)/scale))**2)\n    >>> lgst_val = logist(bins, loc, scale)\n    >>> plt.plot(bins, lgst_val * count.max() / lgst_val.max())\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f1c2100eda9b6fc96b65e67553aff103ea0dd2a08bc9eb99be9ec29beb5b3bff",
            "fields": [
                {
                    "id": "_09j5ri1",
                    "encoding": "",
                    "name": "loc",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Parameter of the distribution. Default is 0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o5tl1cp2",
                    "encoding": "",
                    "name": "scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Parameter of the distribution. Must be non-negative.\nDefault is 1.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "113gb02q",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``loc`` and ``scale`` are both scalars.\nOtherwise, ``np.broadcast(loc, scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "34bfaexk",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.logistic",
                    "defaultValue": "numpy.random.logistic",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fl8ftq4v",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ez8i4ycs",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "8usc4s3l",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ru7noafw",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4_bdz9c0",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l6i0pxd4",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "fush1t48",
            "name": "random.lognormal",
            "description": "lognormal(mean=0.0, sigma=1.0, size=None)\n    \n    Draw samples from a log-normal distribution.\n    \n    Draw samples from a log-normal distribution with specified mean,\n    standard deviation, and array shape.  Note that the mean and standard\n    deviation are not the values for the distribution itself, but of the\n    underlying normal distribution it is derived from.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.lognormal`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    mean : float or array_like of floats, optional\n        Mean value of the underlying normal distribution. Default is 0.\n    sigma : float or array_like of floats, optional\n        Standard deviation of the underlying normal distribution. Must be\n        non-negative. Default is 1.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``mean`` and ``sigma`` are both scalars.\n        Otherwise, ``np.broadcast(mean, sigma).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized log-normal distribution.\n    \n    See Also\n    --------\n    scipy.stats.lognorm : probability density function, distribution,\n        cumulative density function, etc.\n    random.Generator.lognormal: which should be used for new code.\n    \n    Notes\n    -----\n    A variable `x` has a log-normal distribution if `log(x)` is normally\n    distributed.  The probability density function for the log-normal\n    distribution is:\n    \n    .. math:: p(x) = \\frac{1}{\\sigma x \\sqrt{2\\pi}}\n                     e^{(-\\frac{(ln(x)-\\mu)^2}{2\\sigma^2})}\n    \n    where :math:`\\mu` is the mean and :math:`\\sigma` is the standard\n    deviation of the normally distributed logarithm of the variable.\n    A log-normal distribution results if a random variable is the *product*\n    of a large number of independent, identically-distributed variables in\n    the same way that a normal distribution results if the variable is the\n    *sum* of a large number of independent, identically-distributed\n    variables.\n    \n    References\n    ----------\n    .. [1] Limpert, E., Stahel, W. A., and Abbt, M., \"Log-normal\n           Distributions across the Sciences: Keys and Clues,\"\n           BioScience, Vol. 51, No. 5, May, 2001.\n           https://stat.ethz.ch/~stahel/lognormal/bioscience.pdf\n    .. [2] Reiss, R.D. and Thomas, M., \"Statistical Analysis of Extreme\n           Values,\" Basel: Birkhauser Verlag, 2001, pp. 31-32.\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> mu, sigma = 3., 1. # mean and standard deviation\n    >>> s = np.random.lognormal(mu, sigma, 1000)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, ignored = plt.hist(s, 100, density=True, align='mid')\n    \n    >>> x = np.linspace(min(bins), max(bins), 10000)\n    >>> pdf = (np.exp(-(np.log(x) - mu)**2 / (2 * sigma**2))\n    ...        / (x * sigma * np.sqrt(2 * np.pi)))\n    \n    >>> plt.plot(x, pdf, linewidth=2, color='r')\n    >>> plt.axis('tight')\n    >>> plt.show()\n    \n    Demonstrate that taking the products of random samples from a uniform\n    distribution can be fit well by a log-normal probability density\n    function.\n    \n    >>> # Generate a thousand samples: each is the product of 100 random\n    >>> # values, drawn from a normal distribution.\n    >>> b = []\n    >>> for i in range(1000):\n    ...    a = 10. + np.random.standard_normal(100)\n    ...    b.append(np.prod(a))\n    \n    >>> b = np.array(b) / np.min(b) # scale values to be positive\n    >>> count, bins, ignored = plt.hist(b, 100, density=True, align='mid')\n    >>> sigma = np.std(np.log(b))\n    >>> mu = np.mean(np.log(b))\n    \n    >>> x = np.linspace(min(bins), max(bins), 10000)\n    >>> pdf = (np.exp(-(np.log(x) - mu)**2 / (2 * sigma**2))\n    ...        / (x * sigma * np.sqrt(2 * np.pi)))\n    \n    >>> plt.plot(x, pdf, color='r', linewidth=2)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e7d70994d64ab867eea52c260aa5785e26e079c0fff2156372463fb4b75db9e3",
            "fields": [
                {
                    "id": "wv0wmfyc",
                    "encoding": "",
                    "name": "mean",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Mean value of the underlying normal distribution. Default is 0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2wx63ncx",
                    "encoding": "",
                    "name": "sigma",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Standard deviation of the underlying normal distribution. Must be\nnon-negative. Default is 1.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "02tqthnm",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``mean`` and ``sigma`` are both scalars.\nOtherwise, ``np.broadcast(mean, sigma).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v_tzvvcp",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.lognormal",
                    "defaultValue": "numpy.random.lognormal",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dc8jbf9k",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fpxm2fqx",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "fogp49kq",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6eyy8qte",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "83urud0i",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yt8z9512",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "msa49btr",
            "name": "random.logseries",
            "description": "logseries(p, size=None)\n    \n    Draw samples from a logarithmic series distribution.\n    \n    Samples are drawn from a log series distribution with specified\n    shape parameter, 0 <= ``p`` < 1.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.logseries`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    p : float or array_like of floats\n        Shape parameter for the distribution.  Must be in the range [0, 1).\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``p`` is a scalar.  Otherwise,\n        ``np.array(p).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized logarithmic series distribution.\n    \n    See Also\n    --------\n    scipy.stats.logser : probability density function, distribution or\n        cumulative density function, etc.\n    random.Generator.logseries: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density for the Log Series distribution is\n    \n    .. math:: P(k) = \\frac{-p^k}{k \\ln(1-p)},\n    \n    where p = probability.\n    \n    The log series distribution is frequently used to represent species\n    richness and occurrence, first proposed by Fisher, Corbet, and\n    Williams in 1943 [2].  It may also be used to model the numbers of\n    occupants seen in cars [3].\n    \n    References\n    ----------\n    .. [1] Buzas, Martin A.; Culver, Stephen J.,  Understanding regional\n           species diversity through the log series distribution of\n           occurrences: BIODIVERSITY RESEARCH Diversity & Distributions,\n           Volume 5, Number 5, September 1999 , pp. 187-195(9).\n    .. [2] Fisher, R.A,, A.S. Corbet, and C.B. Williams. 1943. The\n           relation between the number of species and the number of\n           individuals in a random sample of an animal population.\n           Journal of Animal Ecology, 12:42-58.\n    .. [3] D. J. Hand, F. Daly, D. Lunn, E. Ostrowski, A Handbook of Small\n           Data Sets, CRC Press, 1994.\n    .. [4] Wikipedia, \"Logarithmic distribution\",\n           https://en.wikipedia.org/wiki/Logarithmic_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> a = .6\n    >>> s = np.random.logseries(a, 10000)\n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, ignored = plt.hist(s)\n    \n    #   plot against distribution\n    \n    >>> def logseries(k, p):\n    ...     return -p**k/(k*np.log(1-p))\n    >>> plt.plot(bins, logseries(bins, a)*count.max()/\n    ...          logseries(bins, a).max(), 'r')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e61394dea0c4eaf5b15304c15d3f1e1494b4f97d965effe09c0674797c515078",
            "fields": [
                {
                    "id": "jhysoo7_",
                    "encoding": "",
                    "name": "p",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape parameter for the distribution.  Must be in the range [0, 1).",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qfv921ap",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``p`` is a scalar.  Otherwise,\n``np.array(p).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uqhoukkb",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.logseries",
                    "defaultValue": "numpy.random.logseries",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b1e53f4g",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cycjv6sb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "b_4v5i8y",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wcdt1ib1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "16mpdwws",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cp0pjdmk",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "bhn2y168",
            "name": "random.multinomial",
            "description": "multinomial(n, pvals, size=None)\n    \n    Draw samples from a multinomial distribution.\n    \n    The multinomial distribution is a multivariate generalization of the\n    binomial distribution.  Take an experiment with one of ``p``\n    possible outcomes.  An example of such an experiment is throwing a dice,\n    where the outcome can be 1 through 6.  Each sample drawn from the\n    distribution represents `n` such experiments.  Its values,\n    ``X_i = [X_0, X_1, ..., X_p]``, represent the number of times the\n    outcome was ``i``.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.multinomial`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    .. warning::\n      This function defaults to the C-long dtype, which is 32bit on windows\n      and otherwise 64bit on 64bit platforms (and 32bit on 32bit ones).\n      Since NumPy 2.0, NumPy's default integer is 32bit on 32bit platforms\n      and 64bit on 64bit platforms.\n    \n    \n    Parameters\n    ----------\n    n : int\n        Number of experiments.\n    pvals : sequence of floats, length p\n        Probabilities of each of the ``p`` different outcomes.  These\n        must sum to 1 (however, the last element is always assumed to\n        account for the remaining probability, as long as\n        ``sum(pvals[:-1]) <= 1)``.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    \n    Returns\n    -------\n    out : ndarray\n        The drawn samples, of shape *size*, if that was provided.  If not,\n        the shape is ``(N,)``.\n    \n        In other words, each entry ``out[i,j,...,:]`` is an N-dimensional\n        value drawn from the distribution.\n    \n    See Also\n    --------\n    random.Generator.multinomial: which should be used for new code.\n    \n    Examples\n    --------\n    Throw a dice 20 times:\n    \n    >>> np.random.multinomial(20, [1/6.]*6, size=1)\n    array([[4, 1, 7, 5, 2, 1]]) # random\n    \n    It landed 4 times on 1, once on 2, etc.\n    \n    Now, throw the dice 20 times, and 20 times again:\n    \n    >>> np.random.multinomial(20, [1/6.]*6, size=2)\n    array([[3, 4, 3, 3, 4, 3], # random\n           [2, 4, 3, 4, 0, 7]])\n    \n    For the first run, we threw 3 times 1, 4 times 2, etc.  For the second,\n    we threw 2 times 1, 4 times 2, etc.\n    \n    A loaded die is more likely to land on number 6:\n    \n    >>> np.random.multinomial(100, [1/7.]*5 + [2/7.])\n    array([11, 16, 14, 17, 16, 26]) # random\n    \n    The probability inputs should be normalized. As an implementation\n    detail, the value of the last entry is ignored and assumed to take\n    up any leftover probability mass, but this should not be relied on.\n    A biased coin which has twice as much weight on one side as on the\n    other should be sampled like so:\n    \n    >>> np.random.multinomial(100, [1.0 / 3, 2.0 / 3])  # RIGHT\n    array([38, 62]) # random\n    \n    not like:\n    \n    >>> np.random.multinomial(100, [1.0, 2.0])  # WRONG\n    Traceback (most recent call last):\n    ValueError: pvals < 0, pvals > 1 or pvals contains NaNs",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e5460ff6e3d77cfb967aaa061005de1cd6783f97dfefe60dac768aad8caf98f0",
            "fields": [
                {
                    "id": "9c7fy2ww",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of experiments.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sv0q2e8q",
                    "encoding": "",
                    "name": "pvals",
                    "value": "",
                    "defaultValue": "",
                    "description": "Probabilities of each of the ``p`` different outcomes.  These\nmust sum to 1 (however, the last element is always assumed to\naccount for the remaining probability, as long as\n``sum(pvals[:-1]) <= 1)``.",
                    "type": "sequence of floats, length p",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ael165qr",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ky8oteov",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.multinomial",
                    "defaultValue": "numpy.random.multinomial",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kjaydkez",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "irfpo9le",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ekdhliza",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u672ym75",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7evz5ugy",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xgvl_8g8",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "vbt0skbq",
            "name": "random.multivariate_normal",
            "description": "multivariate_normal(mean, cov, size=None, check_valid='warn', tol=1e-8)\n    \n    Draw random samples from a multivariate normal distribution.\n    \n    The multivariate normal, multinormal or Gaussian distribution is a\n    generalization of the one-dimensional normal distribution to higher\n    dimensions.  Such a distribution is specified by its mean and\n    covariance matrix.  These parameters are analogous to the mean\n    (average or \"center\") and variance (standard deviation, or \"width,\"\n    squared) of the one-dimensional normal distribution.\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.multivariate_normal`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    mean : 1-D array_like, of length N\n        Mean of the N-dimensional distribution.\n    cov : 2-D array_like, of shape (N, N)\n        Covariance matrix of the distribution. It must be symmetric and\n        positive-semidefinite for proper sampling.\n    size : int or tuple of ints, optional\n        Given a shape of, for example, ``(m,n,k)``, ``m*n*k`` samples are\n        generated, and packed in an `m`-by-`n`-by-`k` arrangement.  Because\n        each sample is `N`-dimensional, the output shape is ``(m,n,k,N)``.\n        If no shape is specified, a single (`N`-D) sample is returned.\n    check_valid : { 'warn', 'raise', 'ignore' }, optional\n        Behavior when the covariance matrix is not positive semidefinite.\n    tol : float, optional\n        Tolerance when checking the singular values in covariance matrix.\n        cov is cast to double before the check.\n    \n    Returns\n    -------\n    out : ndarray\n        The drawn samples, of shape *size*, if that was provided.  If not,\n        the shape is ``(N,)``.\n    \n        In other words, each entry ``out[i,j,...,:]`` is an N-dimensional\n        value drawn from the distribution.\n    \n    See Also\n    --------\n    random.Generator.multivariate_normal: which should be used for new code.\n    \n    Notes\n    -----\n    The mean is a coordinate in N-dimensional space, which represents the\n    location where samples are most likely to be generated.  This is\n    analogous to the peak of the bell curve for the one-dimensional or\n    univariate normal distribution.\n    \n    Covariance indicates the level to which two variables vary together.\n    From the multivariate normal distribution, we draw N-dimensional\n    samples, :math:`X = [x_1, x_2, ... x_N]`.  The covariance matrix\n    element :math:`C_{ij}` is the covariance of :math:`x_i` and :math:`x_j`.\n    The element :math:`C_{ii}` is the variance of :math:`x_i` (i.e. its\n    \"spread\").\n    \n    Instead of specifying the full covariance matrix, popular\n    approximations include:\n    \n    - Spherical covariance (`cov` is a multiple of the identity matrix)\n    - Diagonal covariance (`cov` has non-negative elements, and only on\n      the diagonal)\n    \n    This geometrical property can be seen in two dimensions by plotting\n    generated data-points:\n    \n    >>> mean = [0, 0]\n    >>> cov = [[1, 0], [0, 100]]  # diagonal covariance\n    \n    Diagonal covariance means that points are oriented along x or y-axis:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> x, y = np.random.multivariate_normal(mean, cov, 5000).T\n    >>> plt.plot(x, y, 'x')\n    >>> plt.axis('equal')\n    >>> plt.show()\n    \n    Note that the covariance matrix must be positive semidefinite (a.k.a.\n    nonnegative-definite). Otherwise, the behavior of this method is\n    undefined and backwards compatibility is not guaranteed.\n    \n    References\n    ----------\n    .. [1] Papoulis, A., \"Probability, Random Variables, and Stochastic\n           Processes,\" 3rd ed., New York: McGraw-Hill, 1991.\n    .. [2] Duda, R. O., Hart, P. E., and Stork, D. G., \"Pattern\n           Classification,\" 2nd ed., New York: Wiley, 2001.\n    \n    Examples\n    --------\n    >>> mean = (1, 2)\n    >>> cov = [[1, 0], [0, 1]]\n    >>> x = np.random.multivariate_normal(mean, cov, (3, 3))\n    >>> x.shape\n    (3, 3, 2)\n    \n    Here we generate 800 samples from the bivariate normal distribution\n    with mean [0, 0] and covariance matrix [[6, -3], [-3, 3.5]].  The\n    expected variances of the first and second components of the sample\n    are 6 and 3.5, respectively, and the expected correlation\n    coefficient is -3/sqrt(6*3.5) \u2248 -0.65465.\n    \n    >>> cov = np.array([[6, -3], [-3, 3.5]])\n    >>> pts = np.random.multivariate_normal([0, 0], cov, size=800)\n    \n    Check that the mean, covariance, and correlation coefficient of the\n    sample are close to the expected values:\n    \n    >>> pts.mean(axis=0)\n    array([ 0.0326911 , -0.01280782])  # may vary\n    >>> np.cov(pts.T)\n    array([[ 5.96202397, -2.85602287],\n           [-2.85602287,  3.47613949]])  # may vary\n    >>> np.corrcoef(pts.T)[0, 1]\n    -0.6273591314603949  # may vary\n    \n    We can visualize this data with a scatter plot.  The orientation\n    of the point cloud illustrates the negative correlation of the\n    components of this sample.\n    \n    >>> import matplotlib.pyplot as plt\n    >>> plt.plot(pts[:, 0], pts[:, 1], '.', alpha=0.5)\n    >>> plt.axis('equal')\n    >>> plt.grid()\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "68da7318584888f92bec71881b262ff0c5a05775c2fe46be78de9f38b9131bec",
            "fields": [
                {
                    "id": "5si811mc",
                    "encoding": "",
                    "name": "mean",
                    "value": "",
                    "defaultValue": "",
                    "description": "Mean of the N-dimensional distribution.",
                    "type": "1-D arraylike, of length N",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9sj2skco",
                    "encoding": "",
                    "name": "cov",
                    "value": "",
                    "defaultValue": "",
                    "description": "Covariance matrix of the distribution. It must be symmetric and\npositive-semidefinite for proper sampling.",
                    "type": "2-D arraylike, of shape (N, N)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o7cfk2i9",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Given a shape of, for example, ``(m,n,k)``, ``m*n*k`` samples are\ngenerated, and packed in an `m`-by-`n`-by-`k` arrangement.  Because\neach sample is `N`-dimensional, the output shape is ``(m,n,k,N)``.\nIf no shape is specified, a single (`N`-D) sample is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "__xwztyc",
                    "encoding": "",
                    "name": "check_valid",
                    "value": "warn",
                    "defaultValue": "warn",
                    "description": "Behavior when the covariance matrix is not positive semidefinite.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uj0jzh_o",
                    "encoding": "",
                    "name": "tol",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "Tolerance when checking the singular values in covariance matrix.\ncov is cast to double before the check.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vhfjq4ts",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.multivariate_normal",
                    "defaultValue": "numpy.random.multivariate_normal",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nfoxm5o1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9_xam1k_",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "577a9nn8",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hhc6jvnx",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r5vu7hs2",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "47hsyo7u",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "z96d8dzd",
            "name": "random.negative_binomial",
            "description": "negative_binomial(n, p, size=None)\n    \n    Draw samples from a negative binomial distribution.\n    \n    Samples are drawn from a negative binomial distribution with specified\n    parameters, `n` successes and `p` probability of success where `n`\n    is > 0 and `p` is in the interval [0, 1].\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.negative_binomial`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    n : float or array_like of floats\n        Parameter of the distribution, > 0.\n    p : float or array_like of floats\n        Parameter of the distribution, >= 0 and <=1.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``n`` and ``p`` are both scalars.\n        Otherwise, ``np.broadcast(n, p).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized negative binomial distribution,\n        where each sample is equal to N, the number of failures that\n        occurred before a total of n successes was reached.\n    \n    .. warning::\n       This function returns the C-long dtype, which is 32bit on windows\n       and otherwise 64bit on 64bit platforms (and 32bit on 32bit ones).\n       Since NumPy 2.0, NumPy's default integer is 32bit on 32bit platforms\n       and 64bit on 64bit platforms.\n    \n    See Also\n    --------\n    random.Generator.negative_binomial: which should be used for new code.\n    \n    Notes\n    -----\n    The probability mass function of the negative binomial distribution is\n    \n    .. math:: P(N;n,p) = \\frac{\\Gamma(N+n)}{N!\\Gamma(n)}p^{n}(1-p)^{N},\n    \n    where :math:`n` is the number of successes, :math:`p` is the\n    probability of success, :math:`N+n` is the number of trials, and\n    :math:`\\Gamma` is the gamma function. When :math:`n` is an integer,\n    :math:`\\frac{\\Gamma(N+n)}{N!\\Gamma(n)} = \\binom{N+n-1}{N}`, which is\n    the more common form of this term in the pmf. The negative\n    binomial distribution gives the probability of N failures given n\n    successes, with a success on the last trial.\n    \n    If one throws a die repeatedly until the third time a \"1\" appears,\n    then the probability distribution of the number of non-\"1\"s that\n    appear before the third \"1\" is a negative binomial distribution.\n    \n    References\n    ----------\n    .. [1] Weisstein, Eric W. \"Negative Binomial Distribution.\" From\n           MathWorld--A Wolfram Web Resource.\n           https://mathworld.wolfram.com/NegativeBinomialDistribution.html\n    .. [2] Wikipedia, \"Negative binomial distribution\",\n           https://en.wikipedia.org/wiki/Negative_binomial_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    A real world example. A company drills wild-cat oil\n    exploration wells, each with an estimated probability of\n    success of 0.1.  What is the probability of having one success\n    for each successive well, that is what is the probability of a\n    single success after drilling 5 wells, after 6 wells, etc.?\n    \n    >>> s = np.random.negative_binomial(1, 0.1, 100000)\n    >>> for i in range(1, 11): # doctest: +SKIP\n    ...    probability = sum(s<i) / 100000.\n    ...    print(i, \"wells drilled, probability of one success =\", probability)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "71611f71f89c9efe164cbbe12f3ee2a426570940b823829a0600ad34bbd872d7",
            "fields": [
                {
                    "id": "vuta59pq",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "Parameter of the distribution, > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4mekt6zp",
                    "encoding": "",
                    "name": "p",
                    "value": "",
                    "defaultValue": "",
                    "description": "Parameter of the distribution, >= 0 and <=1.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0y4gv70s",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``n`` and ``p`` are both scalars.\nOtherwise, ``np.broadcast(n, p).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lw4r97d8",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.negative_binomial",
                    "defaultValue": "numpy.random.negative_binomial",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7b3upnnq",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "valm0asb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "rjkh0bvm",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0gu566l9",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sfogtnx1",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9bwhdut2",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ew7fbt_t",
            "name": "random.noncentral_chisquare",
            "description": "noncentral_chisquare(df, nonc, size=None)\n    \n    Draw samples from a noncentral chi-square distribution.\n    \n    The noncentral :math:`\\chi^2` distribution is a generalization of\n    the :math:`\\chi^2` distribution.\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.noncentral_chisquare`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    df : float or array_like of floats\n        Degrees of freedom, must be > 0.\n    nonc : float or array_like of floats\n        Non-centrality, must be non-negative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``df`` and ``nonc`` are both scalars.\n        Otherwise, ``np.broadcast(df, nonc).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized noncentral chi-square distribution.\n    \n    See Also\n    --------\n    random.Generator.noncentral_chisquare: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density function for the noncentral Chi-square\n    distribution is\n    \n    .. math:: P(x;df,nonc) = \\sum^{\\infty}_{i=0}\n                           \\frac{e^{-nonc/2}(nonc/2)^{i}}{i!}\n                           P_{Y_{df+2i}}(x),\n    \n    where :math:`Y_{q}` is the Chi-square with q degrees of freedom.\n    \n    References\n    ----------\n    .. [1] Wikipedia, \"Noncentral chi-squared distribution\"\n           https://en.wikipedia.org/wiki/Noncentral_chi-squared_distribution\n    \n    Examples\n    --------\n    Draw values from the distribution and plot the histogram\n    \n    >>> import matplotlib.pyplot as plt\n    >>> values = plt.hist(np.random.noncentral_chisquare(3, 20, 100000),\n    ...                   bins=200, density=True)\n    >>> plt.show()\n    \n    Draw values from a noncentral chisquare with very small noncentrality,\n    and compare to a chisquare.\n    \n    >>> plt.figure()\n    >>> values = plt.hist(np.random.noncentral_chisquare(3, .0000001, 100000),\n    ...                   bins=np.arange(0., 25, .1), density=True)\n    >>> values2 = plt.hist(np.random.chisquare(3, 100000),\n    ...                    bins=np.arange(0., 25, .1), density=True)\n    >>> plt.plot(values[1][0:-1], values[0]-values2[0], 'ob')\n    >>> plt.show()\n    \n    Demonstrate how large values of non-centrality lead to a more symmetric\n    distribution.\n    \n    >>> plt.figure()\n    >>> values = plt.hist(np.random.noncentral_chisquare(3, 20, 100000),\n    ...                   bins=200, density=True)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "dbd3fb44ac64118fe71032325e9805e55690c4e500a8799c074715a3127c723a",
            "fields": [
                {
                    "id": "af2sn9ti",
                    "encoding": "",
                    "name": "df",
                    "value": "",
                    "defaultValue": "",
                    "description": "Degrees of freedom, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w6sk4ms8",
                    "encoding": "",
                    "name": "nonc",
                    "value": "",
                    "defaultValue": "",
                    "description": "Non-centrality, must be non-negative.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "801dliv0",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``df`` and ``nonc`` are both scalars.\nOtherwise, ``np.broadcast(df, nonc).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "42888lw6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.noncentral_chisquare",
                    "defaultValue": "numpy.random.noncentral_chisquare",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8fiuczxi",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xl35_0ic",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "eoufwh_3",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "agdrd7k3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "upfquzhc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s4uw1dck",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "nubfvlqg",
            "name": "random.noncentral_f",
            "description": "noncentral_f(dfnum, dfden, nonc, size=None)\n    \n    Draw samples from the noncentral F distribution.\n    \n    Samples are drawn from an F distribution with specified parameters,\n    `dfnum` (degrees of freedom in numerator) and `dfden` (degrees of\n    freedom in denominator), where both parameters > 1.\n    `nonc` is the non-centrality parameter.\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.noncentral_f`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    dfnum : float or array_like of floats\n        Numerator degrees of freedom, must be > 0.\n    dfden : float or array_like of floats\n        Denominator degrees of freedom, must be > 0.\n    nonc : float or array_like of floats\n        Non-centrality parameter, the sum of the squares of the numerator\n        means, must be >= 0.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``dfnum``, ``dfden``, and ``nonc``\n        are all scalars.  Otherwise, ``np.broadcast(dfnum, dfden, nonc).size``\n        samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized noncentral Fisher distribution.\n    \n    See Also\n    --------\n    random.Generator.noncentral_f: which should be used for new code.\n    \n    Notes\n    -----\n    When calculating the power of an experiment (power = probability of\n    rejecting the null hypothesis when a specific alternative is true) the\n    non-central F statistic becomes important.  When the null hypothesis is\n    true, the F statistic follows a central F distribution. When the null\n    hypothesis is not true, then it follows a non-central F statistic.\n    \n    References\n    ----------\n    .. [1] Weisstein, Eric W. \"Noncentral F-Distribution.\"\n           From MathWorld--A Wolfram Web Resource.\n           https://mathworld.wolfram.com/NoncentralF-Distribution.html\n    .. [2] Wikipedia, \"Noncentral F-distribution\",\n           https://en.wikipedia.org/wiki/Noncentral_F-distribution\n    \n    Examples\n    --------\n    In a study, testing for a specific alternative to the null hypothesis\n    requires use of the Noncentral F distribution. We need to calculate the\n    area in the tail of the distribution that exceeds the value of the F\n    distribution for the null hypothesis.  We'll plot the two probability\n    distributions for comparison.\n    \n    >>> dfnum = 3 # between group deg of freedom\n    >>> dfden = 20 # within groups degrees of freedom\n    >>> nonc = 3.0\n    >>> nc_vals = np.random.noncentral_f(dfnum, dfden, nonc, 1000000)\n    >>> NF = np.histogram(nc_vals, bins=50, density=True)\n    >>> c_vals = np.random.f(dfnum, dfden, 1000000)\n    >>> F = np.histogram(c_vals, bins=50, density=True)\n    >>> import matplotlib.pyplot as plt\n    >>> plt.plot(F[1][1:], F[0])\n    >>> plt.plot(NF[1][1:], NF[0])\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e0073f814b2f9c85c73553edbd7752ee50d78c21d9eab5a99a8bbb86459bc896",
            "fields": [
                {
                    "id": "s0bazrx2",
                    "encoding": "",
                    "name": "dfnum",
                    "value": "",
                    "defaultValue": "",
                    "description": "Numerator degrees of freedom, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z3hkqn4w",
                    "encoding": "",
                    "name": "dfden",
                    "value": "",
                    "defaultValue": "",
                    "description": "Denominator degrees of freedom, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qmdv85zk",
                    "encoding": "",
                    "name": "nonc",
                    "value": "",
                    "defaultValue": "",
                    "description": "Non-centrality parameter, the sum of the squares of the numerator\nmeans, must be >= 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gb9ysx9b",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``dfnum``, ``dfden``, and ``nonc``\nare all scalars.  Otherwise, ``np.broadcast(dfnum, dfden, nonc).size``\nsamples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ewgl4t1a",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.noncentral_f",
                    "defaultValue": "numpy.random.noncentral_f",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "utmu53y_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h2jd7x2u",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "28zshetz",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t6q8fzr7",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "08opqy6r",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6t8cg8fl",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "s9r8579m",
            "name": "random.normal",
            "description": "normal(loc=0.0, scale=1.0, size=None)\n    \n    Draw random samples from a normal (Gaussian) distribution.\n    \n    The probability density function of the normal distribution, first\n    derived by De Moivre and 200 years later by both Gauss and Laplace\n    independently [2]_, is often called the bell curve because of\n    its characteristic shape (see the example below).\n    \n    The normal distributions occurs often in nature.  For example, it\n    describes the commonly occurring distribution of samples influenced\n    by a large number of tiny, random disturbances, each with its own\n    unique distribution [2]_.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.normal`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    loc : float or array_like of floats\n        Mean (\"centre\") of the distribution.\n    scale : float or array_like of floats\n        Standard deviation (spread or \"width\") of the distribution. Must be\n        non-negative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``loc`` and ``scale`` are both scalars.\n        Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized normal distribution.\n    \n    See Also\n    --------\n    scipy.stats.norm : probability density function, distribution or\n        cumulative density function, etc.\n    random.Generator.normal: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density for the Gaussian distribution is\n    \n    .. math:: p(x) = \\frac{1}{\\sqrt{ 2 \\pi \\sigma^2 }}\n                     e^{ - \\frac{ (x - \\mu)^2 } {2 \\sigma^2} },\n    \n    where :math:`\\mu` is the mean and :math:`\\sigma` the standard\n    deviation. The square of the standard deviation, :math:`\\sigma^2`,\n    is called the variance.\n    \n    The function has its peak at the mean, and its \"spread\" increases with\n    the standard deviation (the function reaches 0.607 times its maximum at\n    :math:`x + \\sigma` and :math:`x - \\sigma` [2]_).  This implies that\n    normal is more likely to return samples lying close to the mean, rather\n    than those far away.\n    \n    References\n    ----------\n    .. [1] Wikipedia, \"Normal distribution\",\n           https://en.wikipedia.org/wiki/Normal_distribution\n    .. [2] P. R. Peebles Jr., \"Central Limit Theorem\" in \"Probability,\n           Random Variables and Random Signal Principles\", 4th ed., 2001,\n           pp. 51, 51, 125.\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> mu, sigma = 0, 0.1 # mean and standard deviation\n    >>> s = np.random.normal(mu, sigma, 1000)\n    \n    Verify the mean and the standard deviation:\n    \n    >>> abs(mu - np.mean(s))\n    0.0  # may vary\n    \n    >>> abs(sigma - np.std(s, ddof=1))\n    0.0  # may vary\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, ignored = plt.hist(s, 30, density=True)\n    >>> plt.plot(bins, 1/(sigma * np.sqrt(2 * np.pi)) *\n    ...                np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    ...          linewidth=2, color='r')\n    >>> plt.show()\n    \n    Two-by-four array of samples from the normal distribution with\n    mean 3 and standard deviation 2.5:\n    \n    >>> np.random.normal(3, 2.5, size=(2, 4))\n    array([[-4.49401501,  4.00950034, -1.81814867,  7.29718677],   # random\n           [ 0.39924804,  4.68456316,  4.99394529,  4.84057254]])  # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3779de2b1d8869c1a7835724b85bd4588703e11c7a635837df692e1dd839802d",
            "fields": [
                {
                    "id": "t2nnxne0",
                    "encoding": "",
                    "name": "loc",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Mean (\"centre\") of the distribution.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qkqjud1w",
                    "encoding": "",
                    "name": "scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Standard deviation (spread or \"width\") of the distribution. Must be\nnon-negative.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "quk3vkev",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``loc`` and ``scale`` are both scalars.\nOtherwise, ``np.broadcast(loc, scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cfkb8n8l",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.normal",
                    "defaultValue": "numpy.random.normal",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "njdp_9am",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4wgn80tm",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "usm3rl6u",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s0csb_dh",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j3pmp_fc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "whrtxtdv",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "mldr1adc",
            "name": "random.pareto",
            "description": "pareto(a, size=None)\n    \n    Draw samples from a Pareto II or Lomax distribution with\n    specified shape.\n    \n    The Lomax or Pareto II distribution is a shifted Pareto\n    distribution. The classical Pareto distribution can be\n    obtained from the Lomax distribution by adding 1 and\n    multiplying by the scale parameter ``m`` (see Notes).  The\n    smallest value of the Lomax distribution is zero while for the\n    classical Pareto distribution it is ``mu``, where the standard\n    Pareto distribution has location ``mu = 1``.  Lomax can also\n    be considered as a simplified version of the Generalized\n    Pareto distribution (available in SciPy), with the scale set\n    to one and the location set to zero.\n    \n    The Pareto distribution must be greater than zero, and is\n    unbounded above.  It is also known as the \"80-20 rule\".  In\n    this distribution, 80 percent of the weights are in the lowest\n    20 percent of the range, while the other 20 percent fill the\n    remaining 80 percent of the range.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.pareto`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    a : float or array_like of floats\n        Shape of the distribution. Must be positive.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``a`` is a scalar.  Otherwise,\n        ``np.array(a).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Pareto distribution.\n    \n    See Also\n    --------\n    scipy.stats.lomax : probability density function, distribution or\n        cumulative density function, etc.\n    scipy.stats.genpareto : probability density function, distribution or\n        cumulative density function, etc.\n    random.Generator.pareto: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density for the Pareto distribution is\n    \n    .. math:: p(x) = \\frac{am^a}{x^{a+1}}\n    \n    where :math:`a` is the shape and :math:`m` the scale.\n    \n    The Pareto distribution, named after the Italian economist\n    Vilfredo Pareto, is a power law probability distribution\n    useful in many real world problems.  Outside the field of\n    economics it is generally referred to as the Bradford\n    distribution. Pareto developed the distribution to describe\n    the distribution of wealth in an economy.  It has also found\n    use in insurance, web page access statistics, oil field sizes,\n    and many other problems, including the download frequency for\n    projects in Sourceforge [1]_.  It is one of the so-called\n    \"fat-tailed\" distributions.\n    \n    References\n    ----------\n    .. [1] Francis Hunt and Paul Johnson, On the Pareto Distribution of\n           Sourceforge projects.\n    .. [2] Pareto, V. (1896). Course of Political Economy. Lausanne.\n    .. [3] Reiss, R.D., Thomas, M.(2001), Statistical Analysis of Extreme\n           Values, Birkhauser Verlag, Basel, pp 23-30.\n    .. [4] Wikipedia, \"Pareto distribution\",\n           https://en.wikipedia.org/wiki/Pareto_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> a, m = 3., 2.  # shape and mode\n    >>> s = (np.random.pareto(a, 1000) + 1) * m\n    \n    Display the histogram of the samples, along with the probability\n    density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, _ = plt.hist(s, 100, density=True)\n    >>> fit = a*m**a / bins**(a+1)\n    >>> plt.plot(bins, max(count)*fit/max(fit), linewidth=2, color='r')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "058ec548022d2cd0dc593884778af6e88c593621fdeeefd43eb572105caa2200",
            "fields": [
                {
                    "id": "rf_nlte_",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape of the distribution. Must be positive.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0_g276lb",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``a`` is a scalar.  Otherwise,\n``np.array(a).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lypwqx0h",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.pareto",
                    "defaultValue": "numpy.random.pareto",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uy1ocme5",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b5cu5qw3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "cr52zme8",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8behe6sh",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zr99cpix",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dzjavjtt",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "c4cxad3s",
            "name": "random.permutation",
            "description": "permutation(x)\n    \n    Randomly permute a sequence, or return a permuted range.\n    \n    If `x` is a multi-dimensional array, it is only shuffled along its\n    first index.\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.permutation`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    x : int or array_like\n        If `x` is an integer, randomly permute ``np.arange(x)``.\n        If `x` is an array, make a copy and shuffle the elements\n        randomly.\n    \n    Returns\n    -------\n    out : ndarray\n        Permuted sequence or array range.\n    \n    See Also\n    --------\n    random.Generator.permutation: which should be used for new code.\n    \n    Examples\n    --------\n    >>> np.random.permutation(10)\n    array([1, 7, 4, 3, 0, 9, 2, 5, 8, 6]) # random\n    \n    >>> np.random.permutation([1, 4, 9, 12, 15])\n    array([15,  1,  9,  4, 12]) # random\n    \n    >>> arr = np.arange(9).reshape((3, 3))\n    >>> np.random.permutation(arr)\n    array([[6, 7, 8], # random\n           [0, 1, 2],\n           [3, 4, 5]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "42718b163776f9d5a3f45251dba77f0566d7b0fcfa4071441dfb4713e93eaa1d",
            "fields": [
                {
                    "id": "q6mfvjl4",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "If `x` is an integer, randomly permute ``np.arange(x)``.\nIf `x` is an array, make a copy and shuffle the elements\nrandomly.",
                    "type": "int or arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bl048_gx",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.permutation",
                    "defaultValue": "numpy.random.permutation",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_1fl7xaq",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ffntkdsa",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "nzbjpkv1",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lao36us7",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ombs8lla",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "67sw3off",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "n18uljr7",
            "name": "random.poisson",
            "description": "poisson(lam=1.0, size=None)\n    \n    Draw samples from a Poisson distribution.\n    \n    The Poisson distribution is the limit of the binomial distribution\n    for large N.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.poisson`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    lam : float or array_like of floats\n        Expected number of events occurring in a fixed-time interval,\n        must be >= 0. A sequence must be broadcastable over the requested\n        size.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``lam`` is a scalar. Otherwise,\n        ``np.array(lam).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Poisson distribution.\n    \n    See Also\n    --------\n    random.Generator.poisson: which should be used for new code.\n    \n    Notes\n    -----\n    The probability mass function (PMF) of Poisson distribution is\n    \n    .. math:: f(k; \\lambda)=\\frac{\\lambda^k e^{-\\lambda}}{k!}\n    \n    For events with an expected separation :math:`\\lambda` the Poisson\n    distribution :math:`f(k; \\lambda)` describes the probability of\n    :math:`k` events occurring within the observed\n    interval :math:`\\lambda`.\n    \n    Because the output is limited to the range of the C int64 type, a\n    ValueError is raised when `lam` is within 10 sigma of the maximum\n    representable value.\n    \n    References\n    ----------\n    .. [1] Weisstein, Eric W. \"Poisson Distribution.\"\n           From MathWorld--A Wolfram Web Resource.\n           https://mathworld.wolfram.com/PoissonDistribution.html\n    .. [2] Wikipedia, \"Poisson distribution\",\n           https://en.wikipedia.org/wiki/Poisson_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> import numpy as np\n    >>> s = np.random.poisson(5, 10000)\n    \n    Display histogram of the sample:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, ignored = plt.hist(s, 14, density=True)\n    >>> plt.show()\n    \n    Draw each 100 values for lambda 100 and 500:\n    \n    >>> s = np.random.poisson(lam=(100., 500.), size=(100, 2))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a52504ff72174dbb775dd8f03b0799ab8e60cc03fd1371c3892ec5333cd3db14",
            "fields": [
                {
                    "id": "3du0lupl",
                    "encoding": "",
                    "name": "lam",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Expected number of events occurring in a fixed-time interval,\nmust be >= 0. A sequence must be broadcastable over the requested\nsize.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8ae193xc",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``lam`` is a scalar. Otherwise,\n``np.array(lam).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cepuasa2",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.poisson",
                    "defaultValue": "numpy.random.poisson",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p9z2i7ic",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "887l1us7",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "7d0im0wj",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ctav354u",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q0s079hh",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cxi49w25",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "5yyjfy4h",
            "name": "random.power",
            "description": "power(a, size=None)\n    \n    Draws samples in [0, 1] from a power distribution with positive\n    exponent a - 1.\n    \n    Also known as the power function distribution.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.power`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    a : float or array_like of floats\n        Parameter of the distribution. Must be non-negative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``a`` is a scalar.  Otherwise,\n        ``np.array(a).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized power distribution.\n    \n    Raises\n    ------\n    ValueError\n        If a <= 0.\n    \n    See Also\n    --------\n    random.Generator.power: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density function is\n    \n    .. math:: P(x; a) = ax^{a-1}, 0 \\le x \\le 1, a>0.\n    \n    The power function distribution is just the inverse of the Pareto\n    distribution. It may also be seen as a special case of the Beta\n    distribution.\n    \n    It is used, for example, in modeling the over-reporting of insurance\n    claims.\n    \n    References\n    ----------\n    .. [1] Christian Kleiber, Samuel Kotz, \"Statistical size distributions\n           in economics and actuarial sciences\", Wiley, 2003.\n    .. [2] Heckert, N. A. and Filliben, James J. \"NIST Handbook 148:\n           Dataplot Reference Manual, Volume 2: Let Subcommands and Library\n           Functions\", National Institute of Standards and Technology\n           Handbook Series, June 2003.\n           https://www.itl.nist.gov/div898/software/dataplot/refman2/auxillar/powpdf.pdf\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> a = 5. # shape\n    >>> samples = 1000\n    >>> s = np.random.power(a, samples)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, ignored = plt.hist(s, bins=30)\n    >>> x = np.linspace(0, 1, 100)\n    >>> y = a*x**(a-1.)\n    >>> normed_y = samples*np.diff(bins)[0]*y\n    >>> plt.plot(x, normed_y)\n    >>> plt.show()\n    \n    Compare the power function distribution to the inverse of the Pareto.\n    \n    >>> from scipy import stats # doctest: +SKIP\n    >>> rvs = np.random.power(5, 1000000)\n    >>> rvsp = np.random.pareto(5, 1000000)\n    >>> xx = np.linspace(0,1,100)\n    >>> powpdf = stats.powerlaw.pdf(xx,5)  # doctest: +SKIP\n    \n    >>> plt.figure()\n    >>> plt.hist(rvs, bins=50, density=True)\n    >>> plt.plot(xx,powpdf,'r-')  # doctest: +SKIP\n    >>> plt.title('np.random.power(5)')\n    \n    >>> plt.figure()\n    >>> plt.hist(1./(1.+rvsp), bins=50, density=True)\n    >>> plt.plot(xx,powpdf,'r-')  # doctest: +SKIP\n    >>> plt.title('inverse of 1 + np.random.pareto(5)')\n    \n    >>> plt.figure()\n    >>> plt.hist(1./(1.+rvsp), bins=50, density=True)\n    >>> plt.plot(xx,powpdf,'r-')  # doctest: +SKIP\n    >>> plt.title('inverse of stats.pareto(5)')",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0a7295d5635cba559731bfd8ef02fa2bbeb03be4cc7ce30bc284609008d9263e",
            "fields": [
                {
                    "id": "xkgjszad",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Parameter of the distribution. Must be non-negative.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "70kdbu94",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``a`` is a scalar.  Otherwise,\n``np.array(a).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yticpqqk",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.power",
                    "defaultValue": "numpy.random.power",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "275ipon0",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u23avn09",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "5kp6uh4i",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hfaw2kyp",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rn155yov",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g0su_hck",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "n017al0t",
            "name": "random.rand",
            "description": "rand(d0, d1, ..., dn)\n    \n    Random values in a given shape.\n    \n    .. note::\n        This is a convenience function for users porting code from Matlab,\n        and wraps `random_sample`. That function takes a\n        tuple to specify the size of the output, which is consistent with\n        other NumPy functions like `numpy.zeros` and `numpy.ones`.\n    \n    Create an array of the given shape and populate it with\n    random samples from a uniform distribution\n    over ``[0, 1)``.\n    \n    Parameters\n    ----------\n    d0, d1, ..., dn : int, optional\n        The dimensions of the returned array, must be non-negative.\n        If no argument is given a single Python float is returned.\n    \n    Returns\n    -------\n    out : ndarray, shape ``(d0, d1, ..., dn)``\n        Random values.\n    \n    See Also\n    --------\n    random\n    \n    Examples\n    --------\n    >>> np.random.rand(3,2)\n    array([[ 0.14022471,  0.96360618],  #random\n           [ 0.37601032,  0.25528411],  #random\n           [ 0.49313049,  0.94909878]]) #random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3221677220359ea6e7f9f146f128e960fcb023f376e0e8482b681a089796521d",
            "fields": [
                {
                    "id": "h7w8wwnj",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ugztdjtf",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.rand",
                    "defaultValue": "numpy.random.rand",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gve28fjg",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dlwekye9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "j9v1vgvu",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6b3mcva_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f6dx770r",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f6yhfkfx",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "u6196bv3",
            "name": "random.randint",
            "description": "randint(low, high=None, size=None, dtype=int)\n    \n    Return random integers from `low` (inclusive) to `high` (exclusive).\n    \n    Return random integers from the \"discrete uniform\" distribution of\n    the specified dtype in the \"half-open\" interval [`low`, `high`). If\n    `high` is None (the default), then results are from [0, `low`).\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.integers`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    low : int or array-like of ints\n        Lowest (signed) integers to be drawn from the distribution (unless\n        ``high=None``, in which case this parameter is one above the\n        *highest* such integer).\n    high : int or array-like of ints, optional\n        If provided, one above the largest (signed) integer to be drawn\n        from the distribution (see above for behavior if ``high=None``).\n        If array-like, must contain integer values\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    dtype : dtype, optional\n        Desired dtype of the result. Byteorder must be native.\n        The default value is long.\n    \n        .. warning::\n          This function defaults to the C-long dtype, which is 32bit on windows\n          and otherwise 64bit on 64bit platforms (and 32bit on 32bit ones).\n          Since NumPy 2.0, NumPy's default integer is 32bit on 32bit platforms\n          and 64bit on 64bit platforms.  Which corresponds to `np.intp`.\n          (`dtype=int` is not the same as in most NumPy functions.)\n    \n    Returns\n    -------\n    out : int or ndarray of ints\n        `size`-shaped array of random integers from the appropriate\n        distribution, or a single such random int if `size` not provided.\n    \n    See Also\n    --------\n    random_integers : similar to `randint`, only for the closed\n        interval [`low`, `high`], and 1 is the lowest value if `high` is\n        omitted.\n    random.Generator.integers: which should be used for new code.\n    \n    Examples\n    --------\n    >>> np.random.randint(2, size=10)\n    array([1, 0, 0, 0, 1, 1, 0, 0, 1, 0]) # random\n    >>> np.random.randint(1, size=10)\n    array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    \n    Generate a 2 x 4 array of ints between 0 and 4, inclusive:\n    \n    >>> np.random.randint(5, size=(2, 4))\n    array([[4, 0, 2, 1], # random\n           [3, 2, 2, 0]])\n    \n    Generate a 1 x 3 array with 3 different upper bounds\n    \n    >>> np.random.randint(1, [3, 5, 10])\n    array([2, 2, 9]) # random\n    \n    Generate a 1 by 3 array with 3 different lower bounds\n    \n    >>> np.random.randint([1, 5, 7], 10)\n    array([9, 8, 7]) # random\n    \n    Generate a 2 by 4 array using broadcasting with dtype of uint8\n    \n    >>> np.random.randint([1, 3, 5, 7], [[10], [20]], dtype=np.uint8)\n    array([[ 8,  6,  9,  7], # random\n           [ 1, 16,  9, 12]], dtype=uint8)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "782422fede383ed56f61e68add4a5c2b1bb46d508295e92ce93a3252a818d954",
            "fields": [
                {
                    "id": "d9c11zuw",
                    "encoding": "",
                    "name": "low",
                    "value": "",
                    "defaultValue": "",
                    "description": "Lowest (signed) integers to be drawn from the distribution (unless\n``high=None``, in which case this parameter is one above the\n*highest* such integer).",
                    "type": "int or array-like of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a5mx67s1",
                    "encoding": "",
                    "name": "high",
                    "value": "",
                    "defaultValue": "",
                    "description": "If provided, one above the largest (signed) integer to be drawn\nfrom the distribution (see above for behavior if ``high=None``).\nIf array-like, must contain integer values",
                    "type": "int or array-like of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lxlljqf2",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wh0q5n7h",
                    "encoding": "",
                    "name": "dtype",
                    "value": "builtins.type",
                    "defaultValue": "builtins.type",
                    "description": "Desired dtype of the result. Byteorder must be native.\nThe default value is long.\n\n.. warning::\n  This function defaults to the C-long dtype, which is 32bit on windows\n  and otherwise 64bit on 64bit platforms (and 32bit on 32bit ones).\n  Since NumPy 2.0, NumPy's default integer is 32bit on 32bit platforms\n  and 64bit on 64bit platforms.  Which corresponds to `np.intp`.\n  (`dtype=int` is not the same as in most NumPy functions.)",
                    "type": "builtins.type",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nuoq2z1m",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.randint",
                    "defaultValue": "numpy.random.randint",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3hjzqx0a",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "107ecrsu",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9qblagr_",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yvenl1sa",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9nkz49dd",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jpfjzasp",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "9ywladfj",
            "name": "random.randn",
            "description": "randn(d0, d1, ..., dn)\n    \n    Return a sample (or samples) from the \"standard normal\" distribution.\n    \n    .. note::\n        This is a convenience function for users porting code from Matlab,\n        and wraps `standard_normal`. That function takes a\n        tuple to specify the size of the output, which is consistent with\n        other NumPy functions like `numpy.zeros` and `numpy.ones`.\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.standard_normal`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    If positive int_like arguments are provided, `randn` generates an array\n    of shape ``(d0, d1, ..., dn)``, filled\n    with random floats sampled from a univariate \"normal\" (Gaussian)\n    distribution of mean 0 and variance 1. A single float randomly sampled\n    from the distribution is returned if no argument is provided.\n    \n    Parameters\n    ----------\n    d0, d1, ..., dn : int, optional\n        The dimensions of the returned array, must be non-negative.\n        If no argument is given a single Python float is returned.\n    \n    Returns\n    -------\n    Z : ndarray or float\n        A ``(d0, d1, ..., dn)``-shaped array of floating-point samples from\n        the standard normal distribution, or a single such float if\n        no parameters were supplied.\n    \n    See Also\n    --------\n    standard_normal : Similar, but takes a tuple as its argument.\n    normal : Also accepts mu and sigma arguments.\n    random.Generator.standard_normal: which should be used for new code.\n    \n    Notes\n    -----\n    For random samples from the normal distribution with mean ``mu`` and\n    standard deviation ``sigma``, use::\n    \n        sigma * np.random.randn(...) + mu\n    \n    Examples\n    --------\n    >>> np.random.randn()\n    2.1923875335537315  # random\n    \n    Two-by-four array of samples from the normal distribution with\n    mean 3 and standard deviation 2.5:\n    \n    >>> 3 + 2.5 * np.random.randn(2, 4)\n    array([[-4.49401501,  4.00950034, -1.81814867,  7.29718677],   # random\n           [ 0.39924804,  4.68456316,  4.99394529,  4.84057254]])  # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4ea4f9a52795eccd0c44b3d285ff400678b4b17eba196199802e53ec24fa05ea",
            "fields": [
                {
                    "id": "1vb_hlhj",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6ewdl5bc",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.randn",
                    "defaultValue": "numpy.random.randn",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "60fodxt0",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zm47em7p",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "vkp98g_a",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5cm2s8v1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ad95yy2o",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ujieoh3d",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "t5f6esco",
            "name": "random.random",
            "description": "random(size=None)\n    \n    Return random floats in the half-open interval [0.0, 1.0). Alias for\n    `random_sample` to ease forward-porting to the new random API.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6bca5d501da1ac6146b0c2a67c08457834a2097337a61f7715fc8923ae071772",
            "fields": [
                {
                    "id": "2tp13ntg",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4eyrgp_t",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.random",
                    "defaultValue": "numpy.random.random",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q_hn3a92",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z_3tt6jr",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "lmmscrcr",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7i47m4k8",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g8aicthx",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "52a9qqcw",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "3x0qcy00",
            "name": "random.random_integers",
            "description": "random_integers(low, high=None, size=None)\n    \n    Random integers of type `numpy.int_` between `low` and `high`, inclusive.\n    \n    Return random integers of type `numpy.int_` from the \"discrete uniform\"\n    distribution in the closed interval [`low`, `high`].  If `high` is\n    None (the default), then results are from [1, `low`]. The `numpy.int_`\n    type translates to the C long integer type and its precision\n    is platform dependent.\n    \n    This function has been deprecated. Use randint instead.\n    \n    .. deprecated:: 1.11.0\n    \n    Parameters\n    ----------\n    low : int\n        Lowest (signed) integer to be drawn from the distribution (unless\n        ``high=None``, in which case this parameter is the *highest* such\n        integer).\n    high : int, optional\n        If provided, the largest (signed) integer to be drawn from the\n        distribution (see above for behavior if ``high=None``).\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    \n    Returns\n    -------\n    out : int or ndarray of ints\n        `size`-shaped array of random integers from the appropriate\n        distribution, or a single such random int if `size` not provided.\n    \n    See Also\n    --------\n    randint : Similar to `random_integers`, only for the half-open\n        interval [`low`, `high`), and 0 is the lowest value if `high` is\n        omitted.\n    \n    Notes\n    -----\n    To sample from N evenly spaced floating-point numbers between a and b,\n    use::\n    \n      a + (b - a) * (np.random.random_integers(N) - 1) / (N - 1.)\n    \n    Examples\n    --------\n    >>> np.random.random_integers(5)\n    4 # random\n    >>> type(np.random.random_integers(5))\n    <class 'numpy.int64'>\n    >>> np.random.random_integers(5, size=(3,2))\n    array([[5, 4], # random\n           [3, 3],\n           [4, 5]])\n    \n    Choose five random numbers from the set of five evenly-spaced\n    numbers between 0 and 2.5, inclusive (*i.e.*, from the set\n    :math:`{0, 5/8, 10/8, 15/8, 20/8}`):\n    \n    >>> 2.5 * (np.random.random_integers(5, size=(5,)) - 1) / 4.\n    array([ 0.625,  1.25 ,  0.625,  0.625,  2.5  ]) # random\n    \n    Roll two six sided dice 1000 times and sum the results:\n    \n    >>> d1 = np.random.random_integers(1, 6, 1000)\n    >>> d2 = np.random.random_integers(1, 6, 1000)\n    >>> dsums = d1 + d2\n    \n    Display results as a histogram:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, ignored = plt.hist(dsums, 11, density=True)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a7c83b88e742cde5edd0932a2cf2aded283911d14221560b55581b283f4d72e1",
            "fields": [
                {
                    "id": "6w4v6pg2",
                    "encoding": "",
                    "name": "low",
                    "value": "",
                    "defaultValue": "",
                    "description": "Lowest (signed) integer to be drawn from the distribution (unless\n``high=None``, in which case this parameter is the *highest* such\ninteger).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dt_pdv7_",
                    "encoding": "",
                    "name": "high",
                    "value": "",
                    "defaultValue": "",
                    "description": "If provided, the largest (signed) integer to be drawn from the\ndistribution (see above for behavior if ``high=None``).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "utguiwsq",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s05eo96n",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.random_integers",
                    "defaultValue": "numpy.random.random_integers",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9w39t6z3",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1mgxhur1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "_yhy_9k5",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j__p_wyh",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vii_vln5",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4_qxlb5c",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ji9b6xt9",
            "name": "random.random_sample",
            "description": "random_sample(size=None)\n    \n    Return random floats in the half-open interval [0.0, 1.0).\n    \n    Results are from the \"continuous uniform\" distribution over the\n    stated interval.  To sample :math:`Unif[a, b), b > a` multiply\n    the output of `random_sample` by `(b-a)` and add `a`::\n    \n      (b - a) * random_sample() + a\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.random`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    \n    Returns\n    -------\n    out : float or ndarray of floats\n        Array of random floats of shape `size` (unless ``size=None``, in which\n        case a single float is returned).\n    \n    See Also\n    --------\n    random.Generator.random: which should be used for new code.\n    \n    Examples\n    --------\n    >>> np.random.random_sample()\n    0.47108547995356098 # random\n    >>> type(np.random.random_sample())\n    <class 'float'>\n    >>> np.random.random_sample((5,))\n    array([ 0.30220482,  0.86820401,  0.1654503 ,  0.11659149,  0.54323428]) # random\n    \n    Three-by-two array of random numbers from [-5, 0):\n    \n    >>> 5 * np.random.random_sample((3, 2)) - 5\n    array([[-3.99149989, -0.52338984], # random\n           [-2.99091858, -0.79479508],\n           [-1.23204345, -1.75224494]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1223dbf15297665d73b768caa6dc6f760a8097a8823337373a170b379c3200f8",
            "fields": [
                {
                    "id": "om5eoq4q",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "csom15et",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.random_sample",
                    "defaultValue": "numpy.random.random_sample",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b3gtrn_t",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cx6p3p2n",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "esxnxu9z",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2bmn8j0s",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4rf6yxkr",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i72qa4ms",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "4mrumkrt",
            "name": "random.ranf",
            "description": "This is an alias of `random_sample`. See `random_sample`  for the complete\n    documentation.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9be0f3e63e965cf51060ff80636873f3cfe6328f777b481ed3548fb840ba54c0",
            "fields": [
                {
                    "id": "vgkxumh1",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3uil8s9a",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lu8rzt04",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.ranf",
                    "defaultValue": "numpy.random.ranf",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5obdd6bz",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dt28bwz1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "q8vl1a1h",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ewhanlx2",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hr69yk3m",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dhh42eyn",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "tqw8b8su",
            "name": "random.rayleigh",
            "description": "rayleigh(scale=1.0, size=None)\n    \n    Draw samples from a Rayleigh distribution.\n    \n    The :math:`\\chi` and Weibull distributions are generalizations of the\n    Rayleigh.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.rayleigh`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    scale : float or array_like of floats, optional\n        Scale, also equals the mode. Must be non-negative. Default is 1.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``scale`` is a scalar.  Otherwise,\n        ``np.array(scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Rayleigh distribution.\n    \n    See Also\n    --------\n    random.Generator.rayleigh: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density function for the Rayleigh distribution is\n    \n    .. math:: P(x;scale) = \\frac{x}{scale^2}e^{\\frac{-x^2}{2 \\cdotp scale^2}}\n    \n    The Rayleigh distribution would arise, for example, if the East\n    and North components of the wind velocity had identical zero-mean\n    Gaussian distributions.  Then the wind speed would have a Rayleigh\n    distribution.\n    \n    References\n    ----------\n    .. [1] Brighton Webs Ltd., \"Rayleigh Distribution,\"\n           https://web.archive.org/web/20090514091424/http://brighton-webs.co.uk:80/distributions/rayleigh.asp\n    .. [2] Wikipedia, \"Rayleigh distribution\"\n           https://en.wikipedia.org/wiki/Rayleigh_distribution\n    \n    Examples\n    --------\n    Draw values from the distribution and plot the histogram\n    \n    >>> from matplotlib.pyplot import hist\n    >>> values = hist(np.random.rayleigh(3, 100000), bins=200, density=True)\n    \n    Wave heights tend to follow a Rayleigh distribution. If the mean wave\n    height is 1 meter, what fraction of waves are likely to be larger than 3\n    meters?\n    \n    >>> meanvalue = 1\n    >>> modevalue = np.sqrt(2 / np.pi) * meanvalue\n    >>> s = np.random.rayleigh(modevalue, 1000000)\n    \n    The percentage of waves larger than 3 meters is:\n    \n    >>> 100.*sum(s>3)/1000000.\n    0.087300000000000003 # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "02f3538dd0765747b007f78090607b6ccd1a679d766ca17a8b939903e2929f88",
            "fields": [
                {
                    "id": "tglv6ta6",
                    "encoding": "",
                    "name": "scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Scale, also equals the mode. Must be non-negative. Default is 1.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zhv56ogh",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``scale`` is a scalar.  Otherwise,\n``np.array(scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wlffp3je",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.rayleigh",
                    "defaultValue": "numpy.random.rayleigh",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fu08gdvg",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r6gz28cy",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "r8su2dnq",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3xkauft9",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wci4dg_x",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qjdwo1gz",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "rvhor3cs",
            "name": "random.sample",
            "description": "This is an alias of `random_sample`. See `random_sample`  for the complete\n    documentation.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d756282979af429a13ecc4868f09fc28b8e3b441c0b3a15d0ecc195d29d43509",
            "fields": [
                {
                    "id": "kq9bdy0p",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "emyfyzqr",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fykz75mv",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.sample",
                    "defaultValue": "numpy.random.sample",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ycest4gh",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gygtbwbj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "1aiu9tvg",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i2vl74te",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "45zo_j1u",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ki30kj93",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "unmony5j",
            "name": "random.seed",
            "description": "seed(seed=None)\n    \n    Reseed the singleton RandomState instance.\n    \n    Notes\n    -----\n    This is a convenience, legacy function that exists to support\n    older code that uses the singleton RandomState. Best practice\n    is to use a dedicated ``Generator`` instance rather than\n    the random variate generation methods exposed directly in\n    the random module.\n    \n    See Also\n    --------\n    numpy.random.Generator",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "74a518fd07550d1ae19d7eb0ef549ddf9d32350dc584a231b893733ab9e6059d",
            "fields": [
                {
                    "id": "yyu86hct",
                    "encoding": "",
                    "name": "seed",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l9xmh8oi",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.seed",
                    "defaultValue": "numpy.random.seed",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oj84gw16",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lwzrr9ly",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "yg352cit",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vtj46kg1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gzv511xv",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ide_v6up",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "lb6f5a87",
            "name": "random.set_state",
            "description": "set_state(state)\n    \n    Set the internal state of the generator from a tuple.\n    \n    For use if one has reason to manually (re-)set the internal state of\n    the bit generator used by the RandomState instance. By default,\n    RandomState uses the \"Mersenne Twister\"[1]_ pseudo-random number\n    generating algorithm.\n    \n    Parameters\n    ----------\n    state : {tuple(str, ndarray of 624 uints, int, int, float), dict}\n        The `state` tuple has the following items:\n    \n        1. the string 'MT19937', specifying the Mersenne Twister algorithm.\n        2. a 1-D array of 624 unsigned integers ``keys``.\n        3. an integer ``pos``.\n        4. an integer ``has_gauss``.\n        5. a float ``cached_gaussian``.\n    \n        If state is a dictionary, it is directly set using the BitGenerators\n        `state` property.\n    \n    Returns\n    -------\n    out : None\n        Returns 'None' on success.\n    \n    See Also\n    --------\n    get_state\n    \n    Notes\n    -----\n    `set_state` and `get_state` are not needed to work with any of the\n    random distributions in NumPy. If the internal state is manually altered,\n    the user should know exactly what he/she is doing.\n    \n    For backwards compatibility, the form (str, array of 624 uints, int) is\n    also accepted although it is missing some information about the cached\n    Gaussian value: ``state = ('MT19937', keys, pos)``.\n    \n    References\n    ----------\n    .. [1] M. Matsumoto and T. Nishimura, \"Mersenne Twister: A\n       623-dimensionally equidistributed uniform pseudorandom number\n       generator,\" *ACM Trans. on Modeling and Computer Simulation*,\n       Vol. 8, No. 1, pp. 3-30, Jan. 1998.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a5fda1e1342422c34d2d72484f21d8a3fa9a24293ead4b02c0f2bcf1e340f939",
            "fields": [
                {
                    "id": "tzi1rxx3",
                    "encoding": "",
                    "name": "state",
                    "value": "",
                    "defaultValue": "",
                    "description": "The `state` tuple has the following items:\n\n1. the string 'MT19937', specifying the Mersenne Twister algorithm.\n2. a 1-D array of 624 unsigned integers ``keys``.\n3. an integer ``pos``.\n4. an integer ``has_gauss``.\n5. a float ``cached_gaussian``.\n\nIf state is a dictionary, it is directly set using the BitGenerators\n`state` property.",
                    "type": "{tuple(str, ndarray of 624 uints, int, int, float), dict}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "flw27tby",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.set_state",
                    "defaultValue": "numpy.random.set_state",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "292rp9e9",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j7gm5n_c",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "73wim_st",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yuib0m8i",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2k7i71yw",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6t7siv6_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ko7f9iyk",
            "name": "random.shuffle",
            "description": "shuffle(x)\n    \n    Modify a sequence in-place by shuffling its contents.\n    \n    This function only shuffles the array along the first axis of a\n    multi-dimensional array. The order of sub-arrays is changed but\n    their contents remains the same.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.shuffle`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    x : ndarray or MutableSequence\n        The array, list or mutable sequence to be shuffled.\n    \n    Returns\n    -------\n    None\n    \n    See Also\n    --------\n    random.Generator.shuffle: which should be used for new code.\n    \n    Examples\n    --------\n    >>> arr = np.arange(10)\n    >>> np.random.shuffle(arr)\n    >>> arr\n    [1 7 5 2 9 4 3 6 0 8] # random\n    \n    Multi-dimensional arrays are only shuffled along the first axis:\n    \n    >>> arr = np.arange(9).reshape((3, 3))\n    >>> np.random.shuffle(arr)\n    >>> arr\n    array([[3, 4, 5], # random\n           [6, 7, 8],\n           [0, 1, 2]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "513958f3070bcfb5b1a0e51ef75a04a384d654e7b14c7e1735d16c0d41ee462d",
            "fields": [
                {
                    "id": "gpl9ttgx",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array, list or mutable sequence to be shuffled.",
                    "type": "ndarray or MutableSequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "904_2hdb",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.shuffle",
                    "defaultValue": "numpy.random.shuffle",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2biyzo70",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n3merkc6",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "229v9nuw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ulhe5226",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l1u4qsv9",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c3d3x8x4",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "cdd08er2",
            "name": "random.standard_cauchy",
            "description": "standard_cauchy(size=None)\n    \n    Draw samples from a standard Cauchy distribution with mode = 0.\n    \n    Also known as the Lorentz distribution.\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.standard_cauchy`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    \n    Returns\n    -------\n    samples : ndarray or scalar\n        The drawn samples.\n    \n    See Also\n    --------\n    random.Generator.standard_cauchy: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density function for the full Cauchy distribution is\n    \n    .. math:: P(x; x_0, \\gamma) = \\frac{1}{\\pi \\gamma \\bigl[ 1+\n              (\\frac{x-x_0}{\\gamma})^2 \\bigr] }\n    \n    and the Standard Cauchy distribution just sets :math:`x_0=0` and\n    :math:`\\gamma=1`\n    \n    The Cauchy distribution arises in the solution to the driven harmonic\n    oscillator problem, and also describes spectral line broadening. It\n    also describes the distribution of values at which a line tilted at\n    a random angle will cut the x axis.\n    \n    When studying hypothesis tests that assume normality, seeing how the\n    tests perform on data from a Cauchy distribution is a good indicator of\n    their sensitivity to a heavy-tailed distribution, since the Cauchy looks\n    very much like a Gaussian distribution, but with heavier tails.\n    \n    References\n    ----------\n    .. [1] NIST/SEMATECH e-Handbook of Statistical Methods, \"Cauchy\n          Distribution\",\n          https://www.itl.nist.gov/div898/handbook/eda/section3/eda3663.htm\n    .. [2] Weisstein, Eric W. \"Cauchy Distribution.\" From MathWorld--A\n          Wolfram Web Resource.\n          https://mathworld.wolfram.com/CauchyDistribution.html\n    .. [3] Wikipedia, \"Cauchy distribution\"\n          https://en.wikipedia.org/wiki/Cauchy_distribution\n    \n    Examples\n    --------\n    Draw samples and plot the distribution:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> s = np.random.standard_cauchy(1000000)\n    >>> s = s[(s>-25) & (s<25)]  # truncate distribution so it plots well\n    >>> plt.hist(s, bins=100)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3b4e37a7570bf3f62619afe5dc61b74debf9802dd81546bc547ed7cbc8b76b0c",
            "fields": [
                {
                    "id": "20tq11v_",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aqlry9my",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.standard_cauchy",
                    "defaultValue": "numpy.random.standard_cauchy",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c_p1cxvr",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "floam_zf",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "vayu00ox",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5lw8kfun",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6j1plmfl",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7x9jno38",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "iyd4qqa0",
            "name": "random.standard_exponential",
            "description": "standard_exponential(size=None)\n    \n    Draw samples from the standard exponential distribution.\n    \n    `standard_exponential` is identical to the exponential distribution\n    with a scale parameter of 1.\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.standard_exponential`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    \n    Returns\n    -------\n    out : float or ndarray\n        Drawn samples.\n    \n    See Also\n    --------\n    random.Generator.standard_exponential: which should be used for new code.\n    \n    Examples\n    --------\n    Output a 3x8000 array:\n    \n    >>> n = np.random.standard_exponential((3, 8000))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5e15940bbd96b04198173cb72d73a448b8400287e98a78c58486c44693e1a0d7",
            "fields": [
                {
                    "id": "ia0a4nzp",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qmef6fui",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.standard_exponential",
                    "defaultValue": "numpy.random.standard_exponential",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hh4hoyzb",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "63nkt5dh",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "tmjopbw9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p8666lh3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vy2zr_a3",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cnh0fspy",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "7jrmizgr",
            "name": "random.standard_gamma",
            "description": "standard_gamma(shape, size=None)\n    \n    Draw samples from a standard Gamma distribution.\n    \n    Samples are drawn from a Gamma distribution with specified parameters,\n    shape (sometimes designated \"k\") and scale=1.\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.standard_gamma`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    shape : float or array_like of floats\n        Parameter, must be non-negative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``shape`` is a scalar.  Otherwise,\n        ``np.array(shape).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized standard gamma distribution.\n    \n    See Also\n    --------\n    scipy.stats.gamma : probability density function, distribution or\n        cumulative density function, etc.\n    random.Generator.standard_gamma: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density for the Gamma distribution is\n    \n    .. math:: p(x) = x^{k-1}\\frac{e^{-x/\\theta}}{\\theta^k\\Gamma(k)},\n    \n    where :math:`k` is the shape and :math:`\\theta` the scale,\n    and :math:`\\Gamma` is the Gamma function.\n    \n    The Gamma distribution is often used to model the times to failure of\n    electronic components, and arises naturally in processes for which the\n    waiting times between Poisson distributed events are relevant.\n    \n    References\n    ----------\n    .. [1] Weisstein, Eric W. \"Gamma Distribution.\" From MathWorld--A\n           Wolfram Web Resource.\n           https://mathworld.wolfram.com/GammaDistribution.html\n    .. [2] Wikipedia, \"Gamma distribution\",\n           https://en.wikipedia.org/wiki/Gamma_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> shape, scale = 2., 1. # mean and width\n    >>> s = np.random.standard_gamma(shape, 1000000)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> import scipy.special as sps  # doctest: +SKIP\n    >>> count, bins, ignored = plt.hist(s, 50, density=True)\n    >>> y = bins**(shape-1) * ((np.exp(-bins/scale))/  # doctest: +SKIP\n    ...                       (sps.gamma(shape) * scale**shape))\n    >>> plt.plot(bins, y, linewidth=2, color='r')  # doctest: +SKIP\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8011be97c8533552b2c6b8b0bead8dd219fac63117bfb4b8cf4d1bc9b23f2898",
            "fields": [
                {
                    "id": "t3ephy46",
                    "encoding": "",
                    "name": "shape",
                    "value": "",
                    "defaultValue": "",
                    "description": "Parameter, must be non-negative.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3pq76tjm",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``shape`` is a scalar.  Otherwise,\n``np.array(shape).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gd5ywk65",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.standard_gamma",
                    "defaultValue": "numpy.random.standard_gamma",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q07ok99r",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7ylefvgr",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9_v_q4er",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7i5uecbu",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6x9t7_75",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zz9ewh_i",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "d1c53n29",
            "name": "random.standard_normal",
            "description": "standard_normal(size=None)\n    \n    Draw samples from a standard Normal distribution (mean=0, stdev=1).\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.standard_normal`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    \n    Returns\n    -------\n    out : float or ndarray\n        A floating-point array of shape ``size`` of drawn samples, or a\n        single sample if ``size`` was not specified.\n    \n    See Also\n    --------\n    normal :\n        Equivalent function with additional ``loc`` and ``scale`` arguments\n        for setting the mean and standard deviation.\n    random.Generator.standard_normal: which should be used for new code.\n    \n    Notes\n    -----\n    For random samples from the normal distribution with mean ``mu`` and\n    standard deviation ``sigma``, use one of::\n    \n        mu + sigma * np.random.standard_normal(size=...)\n        np.random.normal(mu, sigma, size=...)\n    \n    Examples\n    --------\n    >>> np.random.standard_normal()\n    2.1923875335537315 #random\n    \n    >>> s = np.random.standard_normal(8000)\n    >>> s\n    array([ 0.6888893 ,  0.78096262, -0.89086505, ...,  0.49876311,  # random\n           -0.38672696, -0.4685006 ])                                # random\n    >>> s.shape\n    (8000,)\n    >>> s = np.random.standard_normal(size=(3, 4, 2))\n    >>> s.shape\n    (3, 4, 2)\n    \n    Two-by-four array of samples from the normal distribution with\n    mean 3 and standard deviation 2.5:\n    \n    >>> 3 + 2.5 * np.random.standard_normal(size=(2, 4))\n    array([[-4.49401501,  4.00950034, -1.81814867,  7.29718677],   # random\n           [ 0.39924804,  4.68456316,  4.99394529,  4.84057254]])  # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b062d9973048aa033d94ecff0b035a1ea54122d06564f231cddb0dacf4e47890",
            "fields": [
                {
                    "id": "g07n6lr8",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "79bg2sia",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.standard_normal",
                    "defaultValue": "numpy.random.standard_normal",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "945n_8se",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mpm5u1xs",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "60y8ffb0",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u666h8p8",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cnudsh1q",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "typkzamh",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "c6prveli",
            "name": "random.standard_t",
            "description": "standard_t(df, size=None)\n    \n    Draw samples from a standard Student's t distribution with `df` degrees\n    of freedom.\n    \n    A special case of the hyperbolic distribution.  As `df` gets\n    large, the result resembles that of the standard normal\n    distribution (`standard_normal`).\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.standard_t`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    df : float or array_like of floats\n        Degrees of freedom, must be > 0.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``df`` is a scalar.  Otherwise,\n        ``np.array(df).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized standard Student's t distribution.\n    \n    See Also\n    --------\n    random.Generator.standard_t: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density function for the t distribution is\n    \n    .. math:: P(x, df) = \\frac{\\Gamma(\\frac{df+1}{2})}{\\sqrt{\\pi df}\n              \\Gamma(\\frac{df}{2})}\\Bigl( 1+\\frac{x^2}{df} \\Bigr)^{-(df+1)/2}\n    \n    The t test is based on an assumption that the data come from a\n    Normal distribution. The t test provides a way to test whether\n    the sample mean (that is the mean calculated from the data) is\n    a good estimate of the true mean.\n    \n    The derivation of the t-distribution was first published in\n    1908 by William Gosset while working for the Guinness Brewery\n    in Dublin. Due to proprietary issues, he had to publish under\n    a pseudonym, and so he used the name Student.\n    \n    References\n    ----------\n    .. [1] Dalgaard, Peter, \"Introductory Statistics With R\",\n           Springer, 2002.\n    .. [2] Wikipedia, \"Student's t-distribution\"\n           https://en.wikipedia.org/wiki/Student's_t-distribution\n    \n    Examples\n    --------\n    From Dalgaard page 83 [1]_, suppose the daily energy intake for 11\n    women in kilojoules (kJ) is:\n    \n    >>> intake = np.array([5260., 5470, 5640, 6180, 6390, 6515, 6805, 7515, \\\n    ...                    7515, 8230, 8770])\n    \n    Does their energy intake deviate systematically from the recommended\n    value of 7725 kJ? Our null hypothesis will be the absence of deviation,\n    and the alternate hypothesis will be the presence of an effect that could be\n    either positive or negative, hence making our test 2-tailed. \n    \n    Because we are estimating the mean and we have N=11 values in our sample,\n    we have N-1=10 degrees of freedom. We set our significance level to 95% and \n    compute the t statistic using the empirical mean and empirical standard \n    deviation of our intake. We use a ddof of 1 to base the computation of our \n    empirical standard deviation on an unbiased estimate of the variance (note:\n    the final estimate is not unbiased due to the concave nature of the square \n    root).\n    \n    >>> np.mean(intake)\n    6753.636363636364\n    >>> intake.std(ddof=1)\n    1142.1232221373727\n    >>> t = (np.mean(intake)-7725)/(intake.std(ddof=1)/np.sqrt(len(intake)))\n    >>> t\n    -2.8207540608310198\n    \n    We draw 1000000 samples from Student's t distribution with the adequate\n    degrees of freedom.\n    \n    >>> import matplotlib.pyplot as plt\n    >>> s = np.random.standard_t(10, size=1000000)\n    >>> h = plt.hist(s, bins=100, density=True)\n    \n    Does our t statistic land in one of the two critical regions found at \n    both tails of the distribution?\n    \n    >>> np.sum(np.abs(t) < np.abs(s)) / float(len(s))\n    0.018318  #random < 0.05, statistic is in critical region\n    \n    The probability value for this 2-tailed test is about 1.83%, which is \n    lower than the 5% pre-determined significance threshold. \n    \n    Therefore, the probability of observing values as extreme as our intake\n    conditionally on the null hypothesis being true is too low, and we reject \n    the null hypothesis of no deviation.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e83504c05202aa1c0ba5cc9806ac42d78aaf826f93f3ff112e39665c75b7e1c8",
            "fields": [
                {
                    "id": "_n6sf5dt",
                    "encoding": "",
                    "name": "df",
                    "value": "",
                    "defaultValue": "",
                    "description": "Degrees of freedom, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ow2v2_ht",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``df`` is a scalar.  Otherwise,\n``np.array(df).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "abnkl9p7",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.standard_t",
                    "defaultValue": "numpy.random.standard_t",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ipe6bxmb",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "whz5tqkg",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "_7c97j2l",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g6j4qvct",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h_g4l6y2",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f7lwkv4o",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "3veqs7wm",
            "name": "random.triangular",
            "description": "triangular(left, mode, right, size=None)\n    \n    Draw samples from the triangular distribution over the\n    interval ``[left, right]``.\n    \n    The triangular distribution is a continuous probability\n    distribution with lower limit left, peak at mode, and upper\n    limit right. Unlike the other distributions, these parameters\n    directly define the shape of the pdf.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.triangular`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    left : float or array_like of floats\n        Lower limit.\n    mode : float or array_like of floats\n        The value where the peak of the distribution occurs.\n        The value must fulfill the condition ``left <= mode <= right``.\n    right : float or array_like of floats\n        Upper limit, must be larger than `left`.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``left``, ``mode``, and ``right``\n        are all scalars.  Otherwise, ``np.broadcast(left, mode, right).size``\n        samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized triangular distribution.\n    \n    See Also\n    --------\n    random.Generator.triangular: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density function for the triangular distribution is\n    \n    .. math:: P(x;l, m, r) = \\begin{cases}\n              \\frac{2(x-l)}{(r-l)(m-l)}& \\text{for $l \\leq x \\leq m$},\\\\\n              \\frac{2(r-x)}{(r-l)(r-m)}& \\text{for $m \\leq x \\leq r$},\\\\\n              0& \\text{otherwise}.\n              \\end{cases}\n    \n    The triangular distribution is often used in ill-defined\n    problems where the underlying distribution is not known, but\n    some knowledge of the limits and mode exists. Often it is used\n    in simulations.\n    \n    References\n    ----------\n    .. [1] Wikipedia, \"Triangular distribution\"\n           https://en.wikipedia.org/wiki/Triangular_distribution\n    \n    Examples\n    --------\n    Draw values from the distribution and plot the histogram:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> h = plt.hist(np.random.triangular(-3, 0, 8, 100000), bins=200,\n    ...              density=True)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e75a66fee775f1f3184458896020386c63039b9b062b1081cce193f48e677cb5",
            "fields": [
                {
                    "id": "2290g3d5",
                    "encoding": "",
                    "name": "left",
                    "value": "",
                    "defaultValue": "",
                    "description": "Lower limit.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pib6lu8j",
                    "encoding": "",
                    "name": "mode",
                    "value": "",
                    "defaultValue": "",
                    "description": "The value where the peak of the distribution occurs.\nThe value must fulfill the condition ``left <= mode <= right``.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rqlw70hc",
                    "encoding": "",
                    "name": "right",
                    "value": "",
                    "defaultValue": "",
                    "description": "Upper limit, must be larger than `left`.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1i1dgsli",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``left``, ``mode``, and ``right``\nare all scalars.  Otherwise, ``np.broadcast(left, mode, right).size``\nsamples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lv85yw4o",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.triangular",
                    "defaultValue": "numpy.random.triangular",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lngk3mr4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3u2d1vs8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "qnznbczi",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x8ot0flr",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uuf6ea_9",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yt0vqsqo",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "3dtuaq72",
            "name": "random.uniform",
            "description": "uniform(low=0.0, high=1.0, size=None)\n    \n    Draw samples from a uniform distribution.\n    \n    Samples are uniformly distributed over the half-open interval\n    ``[low, high)`` (includes low, but excludes high).  In other words,\n    any value within the given interval is equally likely to be drawn\n    by `uniform`.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.uniform`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    low : float or array_like of floats, optional\n        Lower boundary of the output interval.  All values generated will be\n        greater than or equal to low.  The default value is 0.\n    high : float or array_like of floats\n        Upper boundary of the output interval.  All values generated will be\n        less than or equal to high.  The high limit may be included in the \n        returned array of floats due to floating-point rounding in the \n        equation ``low + (high-low) * random_sample()``.  The default value \n        is 1.0.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``low`` and ``high`` are both scalars.\n        Otherwise, ``np.broadcast(low, high).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized uniform distribution.\n    \n    See Also\n    --------\n    randint : Discrete uniform distribution, yielding integers.\n    random_integers : Discrete uniform distribution over the closed\n                      interval ``[low, high]``.\n    random_sample : Floats uniformly distributed over ``[0, 1)``.\n    random : Alias for `random_sample`.\n    rand : Convenience function that accepts dimensions as input, e.g.,\n           ``rand(2,2)`` would generate a 2-by-2 array of floats,\n           uniformly distributed over ``[0, 1)``.\n    random.Generator.uniform: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density function of the uniform distribution is\n    \n    .. math:: p(x) = \\frac{1}{b - a}\n    \n    anywhere within the interval ``[a, b)``, and zero elsewhere.\n    \n    When ``high`` == ``low``, values of ``low`` will be returned.\n    If ``high`` < ``low``, the results are officially undefined\n    and may eventually raise an error, i.e. do not rely on this\n    function to behave when passed arguments satisfying that\n    inequality condition. The ``high`` limit may be included in the\n    returned array of floats due to floating-point rounding in the\n    equation ``low + (high-low) * random_sample()``. For example:\n    \n    >>> x = np.float32(5*0.99999999)\n    >>> x\n    np.float32(5.0)\n    \n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> s = np.random.uniform(-1,0,1000)\n    \n    All values are within the given interval:\n    \n    >>> np.all(s >= -1)\n    True\n    >>> np.all(s < 0)\n    True\n    \n    Display the histogram of the samples, along with the\n    probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, ignored = plt.hist(s, 15, density=True)\n    >>> plt.plot(bins, np.ones_like(bins), linewidth=2, color='r')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e5a6c655ae77c583f4ea18eab0a75e5ee6e0cff95941ef68421f3a4f39542dff",
            "fields": [
                {
                    "id": "sp3wr80a",
                    "encoding": "",
                    "name": "low",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Lower boundary of the output interval.  All values generated will be\ngreater than or equal to low.  The default value is 0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6tkcvbpl",
                    "encoding": "",
                    "name": "high",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Upper boundary of the output interval.  All values generated will be\nless than or equal to high.  The high limit may be included in the \nreturned array of floats due to floating-point rounding in the \nequation ``low + (high-low) * random_sample()``.  The default value \nis 1.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mudkih_f",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``low`` and ``high`` are both scalars.\nOtherwise, ``np.broadcast(low, high).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2ef2h668",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.uniform",
                    "defaultValue": "numpy.random.uniform",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bzlkcbny",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6pq8v8s1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "2kmf5iy3",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bfmher0l",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q2v7wh52",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iivongwc",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "3j7873ix",
            "name": "random.vonmises",
            "description": "vonmises(mu, kappa, size=None)\n    \n    Draw samples from a von Mises distribution.\n    \n    Samples are drawn from a von Mises distribution with specified mode\n    (mu) and concentration (kappa), on the interval [-pi, pi].\n    \n    The von Mises distribution (also known as the circular normal\n    distribution) is a continuous probability distribution on the unit\n    circle.  It may be thought of as the circular analogue of the normal\n    distribution.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.vonmises`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    mu : float or array_like of floats\n        Mode (\"center\") of the distribution.\n    kappa : float or array_like of floats\n        Concentration of the distribution, has to be >=0.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``mu`` and ``kappa`` are both scalars.\n        Otherwise, ``np.broadcast(mu, kappa).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized von Mises distribution.\n    \n    See Also\n    --------\n    scipy.stats.vonmises : probability density function, distribution, or\n        cumulative density function, etc.\n    random.Generator.vonmises: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density for the von Mises distribution is\n    \n    .. math:: p(x) = \\frac{e^{\\kappa cos(x-\\mu)}}{2\\pi I_0(\\kappa)},\n    \n    where :math:`\\mu` is the mode and :math:`\\kappa` the concentration,\n    and :math:`I_0(\\kappa)` is the modified Bessel function of order 0.\n    \n    The von Mises is named for Richard Edler von Mises, who was born in\n    Austria-Hungary, in what is now the Ukraine.  He fled to the United\n    States in 1939 and became a professor at Harvard.  He worked in\n    probability theory, aerodynamics, fluid mechanics, and philosophy of\n    science.\n    \n    References\n    ----------\n    .. [1] Abramowitz, M. and Stegun, I. A. (Eds.). \"Handbook of\n           Mathematical Functions with Formulas, Graphs, and Mathematical\n           Tables, 9th printing,\" New York: Dover, 1972.\n    .. [2] von Mises, R., \"Mathematical Theory of Probability\n           and Statistics\", New York: Academic Press, 1964.\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> mu, kappa = 0.0, 4.0 # mean and concentration\n    >>> s = np.random.vonmises(mu, kappa, 1000)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.special import i0  # doctest: +SKIP\n    >>> plt.hist(s, 50, density=True)\n    >>> x = np.linspace(-np.pi, np.pi, num=51)\n    >>> y = np.exp(kappa*np.cos(x-mu))/(2*np.pi*i0(kappa))  # doctest: +SKIP\n    >>> plt.plot(x, y, linewidth=2, color='r')  # doctest: +SKIP\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "469204742d430151c39240719c9e0c57e7a69d69879f855d6b9782ab187a92a4",
            "fields": [
                {
                    "id": "q6cja_tb",
                    "encoding": "",
                    "name": "mu",
                    "value": "",
                    "defaultValue": "",
                    "description": "Mode (\"center\") of the distribution.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ksyk9wnz",
                    "encoding": "",
                    "name": "kappa",
                    "value": "",
                    "defaultValue": "",
                    "description": "Concentration of the distribution, has to be >=0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9da5cqwf",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``mu`` and ``kappa`` are both scalars.\nOtherwise, ``np.broadcast(mu, kappa).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a58dvh1i",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.vonmises",
                    "defaultValue": "numpy.random.vonmises",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oypbip5i",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ibb13y06",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "mywjvylr",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ia4arat8",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q9ure6r9",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pxi4_mjz",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "p3849xim",
            "name": "random.wald",
            "description": "wald(mean, scale, size=None)\n    \n    Draw samples from a Wald, or inverse Gaussian, distribution.\n    \n    As the scale approaches infinity, the distribution becomes more like a\n    Gaussian. Some references claim that the Wald is an inverse Gaussian\n    with mean equal to 1, but this is by no means universal.\n    \n    The inverse Gaussian distribution was first studied in relationship to\n    Brownian motion. In 1956 M.C.K. Tweedie used the name inverse Gaussian\n    because there is an inverse relationship between the time to cover a\n    unit distance and distance covered in unit time.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.wald`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    mean : float or array_like of floats\n        Distribution mean, must be > 0.\n    scale : float or array_like of floats\n        Scale parameter, must be > 0.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``mean`` and ``scale`` are both scalars.\n        Otherwise, ``np.broadcast(mean, scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Wald distribution.\n    \n    See Also\n    --------\n    random.Generator.wald: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density function for the Wald distribution is\n    \n    .. math:: P(x;mean,scale) = \\sqrt{\\frac{scale}{2\\pi x^3}}e^\n                                \\frac{-scale(x-mean)^2}{2\\cdotp mean^2x}\n    \n    As noted above the inverse Gaussian distribution first arise\n    from attempts to model Brownian motion. It is also a\n    competitor to the Weibull for use in reliability modeling and\n    modeling stock returns and interest rate processes.\n    \n    References\n    ----------\n    .. [1] Brighton Webs Ltd., Wald Distribution,\n           https://web.archive.org/web/20090423014010/http://www.brighton-webs.co.uk:80/distributions/wald.asp\n    .. [2] Chhikara, Raj S., and Folks, J. Leroy, \"The Inverse Gaussian\n           Distribution: Theory : Methodology, and Applications\", CRC Press,\n           1988.\n    .. [3] Wikipedia, \"Inverse Gaussian distribution\"\n           https://en.wikipedia.org/wiki/Inverse_Gaussian_distribution\n    \n    Examples\n    --------\n    Draw values from the distribution and plot the histogram:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> h = plt.hist(np.random.wald(3, 2, 100000), bins=200, density=True)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2fbd3efe86f029193df5b3ef7c9c6579567acee53c91fa24a11abe0a1af1eb15",
            "fields": [
                {
                    "id": "_tphjohj",
                    "encoding": "",
                    "name": "mean",
                    "value": "",
                    "defaultValue": "",
                    "description": "Distribution mean, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y_f8afbc",
                    "encoding": "",
                    "name": "scale",
                    "value": "",
                    "defaultValue": "",
                    "description": "Scale parameter, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7v_xd6qa",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``mean`` and ``scale`` are both scalars.\nOtherwise, ``np.broadcast(mean, scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "grbk5eko",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.wald",
                    "defaultValue": "numpy.random.wald",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "at1xsza5",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cguarx0j",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "_0g6v71x",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_l12_89l",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t4edz9sp",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pi7b5dsm",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "27ydpg3i",
            "name": "random.weibull",
            "description": "weibull(a, size=None)\n    \n    Draw samples from a Weibull distribution.\n    \n    Draw samples from a 1-parameter Weibull distribution with the given\n    shape parameter `a`.\n    \n    .. math:: X = (-ln(U))^{1/a}\n    \n    Here, U is drawn from the uniform distribution over (0,1].\n    \n    The more common 2-parameter Weibull, including a scale parameter\n    :math:`\\lambda` is just :math:`X = \\lambda(-ln(U))^{1/a}`.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.weibull`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    a : float or array_like of floats\n        Shape parameter of the distribution.  Must be nonnegative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``a`` is a scalar.  Otherwise,\n        ``np.array(a).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Weibull distribution.\n    \n    See Also\n    --------\n    scipy.stats.weibull_max\n    scipy.stats.weibull_min\n    scipy.stats.genextreme\n    gumbel\n    random.Generator.weibull: which should be used for new code.\n    \n    Notes\n    -----\n    The Weibull (or Type III asymptotic extreme value distribution\n    for smallest values, SEV Type III, or Rosin-Rammler\n    distribution) is one of a class of Generalized Extreme Value\n    (GEV) distributions used in modeling extreme value problems.\n    This class includes the Gumbel and Frechet distributions.\n    \n    The probability density for the Weibull distribution is\n    \n    .. math:: p(x) = \\frac{a}\n                     {\\lambda}(\\frac{x}{\\lambda})^{a-1}e^{-(x/\\lambda)^a},\n    \n    where :math:`a` is the shape and :math:`\\lambda` the scale.\n    \n    The function has its peak (the mode) at\n    :math:`\\lambda(\\frac{a-1}{a})^{1/a}`.\n    \n    When ``a = 1``, the Weibull distribution reduces to the exponential\n    distribution.\n    \n    References\n    ----------\n    .. [1] Waloddi Weibull, Royal Technical University, Stockholm,\n           1939 \"A Statistical Theory Of The Strength Of Materials\",\n           Ingeniorsvetenskapsakademiens Handlingar Nr 151, 1939,\n           Generalstabens Litografiska Anstalts Forlag, Stockholm.\n    .. [2] Waloddi Weibull, \"A Statistical Distribution Function of\n           Wide Applicability\", Journal Of Applied Mechanics ASME Paper\n           1951.\n    .. [3] Wikipedia, \"Weibull distribution\",\n           https://en.wikipedia.org/wiki/Weibull_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> a = 5. # shape\n    >>> s = np.random.weibull(a, 1000)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> x = np.arange(1,100.)/50.\n    >>> def weib(x,n,a):\n    ...     return (a / n) * (x / n)**(a - 1) * np.exp(-(x / n)**a)\n    \n    >>> count, bins, ignored = plt.hist(np.random.weibull(5.,1000))\n    >>> x = np.arange(1,100.)/50.\n    >>> scale = count.max()/weib(x, 1., 5.).max()\n    >>> plt.plot(x, weib(x, 1., 5.)*scale)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9a1073a37d6fa6eaa905aee6c38fa583405c738f3b27c0b6b7686dc9f8758ff3",
            "fields": [
                {
                    "id": "_r47byaf",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape parameter of the distribution.  Must be nonnegative.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y3q_3jr8",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``a`` is a scalar.  Otherwise,\n``np.array(a).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "12_x43f9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.weibull",
                    "defaultValue": "numpy.random.weibull",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3crfb9j2",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mlht7gx8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "6kix0egj",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a17ry7cu",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hrwkyz7a",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "guffzd10",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "8_u6xdhe",
            "name": "random.zipf",
            "description": "zipf(a, size=None)\n    \n    Draw samples from a Zipf distribution.\n    \n    Samples are drawn from a Zipf distribution with specified parameter\n    `a` > 1.\n    \n    The Zipf distribution (also known as the zeta distribution) is a\n    discrete probability distribution that satisfies Zipf's law: the\n    frequency of an item is inversely proportional to its rank in a\n    frequency table.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.zipf`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    a : float or array_like of floats\n        Distribution parameter. Must be greater than 1.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``a`` is a scalar. Otherwise,\n        ``np.array(a).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Zipf distribution.\n    \n    See Also\n    --------\n    scipy.stats.zipf : probability density function, distribution, or\n        cumulative density function, etc.\n    random.Generator.zipf: which should be used for new code.\n    \n    Notes\n    -----\n    The probability mass function (PMF) for the Zipf distribution is\n    \n    .. math:: p(k) = \\frac{k^{-a}}{\\zeta(a)},\n    \n    for integers :math:`k \\geq 1`, where :math:`\\zeta` is the Riemann Zeta\n    function.\n    \n    It is named for the American linguist George Kingsley Zipf, who noted\n    that the frequency of any word in a sample of a language is inversely\n    proportional to its rank in the frequency table.\n    \n    References\n    ----------\n    .. [1] Zipf, G. K., \"Selected Studies of the Principle of Relative\n           Frequency in Language,\" Cambridge, MA: Harvard Univ. Press,\n           1932.\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> a = 4.0\n    >>> n = 20000\n    >>> s = np.random.zipf(a, n)\n    \n    Display the histogram of the samples, along with\n    the expected histogram based on the probability\n    density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.special import zeta  # doctest: +SKIP\n    \n    `bincount` provides a fast histogram for small integers.\n    \n    >>> count = np.bincount(s)\n    >>> k = np.arange(1, s.max() + 1)\n    \n    >>> plt.bar(k, count[1:], alpha=0.5, label='sample count')\n    >>> plt.plot(k, n*(k**-a)/zeta(a), 'k.-', alpha=0.5,\n    ...          label='expected count')   # doctest: +SKIP\n    >>> plt.semilogy()\n    >>> plt.grid(alpha=0.4)\n    >>> plt.legend()\n    >>> plt.title(f'Zipf sample, a={a}, size={n}')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "77113ac5ce1707d57b7f69c08176268d9d73d528f123827306197b5e74b60fbc",
            "fields": [
                {
                    "id": "krx9xvdl",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Distribution parameter. Must be greater than 1.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w12avbau",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``a`` is a scalar. Otherwise,\n``np.array(a).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c2f2fufl",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.zipf",
                    "defaultValue": "numpy.random.zipf",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bjwxm045",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4jg8glz2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "k52cxlu1",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t6qldy_8",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random",
                    "defaultValue": "numpy.random",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8wexwc42",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "58qc1tf3",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ncbn0aag",
            "name": "mtrand.beta",
            "description": "beta(a, b, size=None)\n    \n    Draw samples from a Beta distribution.\n    \n    The Beta distribution is a special case of the Dirichlet distribution,\n    and is related to the Gamma distribution.  It has the probability\n    distribution function\n    \n    .. math:: f(x; a,b) = \\frac{1}{B(\\alpha, \\beta)} x^{\\alpha - 1}\n                                                     (1 - x)^{\\beta - 1},\n    \n    where the normalization, B, is the beta function,\n    \n    .. math:: B(\\alpha, \\beta) = \\int_0^1 t^{\\alpha - 1}\n                                 (1 - t)^{\\beta - 1} dt.\n    \n    It is often seen in Bayesian inference and order statistics.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.beta`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    \n    Parameters\n    ----------\n    a : float or array_like of floats\n        Alpha, positive (>0).\n    b : float or array_like of floats\n        Beta, positive (>0).\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``a`` and ``b`` are both scalars.\n        Otherwise, ``np.broadcast(a, b).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized beta distribution.\n    \n    See Also\n    --------\n    random.Generator.beta: which should be used for new code.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "53ec49e50d237e085576ad803d2fbde90361bbabbb2471bc2287cd27a26ba5a3",
            "fields": [
                {
                    "id": "8ftkrurx",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Alpha, positive (>0).",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f2az6h46",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Beta, positive (>0).",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1gxlqnil",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``a`` and ``b`` are both scalars.\nOtherwise, ``np.broadcast(a, b).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f5jcknto",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.beta",
                    "defaultValue": "numpy.random.mtrand.beta",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tbuqq_bk",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0mk5pnyc",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "7pc1x00d",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8feehikn",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s5hsp50p",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dehinvxm",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "14dfcazv",
            "name": "mtrand.binomial",
            "description": "binomial(n, p, size=None)\n    \n    Draw samples from a binomial distribution.\n    \n    Samples are drawn from a binomial distribution with specified\n    parameters, n trials and p probability of success where\n    n an integer >= 0 and p is in the interval [0,1]. (n may be\n    input as a float, but it is truncated to an integer in use)\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.binomial`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    n : int or array_like of ints\n        Parameter of the distribution, >= 0. Floats are also accepted,\n        but they will be truncated to integers.\n    p : float or array_like of floats\n        Parameter of the distribution, >= 0 and <=1.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``n`` and ``p`` are both scalars.\n        Otherwise, ``np.broadcast(n, p).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized binomial distribution, where\n        each sample is equal to the number of successes over the n trials.\n    \n    See Also\n    --------\n    scipy.stats.binom : probability density function, distribution or\n        cumulative density function, etc.\n    random.Generator.binomial: which should be used for new code.\n    \n    Notes\n    -----\n    The probability mass function (PMF) for the binomial distribution is\n    \n    .. math:: P(N) = \\binom{n}{N}p^N(1-p)^{n-N},\n    \n    where :math:`n` is the number of trials, :math:`p` is the probability\n    of success, and :math:`N` is the number of successes.\n    \n    When estimating the standard error of a proportion in a population by\n    using a random sample, the normal distribution works well unless the\n    product p*n <=5, where p = population proportion estimate, and n =\n    number of samples, in which case the binomial distribution is used\n    instead. For example, a sample of 15 people shows 4 who are left\n    handed, and 11 who are right handed. Then p = 4/15 = 27%. 0.27*15 = 4,\n    so the binomial distribution should be used in this case.\n    \n    References\n    ----------\n    .. [1] Dalgaard, Peter, \"Introductory Statistics with R\",\n           Springer-Verlag, 2002.\n    .. [2] Glantz, Stanton A. \"Primer of Biostatistics.\", McGraw-Hill,\n           Fifth Edition, 2002.\n    .. [3] Lentner, Marvin, \"Elementary Applied Statistics\", Bogden\n           and Quigley, 1972.\n    .. [4] Weisstein, Eric W. \"Binomial Distribution.\" From MathWorld--A\n           Wolfram Web Resource.\n           https://mathworld.wolfram.com/BinomialDistribution.html\n    .. [5] Wikipedia, \"Binomial distribution\",\n           https://en.wikipedia.org/wiki/Binomial_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> n, p = 10, .5  # number of trials, probability of each trial\n    >>> s = np.random.binomial(n, p, 1000)\n    # result of flipping a coin 10 times, tested 1000 times.\n    \n    A real world example. A company drills 9 wild-cat oil exploration\n    wells, each with an estimated probability of success of 0.1. All nine\n    wells fail. What is the probability of that happening?\n    \n    Let's do 20,000 trials of the model, and count the number that\n    generate zero positive results.\n    \n    >>> sum(np.random.binomial(9, 0.1, 20000) == 0)/20000.\n    # answer = 0.38885, or 38%.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e51751c89ea0bf96d437e2061f42cc295d119c467ef3d7bc1962f6d215fc3b59",
            "fields": [
                {
                    "id": "qts_ptvt",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "Parameter of the distribution, >= 0. Floats are also accepted,\nbut they will be truncated to integers.",
                    "type": "int or arraylike of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sjzkiee8",
                    "encoding": "",
                    "name": "p",
                    "value": "",
                    "defaultValue": "",
                    "description": "Parameter of the distribution, >= 0 and <=1.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vatjpooh",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``n`` and ``p`` are both scalars.\nOtherwise, ``np.broadcast(n, p).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qulzhc_i",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.binomial",
                    "defaultValue": "numpy.random.mtrand.binomial",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c3v3bk13",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cl91bzfl",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "jlz_ytos",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_09_yz3s",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5g7hrupp",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "07b48qgi",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "xnoxonxz",
            "name": "mtrand.bytes",
            "description": "bytes(length)\n    \n    Return random bytes.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.bytes`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    length : int\n        Number of random bytes.\n    \n    Returns\n    -------\n    out : bytes\n        String of length `length`.\n    \n    See Also\n    --------\n    random.Generator.bytes: which should be used for new code.\n    \n    Examples\n    --------\n    >>> np.random.bytes(10)\n    b' eh\\x85\\x022SZ\\xbf\\xa4' #random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "09e20e60e035ee78d40f71aba2bc31d396a42ea858ab37541576ad3a16e62492",
            "fields": [
                {
                    "id": "4a1et0xx",
                    "encoding": "",
                    "name": "length",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of random bytes.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8m4higy6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.bytes",
                    "defaultValue": "numpy.random.mtrand.bytes",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rap1gcbq",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p4cq6heh",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "e_2v3kn_",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4jbr7euc",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h3fpdr__",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sawb0rcb",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "5l6cgek6",
            "name": "mtrand.chisquare",
            "description": "chisquare(df, size=None)\n    \n    Draw samples from a chi-square distribution.\n    \n    When `df` independent random variables, each with standard normal\n    distributions (mean 0, variance 1), are squared and summed, the\n    resulting distribution is chi-square (see Notes).  This distribution\n    is often used in hypothesis testing.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.chisquare`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    df : float or array_like of floats\n         Number of degrees of freedom, must be > 0.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``df`` is a scalar.  Otherwise,\n        ``np.array(df).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized chi-square distribution.\n    \n    Raises\n    ------\n    ValueError\n        When `df` <= 0 or when an inappropriate `size` (e.g. ``size=-1``)\n        is given.\n    \n    See Also\n    --------\n    random.Generator.chisquare: which should be used for new code.\n    \n    Notes\n    -----\n    The variable obtained by summing the squares of `df` independent,\n    standard normally distributed random variables:\n    \n    .. math:: Q = \\sum_{i=1}^{\\mathtt{df}} X^2_i\n    \n    is chi-square distributed, denoted\n    \n    .. math:: Q \\sim \\chi^2_k.\n    \n    The probability density function of the chi-squared distribution is\n    \n    .. math:: p(x) = \\frac{(1/2)^{k/2}}{\\Gamma(k/2)}\n                     x^{k/2 - 1} e^{-x/2},\n    \n    where :math:`\\Gamma` is the gamma function,\n    \n    .. math:: \\Gamma(x) = \\int_0^{-\\infty} t^{x - 1} e^{-t} dt.\n    \n    References\n    ----------\n    .. [1] NIST \"Engineering Statistics Handbook\"\n           https://www.itl.nist.gov/div898/handbook/eda/section3/eda3666.htm\n    \n    Examples\n    --------\n    >>> np.random.chisquare(2,4)\n    array([ 1.89920014,  9.00867716,  3.13710533,  5.62318272]) # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "107b38a71586ad394db38ee00197435c10aacfa0fb09d666928e0e4db262c78c",
            "fields": [
                {
                    "id": "_m2s5m76",
                    "encoding": "",
                    "name": "df",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of degrees of freedom, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gcagn7q4",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``df`` is a scalar.  Otherwise,\n``np.array(df).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kik39f9d",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.chisquare",
                    "defaultValue": "numpy.random.mtrand.chisquare",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9flibtd0",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qzt6sadt",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "qckry7sn",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "070tsq1o",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d5rryczr",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "td2z91bo",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "hmtbcjys",
            "name": "mtrand.choice",
            "description": "choice(a, size=None, replace=True, p=None)\n    \n    Generates a random sample from a given 1-D array\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.choice`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    .. warning::\n        This function uses the C-long dtype, which is 32bit on windows\n        and otherwise 64bit on 64bit platforms (and 32bit on 32bit ones).\n        Since NumPy 2.0, NumPy's default integer is 32bit on 32bit platforms\n        and 64bit on 64bit platforms.\n    \n    \n    Parameters\n    ----------\n    a : 1-D array-like or int\n        If an ndarray, a random sample is generated from its elements.\n        If an int, the random sample is generated as if it were ``np.arange(a)``\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    replace : boolean, optional\n        Whether the sample is with or without replacement. Default is True,\n        meaning that a value of ``a`` can be selected multiple times.\n    p : 1-D array-like, optional\n        The probabilities associated with each entry in a.\n        If not given, the sample assumes a uniform distribution over all\n        entries in ``a``.\n    \n    Returns\n    -------\n    samples : single item or ndarray\n        The generated random samples\n    \n    Raises\n    ------\n    ValueError\n        If a is an int and less than zero, if a or p are not 1-dimensional,\n        if a is an array-like of size 0, if p is not a vector of\n        probabilities, if a and p have different lengths, or if\n        replace=False and the sample size is greater than the population\n        size\n    \n    See Also\n    --------\n    randint, shuffle, permutation\n    random.Generator.choice: which should be used in new code\n    \n    Notes\n    -----\n    Setting user-specified probabilities through ``p`` uses a more general but less\n    efficient sampler than the default. The general sampler produces a different sample\n    than the optimized sampler even if each element of ``p`` is 1 / len(a).\n    \n    Sampling random rows from a 2-D array is not possible with this function,\n    but is possible with `Generator.choice` through its ``axis`` keyword.\n    \n    Examples\n    --------\n    Generate a uniform random sample from np.arange(5) of size 3:\n    \n    >>> np.random.choice(5, 3)\n    array([0, 3, 4]) # random\n    >>> #This is equivalent to np.random.randint(0,5,3)\n    \n    Generate a non-uniform random sample from np.arange(5) of size 3:\n    \n    >>> np.random.choice(5, 3, p=[0.1, 0, 0.3, 0.6, 0])\n    array([3, 3, 0]) # random\n    \n    Generate a uniform random sample from np.arange(5) of size 3 without\n    replacement:\n    \n    >>> np.random.choice(5, 3, replace=False)\n    array([3,1,0]) # random\n    >>> #This is equivalent to np.random.permutation(np.arange(5))[:3]\n    \n    Generate a non-uniform random sample from np.arange(5) of size\n    3 without replacement:\n    \n    >>> np.random.choice(5, 3, replace=False, p=[0.1, 0, 0.3, 0.6, 0])\n    array([2, 3, 0]) # random\n    \n    Any of the above can be repeated with an arbitrary array-like\n    instead of just integers. For instance:\n    \n    >>> aa_milne_arr = ['pooh', 'rabbit', 'piglet', 'Christopher']\n    >>> np.random.choice(aa_milne_arr, 5, p=[0.5, 0.1, 0.1, 0.3])\n    array(['pooh', 'pooh', 'pooh', 'Christopher', 'piglet'], # random\n          dtype='<U11')",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6dc8c518c6991e5d7bc4c9fefaf028fb18c446012a314f3befaa29b199b570ca",
            "fields": [
                {
                    "id": "ehxqmich",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "If an ndarray, a random sample is generated from its elements.\nIf an int, the random sample is generated as if it were ``np.arange(a)``",
                    "type": "1-D array-like or int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xpu1g5o7",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "89fz2ukc",
                    "encoding": "",
                    "name": "replace",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether the sample is with or without replacement. Default is True,\nmeaning that a value of ``a`` can be selected multiple times.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vx6lpue5",
                    "encoding": "",
                    "name": "p",
                    "value": "",
                    "defaultValue": "",
                    "description": "The probabilities associated with each entry in a.\nIf not given, the sample assumes a uniform distribution over all\nentries in ``a``.",
                    "type": "1-D array-like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jswj8fwc",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.choice",
                    "defaultValue": "numpy.random.mtrand.choice",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0oxbj6m3",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x4nl9qtw",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "v9ht1nbk",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "42f0fj1d",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k96xq57w",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u9kzagzi",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "n6_ao3l2",
            "name": "mtrand.dirichlet",
            "description": "dirichlet(alpha, size=None)\n    \n    Draw samples from the Dirichlet distribution.\n    \n    Draw `size` samples of dimension k from a Dirichlet distribution. A\n    Dirichlet-distributed random variable can be seen as a multivariate\n    generalization of a Beta distribution. The Dirichlet distribution\n    is a conjugate prior of a multinomial distribution in Bayesian\n    inference.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.dirichlet`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    alpha : sequence of floats, length k\n        Parameter of the distribution (length ``k`` for sample of\n        length ``k``).\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        vector of length ``k`` is returned.\n    \n    Returns\n    -------\n    samples : ndarray,\n        The drawn samples, of shape ``(size, k)``.\n    \n    Raises\n    ------\n    ValueError\n        If any value in ``alpha`` is less than or equal to zero\n    \n    See Also\n    --------\n    random.Generator.dirichlet: which should be used for new code.\n    \n    Notes\n    -----\n    The Dirichlet distribution is a distribution over vectors\n    :math:`x` that fulfil the conditions :math:`x_i>0` and\n    :math:`\\sum_{i=1}^k x_i = 1`.\n    \n    The probability density function :math:`p` of a\n    Dirichlet-distributed random vector :math:`X` is\n    proportional to\n    \n    .. math:: p(x) \\propto \\prod_{i=1}^{k}{x^{\\alpha_i-1}_i},\n    \n    where :math:`\\alpha` is a vector containing the positive\n    concentration parameters.\n    \n    The method uses the following property for computation: let :math:`Y`\n    be a random vector which has components that follow a standard gamma\n    distribution, then :math:`X = \\frac{1}{\\sum_{i=1}^k{Y_i}} Y`\n    is Dirichlet-distributed\n    \n    References\n    ----------\n    .. [1] David McKay, \"Information Theory, Inference and Learning\n           Algorithms,\" chapter 23,\n           https://www.inference.org.uk/mackay/itila/\n    .. [2] Wikipedia, \"Dirichlet distribution\",\n           https://en.wikipedia.org/wiki/Dirichlet_distribution\n    \n    Examples\n    --------\n    Taking an example cited in Wikipedia, this distribution can be used if\n    one wanted to cut strings (each of initial length 1.0) into K pieces\n    with different lengths, where each piece had, on average, a designated\n    average length, but allowing some variation in the relative sizes of\n    the pieces.\n    \n    >>> s = np.random.dirichlet((10, 5, 3), 20).transpose()\n    \n    >>> import matplotlib.pyplot as plt\n    >>> plt.barh(range(20), s[0])\n    >>> plt.barh(range(20), s[1], left=s[0], color='g')\n    >>> plt.barh(range(20), s[2], left=s[0]+s[1], color='r')\n    >>> plt.title(\"Lengths of Strings\")",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "959f2e7a302ed78bf80aa1538ffa6108bfe3ae7760fc8b78c5f9a29d27a07f98",
            "fields": [
                {
                    "id": "ubbffrzk",
                    "encoding": "",
                    "name": "alpha",
                    "value": "",
                    "defaultValue": "",
                    "description": "Parameter of the distribution (length ``k`` for sample of\nlength ``k``).",
                    "type": "sequence of floats, length k",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s8b_big9",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nvector of length ``k`` is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q3a5sy_9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.dirichlet",
                    "defaultValue": "numpy.random.mtrand.dirichlet",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "66j8rut7",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z88n5pcy",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "pndysrbq",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "clj9ltk4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eezzfo17",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kqmp8lku",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "_zh6vtk0",
            "name": "mtrand.exponential",
            "description": "exponential(scale=1.0, size=None)\n    \n    Draw samples from an exponential distribution.\n    \n    Its probability density function is\n    \n    .. math:: f(x; \\frac{1}{\\beta}) = \\frac{1}{\\beta} \\exp(-\\frac{x}{\\beta}),\n    \n    for ``x > 0`` and 0 elsewhere. :math:`\\beta` is the scale parameter,\n    which is the inverse of the rate parameter :math:`\\lambda = 1/\\beta`.\n    The rate parameter is an alternative, widely used parameterization\n    of the exponential distribution [3]_.\n    \n    The exponential distribution is a continuous analogue of the\n    geometric distribution.  It describes many common situations, such as\n    the size of raindrops measured over many rainstorms [1]_, or the time\n    between page requests to Wikipedia [2]_.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.exponential`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    scale : float or array_like of floats\n        The scale parameter, :math:`\\beta = 1/\\lambda`. Must be\n        non-negative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``scale`` is a scalar.  Otherwise,\n        ``np.array(scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized exponential distribution.\n    \n    Examples\n    --------\n    A real world example: Assume a company has 10000 customer support \n    agents and the average time between customer calls is 4 minutes.\n    \n    >>> n = 10000\n    >>> time_between_calls = np.random.default_rng().exponential(scale=4, size=n)\n    \n    What is the probability that a customer will call in the next \n    4 to 5 minutes? \n    \n    >>> x = ((time_between_calls < 5).sum())/n \n    >>> y = ((time_between_calls < 4).sum())/n\n    >>> x-y\n    0.08 # may vary\n    \n    See Also\n    --------\n    random.Generator.exponential: which should be used for new code.\n    \n    References\n    ----------\n    .. [1] Peyton Z. Peebles Jr., \"Probability, Random Variables and\n           Random Signal Principles\", 4th ed, 2001, p. 57.\n    .. [2] Wikipedia, \"Poisson process\",\n           https://en.wikipedia.org/wiki/Poisson_process\n    .. [3] Wikipedia, \"Exponential distribution\",\n           https://en.wikipedia.org/wiki/Exponential_distribution",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "01e11814b7321a3b7add658b04ff9e0312f105d7daf92e24369161e8b1dc6ce4",
            "fields": [
                {
                    "id": "0ks1a9yh",
                    "encoding": "",
                    "name": "scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "The scale parameter, :math:`\\beta = 1/\\lambda`. Must be\nnon-negative.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "efk8dkmy",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``scale`` is a scalar.  Otherwise,\n``np.array(scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e99w9vna",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.exponential",
                    "defaultValue": "numpy.random.mtrand.exponential",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j4tcxvn3",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xdbr1e7s",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "58s98yy7",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u2jxm_57",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d76gpps4",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pukt9iik",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "i_dkbifj",
            "name": "mtrand.f",
            "description": "f(dfnum, dfden, size=None)\n    \n    Draw samples from an F distribution.\n    \n    Samples are drawn from an F distribution with specified parameters,\n    `dfnum` (degrees of freedom in numerator) and `dfden` (degrees of\n    freedom in denominator), where both parameters must be greater than\n    zero.\n    \n    The random variate of the F distribution (also known as the\n    Fisher distribution) is a continuous probability distribution\n    that arises in ANOVA tests, and is the ratio of two chi-square\n    variates.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.f`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    dfnum : float or array_like of floats\n        Degrees of freedom in numerator, must be > 0.\n    dfden : float or array_like of float\n        Degrees of freedom in denominator, must be > 0.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``dfnum`` and ``dfden`` are both scalars.\n        Otherwise, ``np.broadcast(dfnum, dfden).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Fisher distribution.\n    \n    See Also\n    --------\n    scipy.stats.f : probability density function, distribution or\n        cumulative density function, etc.\n    random.Generator.f: which should be used for new code.\n    \n    Notes\n    -----\n    The F statistic is used to compare in-group variances to between-group\n    variances. Calculating the distribution depends on the sampling, and\n    so it is a function of the respective degrees of freedom in the\n    problem.  The variable `dfnum` is the number of samples minus one, the\n    between-groups degrees of freedom, while `dfden` is the within-groups\n    degrees of freedom, the sum of the number of samples in each group\n    minus the number of groups.\n    \n    References\n    ----------\n    .. [1] Glantz, Stanton A. \"Primer of Biostatistics.\", McGraw-Hill,\n           Fifth Edition, 2002.\n    .. [2] Wikipedia, \"F-distribution\",\n           https://en.wikipedia.org/wiki/F-distribution\n    \n    Examples\n    --------\n    An example from Glantz[1], pp 47-40:\n    \n    Two groups, children of diabetics (25 people) and children from people\n    without diabetes (25 controls). Fasting blood glucose was measured,\n    case group had a mean value of 86.1, controls had a mean value of\n    82.2. Standard deviations were 2.09 and 2.49 respectively. Are these\n    data consistent with the null hypothesis that the parents diabetic\n    status does not affect their children's blood glucose levels?\n    Calculating the F statistic from the data gives a value of 36.01.\n    \n    Draw samples from the distribution:\n    \n    >>> dfnum = 1. # between group degrees of freedom\n    >>> dfden = 48. # within groups degrees of freedom\n    >>> s = np.random.f(dfnum, dfden, 1000)\n    \n    The lower bound for the top 1% of the samples is :\n    \n    >>> np.sort(s)[-10]\n    7.61988120985 # random\n    \n    So there is about a 1% chance that the F statistic will exceed 7.62,\n    the measured value is 36, so the null hypothesis is rejected at the 1%\n    level.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c3e5072f3f20aa010bc9fe7ac9cad14614b66a72d207c7ca524551a5cdb28434",
            "fields": [
                {
                    "id": "ty37kz_1",
                    "encoding": "",
                    "name": "dfnum",
                    "value": "",
                    "defaultValue": "",
                    "description": "Degrees of freedom in numerator, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bnul2b_a",
                    "encoding": "",
                    "name": "dfden",
                    "value": "",
                    "defaultValue": "",
                    "description": "Degrees of freedom in denominator, must be > 0.",
                    "type": "float or arraylike of float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kb7h1qql",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``dfnum`` and ``dfden`` are both scalars.\nOtherwise, ``np.broadcast(dfnum, dfden).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gmp06n8w",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.f",
                    "defaultValue": "numpy.random.mtrand.f",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y463zpmz",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i91gn00c",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "v8o11_vl",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "du2faoj2",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wy22dru2",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "99pkwa2b",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "6r49k57l",
            "name": "mtrand.gamma",
            "description": "gamma(shape, scale=1.0, size=None)\n    \n    Draw samples from a Gamma distribution.\n    \n    Samples are drawn from a Gamma distribution with specified parameters,\n    `shape` (sometimes designated \"k\") and `scale` (sometimes designated\n    \"theta\"), where both parameters are > 0.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.gamma`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    shape : float or array_like of floats\n        The shape of the gamma distribution. Must be non-negative.\n    scale : float or array_like of floats, optional\n        The scale of the gamma distribution. Must be non-negative.\n        Default is equal to 1.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``shape`` and ``scale`` are both scalars.\n        Otherwise, ``np.broadcast(shape, scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized gamma distribution.\n    \n    See Also\n    --------\n    scipy.stats.gamma : probability density function, distribution or\n        cumulative density function, etc.\n    random.Generator.gamma: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density for the Gamma distribution is\n    \n    .. math:: p(x) = x^{k-1}\\frac{e^{-x/\\theta}}{\\theta^k\\Gamma(k)},\n    \n    where :math:`k` is the shape and :math:`\\theta` the scale,\n    and :math:`\\Gamma` is the Gamma function.\n    \n    The Gamma distribution is often used to model the times to failure of\n    electronic components, and arises naturally in processes for which the\n    waiting times between Poisson distributed events are relevant.\n    \n    References\n    ----------\n    .. [1] Weisstein, Eric W. \"Gamma Distribution.\" From MathWorld--A\n           Wolfram Web Resource.\n           https://mathworld.wolfram.com/GammaDistribution.html\n    .. [2] Wikipedia, \"Gamma distribution\",\n           https://en.wikipedia.org/wiki/Gamma_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> shape, scale = 2., 2.  # mean=4, std=2*sqrt(2)\n    >>> s = np.random.gamma(shape, scale, 1000)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> import scipy.special as sps  # doctest: +SKIP\n    >>> count, bins, ignored = plt.hist(s, 50, density=True)\n    >>> y = bins**(shape-1)*(np.exp(-bins/scale) /  # doctest: +SKIP\n    ...                      (sps.gamma(shape)*scale**shape))\n    >>> plt.plot(bins, y, linewidth=2, color='r')  # doctest: +SKIP\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "05011ce6fc66cb82fe3944b7c2b46d38bbbaaa855694ea691b7a5a083fc14f04",
            "fields": [
                {
                    "id": "r61svtcd",
                    "encoding": "",
                    "name": "shape",
                    "value": "",
                    "defaultValue": "",
                    "description": "The shape of the gamma distribution. Must be non-negative.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xv1_k_gi",
                    "encoding": "",
                    "name": "scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "The scale of the gamma distribution. Must be non-negative.\nDefault is equal to 1.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hku70tfw",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``shape`` and ``scale`` are both scalars.\nOtherwise, ``np.broadcast(shape, scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o_k8cmq1",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.gamma",
                    "defaultValue": "numpy.random.mtrand.gamma",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6ve8d09o",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_6piaw8b",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "d1282k9y",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o3faktnl",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8mqcuxqn",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "207og5x_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "8c4w8ixd",
            "name": "mtrand.geometric",
            "description": "geometric(p, size=None)\n    \n    Draw samples from the geometric distribution.\n    \n    Bernoulli trials are experiments with one of two outcomes:\n    success or failure (an example of such an experiment is flipping\n    a coin).  The geometric distribution models the number of trials\n    that must be run in order to achieve success.  It is therefore\n    supported on the positive integers, ``k = 1, 2, ...``.\n    \n    The probability mass function of the geometric distribution is\n    \n    .. math:: f(k) = (1 - p)^{k - 1} p\n    \n    where `p` is the probability of success of an individual trial.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.geometric`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    p : float or array_like of floats\n        The probability of success of an individual trial.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``p`` is a scalar.  Otherwise,\n        ``np.array(p).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized geometric distribution.\n    \n    See Also\n    --------\n    random.Generator.geometric: which should be used for new code.\n    \n    Examples\n    --------\n    Draw ten thousand values from the geometric distribution,\n    with the probability of an individual success equal to 0.35:\n    \n    >>> z = np.random.geometric(p=0.35, size=10000)\n    \n    How many trials succeeded after a single run?\n    \n    >>> (z == 1).sum() / 10000.\n    0.34889999999999999 #random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d4c40ca5cbb737d3f677c2e1464503277b1695aec0a4559dc65bc133f8eb5cad",
            "fields": [
                {
                    "id": "6ni_mn_1",
                    "encoding": "",
                    "name": "p",
                    "value": "",
                    "defaultValue": "",
                    "description": "The probability of success of an individual trial.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "any6oq9c",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``p`` is a scalar.  Otherwise,\n``np.array(p).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cv9667cn",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.geometric",
                    "defaultValue": "numpy.random.mtrand.geometric",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fnmeugp4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r1x3avi1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "3bhry5pu",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wrd0pji9",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e9t032le",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y1i2ai_3",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "xz_fkjyh",
            "name": "mtrand.get_bit_generator",
            "description": "Returns the singleton RandomState's bit generator\n    \n    Returns\n    -------\n    BitGenerator\n        The bit generator that underlies the singleton RandomState instance\n    \n    Notes\n    -----\n    The singleton RandomState provides the random variate generators in the\n    ``numpy.random`` namespace. This function, and its counterpart set method,\n    provides a path to hot-swap the default MT19937 bit generator with a\n    user provided alternative. These function are intended to provide\n    a continuous path where a single underlying bit generator can be\n    used both with an instance of ``Generator`` and with the singleton\n    instance of RandomState.\n    \n    See Also\n    --------\n    set_bit_generator\n    numpy.random.Generator",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6662de5df18ae6de9f1b9fd15f39c07ae62bb082873614044096953b77dafdc8",
            "fields": [
                {
                    "id": "pwe7qgwy",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.get_bit_generator",
                    "defaultValue": "numpy.random.mtrand.get_bit_generator",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h_3qc_5z",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v07lsqwh",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0bp978cg",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f_qnrwxr",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yope2l7s",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s9yjofj3",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "3pi9ksvz",
            "name": "mtrand.get_state",
            "description": "get_state(legacy=True)\n    \n    Return a tuple representing the internal state of the generator.\n    \n    For more details, see `set_state`.\n    \n    Parameters\n    ----------\n    legacy : bool, optional\n        Flag indicating to return a legacy tuple state when the BitGenerator\n        is MT19937, instead of a dict. Raises ValueError if the underlying\n        bit generator is not an instance of MT19937.\n    \n    Returns\n    -------\n    out : {tuple(str, ndarray of 624 uints, int, int, float), dict}\n        If legacy is True, the returned tuple has the following items:\n    \n        1. the string 'MT19937'.\n        2. a 1-D array of 624 unsigned integer keys.\n        3. an integer ``pos``.\n        4. an integer ``has_gauss``.\n        5. a float ``cached_gaussian``.\n    \n        If `legacy` is False, or the BitGenerator is not MT19937, then\n        state is returned as a dictionary.\n    \n    See Also\n    --------\n    set_state\n    \n    Notes\n    -----\n    `set_state` and `get_state` are not needed to work with any of the\n    random distributions in NumPy. If the internal state is manually altered,\n    the user should know exactly what he/she is doing.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "35aaffa373a84e4a046e9b3944d75aabbb31b8f82b3d68cc01e409ecba687617",
            "fields": [
                {
                    "id": "vxwrqf80",
                    "encoding": "",
                    "name": "legacy",
                    "value": true,
                    "defaultValue": true,
                    "description": "Flag indicating to return a legacy tuple state when the BitGenerator\nis MT19937, instead of a dict. Raises ValueError if the underlying\nbit generator is not an instance of MT19937.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xcaft0vb",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.get_state",
                    "defaultValue": "numpy.random.mtrand.get_state",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8lhwpp8s",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hgriiuda",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "cwg3i8pd",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5w9clnfl",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_6yptlkg",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6iyd66_y",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "qmczparn",
            "name": "mtrand.gumbel",
            "description": "gumbel(loc=0.0, scale=1.0, size=None)\n    \n    Draw samples from a Gumbel distribution.\n    \n    Draw samples from a Gumbel distribution with specified location and\n    scale.  For more information on the Gumbel distribution, see\n    Notes and References below.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.gumbel`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    loc : float or array_like of floats, optional\n        The location of the mode of the distribution. Default is 0.\n    scale : float or array_like of floats, optional\n        The scale parameter of the distribution. Default is 1. Must be non-\n        negative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``loc`` and ``scale`` are both scalars.\n        Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Gumbel distribution.\n    \n    See Also\n    --------\n    scipy.stats.gumbel_l\n    scipy.stats.gumbel_r\n    scipy.stats.genextreme\n    weibull\n    random.Generator.gumbel: which should be used for new code.\n    \n    Notes\n    -----\n    The Gumbel (or Smallest Extreme Value (SEV) or the Smallest Extreme\n    Value Type I) distribution is one of a class of Generalized Extreme\n    Value (GEV) distributions used in modeling extreme value problems.\n    The Gumbel is a special case of the Extreme Value Type I distribution\n    for maximums from distributions with \"exponential-like\" tails.\n    \n    The probability density for the Gumbel distribution is\n    \n    .. math:: p(x) = \\frac{e^{-(x - \\mu)/ \\beta}}{\\beta} e^{ -e^{-(x - \\mu)/\n              \\beta}},\n    \n    where :math:`\\mu` is the mode, a location parameter, and\n    :math:`\\beta` is the scale parameter.\n    \n    The Gumbel (named for German mathematician Emil Julius Gumbel) was used\n    very early in the hydrology literature, for modeling the occurrence of\n    flood events. It is also used for modeling maximum wind speed and\n    rainfall rates.  It is a \"fat-tailed\" distribution - the probability of\n    an event in the tail of the distribution is larger than if one used a\n    Gaussian, hence the surprisingly frequent occurrence of 100-year\n    floods. Floods were initially modeled as a Gaussian process, which\n    underestimated the frequency of extreme events.\n    \n    It is one of a class of extreme value distributions, the Generalized\n    Extreme Value (GEV) distributions, which also includes the Weibull and\n    Frechet.\n    \n    The function has a mean of :math:`\\mu + 0.57721\\beta` and a variance\n    of :math:`\\frac{\\pi^2}{6}\\beta^2`.\n    \n    References\n    ----------\n    .. [1] Gumbel, E. J., \"Statistics of Extremes,\"\n           New York: Columbia University Press, 1958.\n    .. [2] Reiss, R.-D. and Thomas, M., \"Statistical Analysis of Extreme\n           Values from Insurance, Finance, Hydrology and Other Fields,\"\n           Basel: Birkhauser Verlag, 2001.\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> mu, beta = 0, 0.1 # location and scale\n    >>> s = np.random.gumbel(mu, beta, 1000)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, ignored = plt.hist(s, 30, density=True)\n    >>> plt.plot(bins, (1/beta)*np.exp(-(bins - mu)/beta)\n    ...          * np.exp( -np.exp( -(bins - mu) /beta) ),\n    ...          linewidth=2, color='r')\n    >>> plt.show()\n    \n    Show how an extreme value distribution can arise from a Gaussian process\n    and compare to a Gaussian:\n    \n    >>> means = []\n    >>> maxima = []\n    >>> for i in range(0,1000) :\n    ...    a = np.random.normal(mu, beta, 1000)\n    ...    means.append(a.mean())\n    ...    maxima.append(a.max())\n    >>> count, bins, ignored = plt.hist(maxima, 30, density=True)\n    >>> beta = np.std(maxima) * np.sqrt(6) / np.pi\n    >>> mu = np.mean(maxima) - 0.57721*beta\n    >>> plt.plot(bins, (1/beta)*np.exp(-(bins - mu)/beta)\n    ...          * np.exp(-np.exp(-(bins - mu)/beta)),\n    ...          linewidth=2, color='r')\n    >>> plt.plot(bins, 1/(beta * np.sqrt(2 * np.pi))\n    ...          * np.exp(-(bins - mu)**2 / (2 * beta**2)),\n    ...          linewidth=2, color='g')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9c1263a64861878f1044a3a0a062d80b36f407b3331efc2d5af0afcab8ffdf2d",
            "fields": [
                {
                    "id": "vgq16vke",
                    "encoding": "",
                    "name": "loc",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "The location of the mode of the distribution. Default is 0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ob98nx5a",
                    "encoding": "",
                    "name": "scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "The scale parameter of the distribution. Default is 1. Must be non-\nnegative.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gm8lwg41",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``loc`` and ``scale`` are both scalars.\nOtherwise, ``np.broadcast(loc, scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rxrla2h0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.gumbel",
                    "defaultValue": "numpy.random.mtrand.gumbel",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y49m5dbx",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r3swneys",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ziypvlad",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qmu1mqbt",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nout20mw",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ahb5f1v1",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "bo7hs2_f",
            "name": "mtrand.hypergeometric",
            "description": "hypergeometric(ngood, nbad, nsample, size=None)\n    \n    Draw samples from a Hypergeometric distribution.\n    \n    Samples are drawn from a hypergeometric distribution with specified\n    parameters, `ngood` (ways to make a good selection), `nbad` (ways to make\n    a bad selection), and `nsample` (number of items sampled, which is less\n    than or equal to the sum ``ngood + nbad``).\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.hypergeometric`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    ngood : int or array_like of ints\n        Number of ways to make a good selection.  Must be nonnegative.\n    nbad : int or array_like of ints\n        Number of ways to make a bad selection.  Must be nonnegative.\n    nsample : int or array_like of ints\n        Number of items sampled.  Must be at least 1 and at most\n        ``ngood + nbad``.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if `ngood`, `nbad`, and `nsample`\n        are all scalars.  Otherwise, ``np.broadcast(ngood, nbad, nsample).size``\n        samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized hypergeometric distribution. Each\n        sample is the number of good items within a randomly selected subset of\n        size `nsample` taken from a set of `ngood` good items and `nbad` bad items.\n    \n    See Also\n    --------\n    scipy.stats.hypergeom : probability density function, distribution or\n        cumulative density function, etc.\n    random.Generator.hypergeometric: which should be used for new code.\n    \n    Notes\n    -----\n    The probability mass function (PMF) for the Hypergeometric distribution is\n    \n    .. math:: P(x) = \\frac{\\binom{g}{x}\\binom{b}{n-x}}{\\binom{g+b}{n}},\n    \n    where :math:`0 \\le x \\le n` and :math:`n-b \\le x \\le g`\n    \n    for P(x) the probability of ``x`` good results in the drawn sample,\n    g = `ngood`, b = `nbad`, and n = `nsample`.\n    \n    Consider an urn with black and white marbles in it, `ngood` of them\n    are black and `nbad` are white. If you draw `nsample` balls without\n    replacement, then the hypergeometric distribution describes the\n    distribution of black balls in the drawn sample.\n    \n    Note that this distribution is very similar to the binomial\n    distribution, except that in this case, samples are drawn without\n    replacement, whereas in the Binomial case samples are drawn with\n    replacement (or the sample space is infinite). As the sample space\n    becomes large, this distribution approaches the binomial.\n    \n    References\n    ----------\n    .. [1] Lentner, Marvin, \"Elementary Applied Statistics\", Bogden\n           and Quigley, 1972.\n    .. [2] Weisstein, Eric W. \"Hypergeometric Distribution.\" From\n           MathWorld--A Wolfram Web Resource.\n           https://mathworld.wolfram.com/HypergeometricDistribution.html\n    .. [3] Wikipedia, \"Hypergeometric distribution\",\n           https://en.wikipedia.org/wiki/Hypergeometric_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> ngood, nbad, nsamp = 100, 2, 10\n    # number of good, number of bad, and number of samples\n    >>> s = np.random.hypergeometric(ngood, nbad, nsamp, 1000)\n    >>> from matplotlib.pyplot import hist\n    >>> hist(s)\n    #   note that it is very unlikely to grab both bad items\n    \n    Suppose you have an urn with 15 white and 15 black marbles.\n    If you pull 15 marbles at random, how likely is it that\n    12 or more of them are one color?\n    \n    >>> s = np.random.hypergeometric(15, 15, 15, 100000)\n    >>> sum(s>=12)/100000. + sum(s<=3)/100000.\n    #   answer = 0.003 ... pretty unlikely!",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "69287ffa9619f50af88cc3c8ac29fbd4f9f34a12e939c4d60d213a83330ef47f",
            "fields": [
                {
                    "id": "luybogl8",
                    "encoding": "",
                    "name": "ngood",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of ways to make a good selection.  Must be nonnegative.",
                    "type": "int or arraylike of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "31m05ax2",
                    "encoding": "",
                    "name": "nbad",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of ways to make a bad selection.  Must be nonnegative.",
                    "type": "int or arraylike of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zs8qevum",
                    "encoding": "",
                    "name": "nsample",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of items sampled.  Must be at least 1 and at most\n``ngood + nbad``.",
                    "type": "int or arraylike of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wad2otvx",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if `ngood`, `nbad`, and `nsample`\nare all scalars.  Otherwise, ``np.broadcast(ngood, nbad, nsample).size``\nsamples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7t7_4hhr",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.hypergeometric",
                    "defaultValue": "numpy.random.mtrand.hypergeometric",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g_cs5mjr",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uj12sgpe",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "yq69nswq",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5ly4vsrc",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f5e5705d",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8ga6cel3",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "0i18y6ce",
            "name": "mtrand.laplace",
            "description": "laplace(loc=0.0, scale=1.0, size=None)\n    \n    Draw samples from the Laplace or double exponential distribution with\n    specified location (or mean) and scale (decay).\n    \n    The Laplace distribution is similar to the Gaussian/normal distribution,\n    but is sharper at the peak and has fatter tails. It represents the\n    difference between two independent, identically distributed exponential\n    random variables.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.laplace`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    loc : float or array_like of floats, optional\n        The position, :math:`\\mu`, of the distribution peak. Default is 0.\n    scale : float or array_like of floats, optional\n        :math:`\\lambda`, the exponential decay. Default is 1. Must be non-\n        negative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``loc`` and ``scale`` are both scalars.\n        Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Laplace distribution.\n    \n    See Also\n    --------\n    random.Generator.laplace: which should be used for new code.\n    \n    Notes\n    -----\n    It has the probability density function\n    \n    .. math:: f(x; \\mu, \\lambda) = \\frac{1}{2\\lambda}\n                                   \\exp\\left(-\\frac{|x - \\mu|}{\\lambda}\\right).\n    \n    The first law of Laplace, from 1774, states that the frequency\n    of an error can be expressed as an exponential function of the\n    absolute magnitude of the error, which leads to the Laplace\n    distribution. For many problems in economics and health\n    sciences, this distribution seems to model the data better\n    than the standard Gaussian distribution.\n    \n    References\n    ----------\n    .. [1] Abramowitz, M. and Stegun, I. A. (Eds.). \"Handbook of\n           Mathematical Functions with Formulas, Graphs, and Mathematical\n           Tables, 9th printing,\" New York: Dover, 1972.\n    .. [2] Kotz, Samuel, et. al. \"The Laplace Distribution and\n           Generalizations, \" Birkhauser, 2001.\n    .. [3] Weisstein, Eric W. \"Laplace Distribution.\"\n           From MathWorld--A Wolfram Web Resource.\n           https://mathworld.wolfram.com/LaplaceDistribution.html\n    .. [4] Wikipedia, \"Laplace distribution\",\n           https://en.wikipedia.org/wiki/Laplace_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution\n    \n    >>> loc, scale = 0., 1.\n    >>> s = np.random.laplace(loc, scale, 1000)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, ignored = plt.hist(s, 30, density=True)\n    >>> x = np.arange(-8., 8., .01)\n    >>> pdf = np.exp(-abs(x-loc)/scale)/(2.*scale)\n    >>> plt.plot(x, pdf)\n    \n    Plot Gaussian for comparison:\n    \n    >>> g = (1/(scale * np.sqrt(2 * np.pi)) *\n    ...      np.exp(-(x - loc)**2 / (2 * scale**2)))\n    >>> plt.plot(x,g)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "72c5ba5090aa01443cb71b849f2f115cdab50eadc2ae42862f2b429b04c198c5",
            "fields": [
                {
                    "id": "udkwajsb",
                    "encoding": "",
                    "name": "loc",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "The position, :math:`\\mu`, of the distribution peak. Default is 0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h6j872p2",
                    "encoding": "",
                    "name": "scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": ":math:`\\lambda`, the exponential decay. Default is 1. Must be non-\nnegative.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6jy296tk",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``loc`` and ``scale`` are both scalars.\nOtherwise, ``np.broadcast(loc, scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wgny6n73",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.laplace",
                    "defaultValue": "numpy.random.mtrand.laplace",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4vnprisd",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ukmpj_g1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "93uxzxx9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aqko3e4o",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xqv8f2t6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tp_bq4k0",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "bzjhdy9i",
            "name": "mtrand.logistic",
            "description": "logistic(loc=0.0, scale=1.0, size=None)\n    \n    Draw samples from a logistic distribution.\n    \n    Samples are drawn from a logistic distribution with specified\n    parameters, loc (location or mean, also median), and scale (>0).\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.logistic`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    loc : float or array_like of floats, optional\n        Parameter of the distribution. Default is 0.\n    scale : float or array_like of floats, optional\n        Parameter of the distribution. Must be non-negative.\n        Default is 1.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``loc`` and ``scale`` are both scalars.\n        Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized logistic distribution.\n    \n    See Also\n    --------\n    scipy.stats.logistic : probability density function, distribution or\n        cumulative density function, etc.\n    random.Generator.logistic: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density for the Logistic distribution is\n    \n    .. math:: P(x) = P(x) = \\frac{e^{-(x-\\mu)/s}}{s(1+e^{-(x-\\mu)/s})^2},\n    \n    where :math:`\\mu` = location and :math:`s` = scale.\n    \n    The Logistic distribution is used in Extreme Value problems where it\n    can act as a mixture of Gumbel distributions, in Epidemiology, and by\n    the World Chess Federation (FIDE) where it is used in the Elo ranking\n    system, assuming the performance of each player is a logistically\n    distributed random variable.\n    \n    References\n    ----------\n    .. [1] Reiss, R.-D. and Thomas M. (2001), \"Statistical Analysis of\n           Extreme Values, from Insurance, Finance, Hydrology and Other\n           Fields,\" Birkhauser Verlag, Basel, pp 132-133.\n    .. [2] Weisstein, Eric W. \"Logistic Distribution.\" From\n           MathWorld--A Wolfram Web Resource.\n           https://mathworld.wolfram.com/LogisticDistribution.html\n    .. [3] Wikipedia, \"Logistic-distribution\",\n           https://en.wikipedia.org/wiki/Logistic_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> loc, scale = 10, 1\n    >>> s = np.random.logistic(loc, scale, 10000)\n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, ignored = plt.hist(s, bins=50)\n    \n    #   plot against distribution\n    \n    >>> def logist(x, loc, scale):\n    ...     return np.exp((loc-x)/scale)/(scale*(1+np.exp((loc-x)/scale))**2)\n    >>> lgst_val = logist(bins, loc, scale)\n    >>> plt.plot(bins, lgst_val * count.max() / lgst_val.max())\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "09d3506d16c97d60587fdbe9b7d97ba4adf0d3a4f639683aa50e8f34a06029ff",
            "fields": [
                {
                    "id": "pe4e_f4d",
                    "encoding": "",
                    "name": "loc",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Parameter of the distribution. Default is 0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fq2ds0ti",
                    "encoding": "",
                    "name": "scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Parameter of the distribution. Must be non-negative.\nDefault is 1.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ryyuguk0",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``loc`` and ``scale`` are both scalars.\nOtherwise, ``np.broadcast(loc, scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kcpv6u1e",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.logistic",
                    "defaultValue": "numpy.random.mtrand.logistic",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y_vrpkx0",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rwsypopg",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "3qjxzok6",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ym137r7s",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "epzohhis",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mntwzp24",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "0_hbwhef",
            "name": "mtrand.lognormal",
            "description": "lognormal(mean=0.0, sigma=1.0, size=None)\n    \n    Draw samples from a log-normal distribution.\n    \n    Draw samples from a log-normal distribution with specified mean,\n    standard deviation, and array shape.  Note that the mean and standard\n    deviation are not the values for the distribution itself, but of the\n    underlying normal distribution it is derived from.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.lognormal`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    mean : float or array_like of floats, optional\n        Mean value of the underlying normal distribution. Default is 0.\n    sigma : float or array_like of floats, optional\n        Standard deviation of the underlying normal distribution. Must be\n        non-negative. Default is 1.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``mean`` and ``sigma`` are both scalars.\n        Otherwise, ``np.broadcast(mean, sigma).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized log-normal distribution.\n    \n    See Also\n    --------\n    scipy.stats.lognorm : probability density function, distribution,\n        cumulative density function, etc.\n    random.Generator.lognormal: which should be used for new code.\n    \n    Notes\n    -----\n    A variable `x` has a log-normal distribution if `log(x)` is normally\n    distributed.  The probability density function for the log-normal\n    distribution is:\n    \n    .. math:: p(x) = \\frac{1}{\\sigma x \\sqrt{2\\pi}}\n                     e^{(-\\frac{(ln(x)-\\mu)^2}{2\\sigma^2})}\n    \n    where :math:`\\mu` is the mean and :math:`\\sigma` is the standard\n    deviation of the normally distributed logarithm of the variable.\n    A log-normal distribution results if a random variable is the *product*\n    of a large number of independent, identically-distributed variables in\n    the same way that a normal distribution results if the variable is the\n    *sum* of a large number of independent, identically-distributed\n    variables.\n    \n    References\n    ----------\n    .. [1] Limpert, E., Stahel, W. A., and Abbt, M., \"Log-normal\n           Distributions across the Sciences: Keys and Clues,\"\n           BioScience, Vol. 51, No. 5, May, 2001.\n           https://stat.ethz.ch/~stahel/lognormal/bioscience.pdf\n    .. [2] Reiss, R.D. and Thomas, M., \"Statistical Analysis of Extreme\n           Values,\" Basel: Birkhauser Verlag, 2001, pp. 31-32.\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> mu, sigma = 3., 1. # mean and standard deviation\n    >>> s = np.random.lognormal(mu, sigma, 1000)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, ignored = plt.hist(s, 100, density=True, align='mid')\n    \n    >>> x = np.linspace(min(bins), max(bins), 10000)\n    >>> pdf = (np.exp(-(np.log(x) - mu)**2 / (2 * sigma**2))\n    ...        / (x * sigma * np.sqrt(2 * np.pi)))\n    \n    >>> plt.plot(x, pdf, linewidth=2, color='r')\n    >>> plt.axis('tight')\n    >>> plt.show()\n    \n    Demonstrate that taking the products of random samples from a uniform\n    distribution can be fit well by a log-normal probability density\n    function.\n    \n    >>> # Generate a thousand samples: each is the product of 100 random\n    >>> # values, drawn from a normal distribution.\n    >>> b = []\n    >>> for i in range(1000):\n    ...    a = 10. + np.random.standard_normal(100)\n    ...    b.append(np.prod(a))\n    \n    >>> b = np.array(b) / np.min(b) # scale values to be positive\n    >>> count, bins, ignored = plt.hist(b, 100, density=True, align='mid')\n    >>> sigma = np.std(np.log(b))\n    >>> mu = np.mean(np.log(b))\n    \n    >>> x = np.linspace(min(bins), max(bins), 10000)\n    >>> pdf = (np.exp(-(np.log(x) - mu)**2 / (2 * sigma**2))\n    ...        / (x * sigma * np.sqrt(2 * np.pi)))\n    \n    >>> plt.plot(x, pdf, color='r', linewidth=2)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0f58334509cc61246691c746550b08208cb0fbfaf3db1a273561b89adafec186",
            "fields": [
                {
                    "id": "tbf7qbto",
                    "encoding": "",
                    "name": "mean",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Mean value of the underlying normal distribution. Default is 0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9iu9qj48",
                    "encoding": "",
                    "name": "sigma",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Standard deviation of the underlying normal distribution. Must be\nnon-negative. Default is 1.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ogwylri8",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``mean`` and ``sigma`` are both scalars.\nOtherwise, ``np.broadcast(mean, sigma).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q_pod4mp",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.lognormal",
                    "defaultValue": "numpy.random.mtrand.lognormal",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "357ypwce",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a_njjrl7",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "odybl1zt",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xbtreocp",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4kkeiorb",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wt_v4soe",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "j7s_2toy",
            "name": "mtrand.logseries",
            "description": "logseries(p, size=None)\n    \n    Draw samples from a logarithmic series distribution.\n    \n    Samples are drawn from a log series distribution with specified\n    shape parameter, 0 <= ``p`` < 1.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.logseries`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    p : float or array_like of floats\n        Shape parameter for the distribution.  Must be in the range [0, 1).\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``p`` is a scalar.  Otherwise,\n        ``np.array(p).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized logarithmic series distribution.\n    \n    See Also\n    --------\n    scipy.stats.logser : probability density function, distribution or\n        cumulative density function, etc.\n    random.Generator.logseries: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density for the Log Series distribution is\n    \n    .. math:: P(k) = \\frac{-p^k}{k \\ln(1-p)},\n    \n    where p = probability.\n    \n    The log series distribution is frequently used to represent species\n    richness and occurrence, first proposed by Fisher, Corbet, and\n    Williams in 1943 [2].  It may also be used to model the numbers of\n    occupants seen in cars [3].\n    \n    References\n    ----------\n    .. [1] Buzas, Martin A.; Culver, Stephen J.,  Understanding regional\n           species diversity through the log series distribution of\n           occurrences: BIODIVERSITY RESEARCH Diversity & Distributions,\n           Volume 5, Number 5, September 1999 , pp. 187-195(9).\n    .. [2] Fisher, R.A,, A.S. Corbet, and C.B. Williams. 1943. The\n           relation between the number of species and the number of\n           individuals in a random sample of an animal population.\n           Journal of Animal Ecology, 12:42-58.\n    .. [3] D. J. Hand, F. Daly, D. Lunn, E. Ostrowski, A Handbook of Small\n           Data Sets, CRC Press, 1994.\n    .. [4] Wikipedia, \"Logarithmic distribution\",\n           https://en.wikipedia.org/wiki/Logarithmic_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> a = .6\n    >>> s = np.random.logseries(a, 10000)\n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, ignored = plt.hist(s)\n    \n    #   plot against distribution\n    \n    >>> def logseries(k, p):\n    ...     return -p**k/(k*np.log(1-p))\n    >>> plt.plot(bins, logseries(bins, a)*count.max()/\n    ...          logseries(bins, a).max(), 'r')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d3330a65f9f9b951677a8bb64f0baa6b53a1d76c943d8b718b76de1ce8c06f36",
            "fields": [
                {
                    "id": "mpdnhrzv",
                    "encoding": "",
                    "name": "p",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape parameter for the distribution.  Must be in the range [0, 1).",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e_shej6u",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``p`` is a scalar.  Otherwise,\n``np.array(p).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qic6i4nl",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.logseries",
                    "defaultValue": "numpy.random.mtrand.logseries",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ox9r041s",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zl_ybu1l",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "fgw1is03",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "szp8z0bu",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ew13ydva",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0ilpgdu9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "tijksc8j",
            "name": "mtrand.multinomial",
            "description": "multinomial(n, pvals, size=None)\n    \n    Draw samples from a multinomial distribution.\n    \n    The multinomial distribution is a multivariate generalization of the\n    binomial distribution.  Take an experiment with one of ``p``\n    possible outcomes.  An example of such an experiment is throwing a dice,\n    where the outcome can be 1 through 6.  Each sample drawn from the\n    distribution represents `n` such experiments.  Its values,\n    ``X_i = [X_0, X_1, ..., X_p]``, represent the number of times the\n    outcome was ``i``.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.multinomial`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    .. warning::\n      This function defaults to the C-long dtype, which is 32bit on windows\n      and otherwise 64bit on 64bit platforms (and 32bit on 32bit ones).\n      Since NumPy 2.0, NumPy's default integer is 32bit on 32bit platforms\n      and 64bit on 64bit platforms.\n    \n    \n    Parameters\n    ----------\n    n : int\n        Number of experiments.\n    pvals : sequence of floats, length p\n        Probabilities of each of the ``p`` different outcomes.  These\n        must sum to 1 (however, the last element is always assumed to\n        account for the remaining probability, as long as\n        ``sum(pvals[:-1]) <= 1)``.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    \n    Returns\n    -------\n    out : ndarray\n        The drawn samples, of shape *size*, if that was provided.  If not,\n        the shape is ``(N,)``.\n    \n        In other words, each entry ``out[i,j,...,:]`` is an N-dimensional\n        value drawn from the distribution.\n    \n    See Also\n    --------\n    random.Generator.multinomial: which should be used for new code.\n    \n    Examples\n    --------\n    Throw a dice 20 times:\n    \n    >>> np.random.multinomial(20, [1/6.]*6, size=1)\n    array([[4, 1, 7, 5, 2, 1]]) # random\n    \n    It landed 4 times on 1, once on 2, etc.\n    \n    Now, throw the dice 20 times, and 20 times again:\n    \n    >>> np.random.multinomial(20, [1/6.]*6, size=2)\n    array([[3, 4, 3, 3, 4, 3], # random\n           [2, 4, 3, 4, 0, 7]])\n    \n    For the first run, we threw 3 times 1, 4 times 2, etc.  For the second,\n    we threw 2 times 1, 4 times 2, etc.\n    \n    A loaded die is more likely to land on number 6:\n    \n    >>> np.random.multinomial(100, [1/7.]*5 + [2/7.])\n    array([11, 16, 14, 17, 16, 26]) # random\n    \n    The probability inputs should be normalized. As an implementation\n    detail, the value of the last entry is ignored and assumed to take\n    up any leftover probability mass, but this should not be relied on.\n    A biased coin which has twice as much weight on one side as on the\n    other should be sampled like so:\n    \n    >>> np.random.multinomial(100, [1.0 / 3, 2.0 / 3])  # RIGHT\n    array([38, 62]) # random\n    \n    not like:\n    \n    >>> np.random.multinomial(100, [1.0, 2.0])  # WRONG\n    Traceback (most recent call last):\n    ValueError: pvals < 0, pvals > 1 or pvals contains NaNs",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "fcd81281fec31060d1ff60ea8bd8ee6db5de7e28fed1a796fe1ac0edea0bb0b4",
            "fields": [
                {
                    "id": "vm86siz5",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of experiments.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hmvhwpvg",
                    "encoding": "",
                    "name": "pvals",
                    "value": "",
                    "defaultValue": "",
                    "description": "Probabilities of each of the ``p`` different outcomes.  These\nmust sum to 1 (however, the last element is always assumed to\naccount for the remaining probability, as long as\n``sum(pvals[:-1]) <= 1)``.",
                    "type": "sequence of floats, length p",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h_j04dfw",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3_lwupna",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.multinomial",
                    "defaultValue": "numpy.random.mtrand.multinomial",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j541y7_9",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "64r4dmb_",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "3oc7c64f",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h8eg4ohy",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c8cqjmj6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yanf_eid",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "p4s6llw2",
            "name": "mtrand.multivariate_normal",
            "description": "multivariate_normal(mean, cov, size=None, check_valid='warn', tol=1e-8)\n    \n    Draw random samples from a multivariate normal distribution.\n    \n    The multivariate normal, multinormal or Gaussian distribution is a\n    generalization of the one-dimensional normal distribution to higher\n    dimensions.  Such a distribution is specified by its mean and\n    covariance matrix.  These parameters are analogous to the mean\n    (average or \"center\") and variance (standard deviation, or \"width,\"\n    squared) of the one-dimensional normal distribution.\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.multivariate_normal`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    mean : 1-D array_like, of length N\n        Mean of the N-dimensional distribution.\n    cov : 2-D array_like, of shape (N, N)\n        Covariance matrix of the distribution. It must be symmetric and\n        positive-semidefinite for proper sampling.\n    size : int or tuple of ints, optional\n        Given a shape of, for example, ``(m,n,k)``, ``m*n*k`` samples are\n        generated, and packed in an `m`-by-`n`-by-`k` arrangement.  Because\n        each sample is `N`-dimensional, the output shape is ``(m,n,k,N)``.\n        If no shape is specified, a single (`N`-D) sample is returned.\n    check_valid : { 'warn', 'raise', 'ignore' }, optional\n        Behavior when the covariance matrix is not positive semidefinite.\n    tol : float, optional\n        Tolerance when checking the singular values in covariance matrix.\n        cov is cast to double before the check.\n    \n    Returns\n    -------\n    out : ndarray\n        The drawn samples, of shape *size*, if that was provided.  If not,\n        the shape is ``(N,)``.\n    \n        In other words, each entry ``out[i,j,...,:]`` is an N-dimensional\n        value drawn from the distribution.\n    \n    See Also\n    --------\n    random.Generator.multivariate_normal: which should be used for new code.\n    \n    Notes\n    -----\n    The mean is a coordinate in N-dimensional space, which represents the\n    location where samples are most likely to be generated.  This is\n    analogous to the peak of the bell curve for the one-dimensional or\n    univariate normal distribution.\n    \n    Covariance indicates the level to which two variables vary together.\n    From the multivariate normal distribution, we draw N-dimensional\n    samples, :math:`X = [x_1, x_2, ... x_N]`.  The covariance matrix\n    element :math:`C_{ij}` is the covariance of :math:`x_i` and :math:`x_j`.\n    The element :math:`C_{ii}` is the variance of :math:`x_i` (i.e. its\n    \"spread\").\n    \n    Instead of specifying the full covariance matrix, popular\n    approximations include:\n    \n    - Spherical covariance (`cov` is a multiple of the identity matrix)\n    - Diagonal covariance (`cov` has non-negative elements, and only on\n      the diagonal)\n    \n    This geometrical property can be seen in two dimensions by plotting\n    generated data-points:\n    \n    >>> mean = [0, 0]\n    >>> cov = [[1, 0], [0, 100]]  # diagonal covariance\n    \n    Diagonal covariance means that points are oriented along x or y-axis:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> x, y = np.random.multivariate_normal(mean, cov, 5000).T\n    >>> plt.plot(x, y, 'x')\n    >>> plt.axis('equal')\n    >>> plt.show()\n    \n    Note that the covariance matrix must be positive semidefinite (a.k.a.\n    nonnegative-definite). Otherwise, the behavior of this method is\n    undefined and backwards compatibility is not guaranteed.\n    \n    References\n    ----------\n    .. [1] Papoulis, A., \"Probability, Random Variables, and Stochastic\n           Processes,\" 3rd ed., New York: McGraw-Hill, 1991.\n    .. [2] Duda, R. O., Hart, P. E., and Stork, D. G., \"Pattern\n           Classification,\" 2nd ed., New York: Wiley, 2001.\n    \n    Examples\n    --------\n    >>> mean = (1, 2)\n    >>> cov = [[1, 0], [0, 1]]\n    >>> x = np.random.multivariate_normal(mean, cov, (3, 3))\n    >>> x.shape\n    (3, 3, 2)\n    \n    Here we generate 800 samples from the bivariate normal distribution\n    with mean [0, 0] and covariance matrix [[6, -3], [-3, 3.5]].  The\n    expected variances of the first and second components of the sample\n    are 6 and 3.5, respectively, and the expected correlation\n    coefficient is -3/sqrt(6*3.5) \u2248 -0.65465.\n    \n    >>> cov = np.array([[6, -3], [-3, 3.5]])\n    >>> pts = np.random.multivariate_normal([0, 0], cov, size=800)\n    \n    Check that the mean, covariance, and correlation coefficient of the\n    sample are close to the expected values:\n    \n    >>> pts.mean(axis=0)\n    array([ 0.0326911 , -0.01280782])  # may vary\n    >>> np.cov(pts.T)\n    array([[ 5.96202397, -2.85602287],\n           [-2.85602287,  3.47613949]])  # may vary\n    >>> np.corrcoef(pts.T)[0, 1]\n    -0.6273591314603949  # may vary\n    \n    We can visualize this data with a scatter plot.  The orientation\n    of the point cloud illustrates the negative correlation of the\n    components of this sample.\n    \n    >>> import matplotlib.pyplot as plt\n    >>> plt.plot(pts[:, 0], pts[:, 1], '.', alpha=0.5)\n    >>> plt.axis('equal')\n    >>> plt.grid()\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4acdd7c435dbea2e6acf0d513cdbb4405abc52cf879e73f990d23771ec665c46",
            "fields": [
                {
                    "id": "39au09hf",
                    "encoding": "",
                    "name": "mean",
                    "value": "",
                    "defaultValue": "",
                    "description": "Mean of the N-dimensional distribution.",
                    "type": "1-D arraylike, of length N",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8pii5qmi",
                    "encoding": "",
                    "name": "cov",
                    "value": "",
                    "defaultValue": "",
                    "description": "Covariance matrix of the distribution. It must be symmetric and\npositive-semidefinite for proper sampling.",
                    "type": "2-D arraylike, of shape (N, N)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "js2_sjm3",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Given a shape of, for example, ``(m,n,k)``, ``m*n*k`` samples are\ngenerated, and packed in an `m`-by-`n`-by-`k` arrangement.  Because\neach sample is `N`-dimensional, the output shape is ``(m,n,k,N)``.\nIf no shape is specified, a single (`N`-D) sample is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4kj1s3xo",
                    "encoding": "",
                    "name": "check_valid",
                    "value": "warn",
                    "defaultValue": "warn",
                    "description": "Behavior when the covariance matrix is not positive semidefinite.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zmwnke6j",
                    "encoding": "",
                    "name": "tol",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "Tolerance when checking the singular values in covariance matrix.\ncov is cast to double before the check.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qwskxih2",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.multivariate_normal",
                    "defaultValue": "numpy.random.mtrand.multivariate_normal",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h5vq7dpx",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nd_057oq",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "_k4__t67",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1f8ntttc",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9p24g06p",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7_0ekv44",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "z3rb4qt2",
            "name": "mtrand.negative_binomial",
            "description": "negative_binomial(n, p, size=None)\n    \n    Draw samples from a negative binomial distribution.\n    \n    Samples are drawn from a negative binomial distribution with specified\n    parameters, `n` successes and `p` probability of success where `n`\n    is > 0 and `p` is in the interval [0, 1].\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.negative_binomial`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    n : float or array_like of floats\n        Parameter of the distribution, > 0.\n    p : float or array_like of floats\n        Parameter of the distribution, >= 0 and <=1.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``n`` and ``p`` are both scalars.\n        Otherwise, ``np.broadcast(n, p).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized negative binomial distribution,\n        where each sample is equal to N, the number of failures that\n        occurred before a total of n successes was reached.\n    \n    .. warning::\n       This function returns the C-long dtype, which is 32bit on windows\n       and otherwise 64bit on 64bit platforms (and 32bit on 32bit ones).\n       Since NumPy 2.0, NumPy's default integer is 32bit on 32bit platforms\n       and 64bit on 64bit platforms.\n    \n    See Also\n    --------\n    random.Generator.negative_binomial: which should be used for new code.\n    \n    Notes\n    -----\n    The probability mass function of the negative binomial distribution is\n    \n    .. math:: P(N;n,p) = \\frac{\\Gamma(N+n)}{N!\\Gamma(n)}p^{n}(1-p)^{N},\n    \n    where :math:`n` is the number of successes, :math:`p` is the\n    probability of success, :math:`N+n` is the number of trials, and\n    :math:`\\Gamma` is the gamma function. When :math:`n` is an integer,\n    :math:`\\frac{\\Gamma(N+n)}{N!\\Gamma(n)} = \\binom{N+n-1}{N}`, which is\n    the more common form of this term in the pmf. The negative\n    binomial distribution gives the probability of N failures given n\n    successes, with a success on the last trial.\n    \n    If one throws a die repeatedly until the third time a \"1\" appears,\n    then the probability distribution of the number of non-\"1\"s that\n    appear before the third \"1\" is a negative binomial distribution.\n    \n    References\n    ----------\n    .. [1] Weisstein, Eric W. \"Negative Binomial Distribution.\" From\n           MathWorld--A Wolfram Web Resource.\n           https://mathworld.wolfram.com/NegativeBinomialDistribution.html\n    .. [2] Wikipedia, \"Negative binomial distribution\",\n           https://en.wikipedia.org/wiki/Negative_binomial_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    A real world example. A company drills wild-cat oil\n    exploration wells, each with an estimated probability of\n    success of 0.1.  What is the probability of having one success\n    for each successive well, that is what is the probability of a\n    single success after drilling 5 wells, after 6 wells, etc.?\n    \n    >>> s = np.random.negative_binomial(1, 0.1, 100000)\n    >>> for i in range(1, 11): # doctest: +SKIP\n    ...    probability = sum(s<i) / 100000.\n    ...    print(i, \"wells drilled, probability of one success =\", probability)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e2c70981e223fa0e07245f292293384cde0c004383dc7aab787a9a515216720d",
            "fields": [
                {
                    "id": "jpw896m4",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "Parameter of the distribution, > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2olk202t",
                    "encoding": "",
                    "name": "p",
                    "value": "",
                    "defaultValue": "",
                    "description": "Parameter of the distribution, >= 0 and <=1.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7y_br5vh",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``n`` and ``p`` are both scalars.\nOtherwise, ``np.broadcast(n, p).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d_f3_ayh",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.negative_binomial",
                    "defaultValue": "numpy.random.mtrand.negative_binomial",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l4gg9mza",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yei2z1ur",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "l80a278h",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3jffpuob",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6e0yioyg",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ot9g1riq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "v06yr1z3",
            "name": "mtrand.noncentral_chisquare",
            "description": "noncentral_chisquare(df, nonc, size=None)\n    \n    Draw samples from a noncentral chi-square distribution.\n    \n    The noncentral :math:`\\chi^2` distribution is a generalization of\n    the :math:`\\chi^2` distribution.\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.noncentral_chisquare`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    df : float or array_like of floats\n        Degrees of freedom, must be > 0.\n    nonc : float or array_like of floats\n        Non-centrality, must be non-negative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``df`` and ``nonc`` are both scalars.\n        Otherwise, ``np.broadcast(df, nonc).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized noncentral chi-square distribution.\n    \n    See Also\n    --------\n    random.Generator.noncentral_chisquare: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density function for the noncentral Chi-square\n    distribution is\n    \n    .. math:: P(x;df,nonc) = \\sum^{\\infty}_{i=0}\n                           \\frac{e^{-nonc/2}(nonc/2)^{i}}{i!}\n                           P_{Y_{df+2i}}(x),\n    \n    where :math:`Y_{q}` is the Chi-square with q degrees of freedom.\n    \n    References\n    ----------\n    .. [1] Wikipedia, \"Noncentral chi-squared distribution\"\n           https://en.wikipedia.org/wiki/Noncentral_chi-squared_distribution\n    \n    Examples\n    --------\n    Draw values from the distribution and plot the histogram\n    \n    >>> import matplotlib.pyplot as plt\n    >>> values = plt.hist(np.random.noncentral_chisquare(3, 20, 100000),\n    ...                   bins=200, density=True)\n    >>> plt.show()\n    \n    Draw values from a noncentral chisquare with very small noncentrality,\n    and compare to a chisquare.\n    \n    >>> plt.figure()\n    >>> values = plt.hist(np.random.noncentral_chisquare(3, .0000001, 100000),\n    ...                   bins=np.arange(0., 25, .1), density=True)\n    >>> values2 = plt.hist(np.random.chisquare(3, 100000),\n    ...                    bins=np.arange(0., 25, .1), density=True)\n    >>> plt.plot(values[1][0:-1], values[0]-values2[0], 'ob')\n    >>> plt.show()\n    \n    Demonstrate how large values of non-centrality lead to a more symmetric\n    distribution.\n    \n    >>> plt.figure()\n    >>> values = plt.hist(np.random.noncentral_chisquare(3, 20, 100000),\n    ...                   bins=200, density=True)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "28eeb2a0cebdcb7fe413a6b1a1d2e2c70fe1c6749bbdc1f3885c9249194d4da6",
            "fields": [
                {
                    "id": "pjic8t7h",
                    "encoding": "",
                    "name": "df",
                    "value": "",
                    "defaultValue": "",
                    "description": "Degrees of freedom, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x02q3yk3",
                    "encoding": "",
                    "name": "nonc",
                    "value": "",
                    "defaultValue": "",
                    "description": "Non-centrality, must be non-negative.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ahhdzhns",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``df`` and ``nonc`` are both scalars.\nOtherwise, ``np.broadcast(df, nonc).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dyjqitgo",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.noncentral_chisquare",
                    "defaultValue": "numpy.random.mtrand.noncentral_chisquare",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2rx_6ru3",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "et_i2zvb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "nw_qge2g",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "35n_j21j",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "39f5_1ds",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "btofq_nn",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "q3_kavg6",
            "name": "mtrand.noncentral_f",
            "description": "noncentral_f(dfnum, dfden, nonc, size=None)\n    \n    Draw samples from the noncentral F distribution.\n    \n    Samples are drawn from an F distribution with specified parameters,\n    `dfnum` (degrees of freedom in numerator) and `dfden` (degrees of\n    freedom in denominator), where both parameters > 1.\n    `nonc` is the non-centrality parameter.\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.noncentral_f`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    dfnum : float or array_like of floats\n        Numerator degrees of freedom, must be > 0.\n    dfden : float or array_like of floats\n        Denominator degrees of freedom, must be > 0.\n    nonc : float or array_like of floats\n        Non-centrality parameter, the sum of the squares of the numerator\n        means, must be >= 0.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``dfnum``, ``dfden``, and ``nonc``\n        are all scalars.  Otherwise, ``np.broadcast(dfnum, dfden, nonc).size``\n        samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized noncentral Fisher distribution.\n    \n    See Also\n    --------\n    random.Generator.noncentral_f: which should be used for new code.\n    \n    Notes\n    -----\n    When calculating the power of an experiment (power = probability of\n    rejecting the null hypothesis when a specific alternative is true) the\n    non-central F statistic becomes important.  When the null hypothesis is\n    true, the F statistic follows a central F distribution. When the null\n    hypothesis is not true, then it follows a non-central F statistic.\n    \n    References\n    ----------\n    .. [1] Weisstein, Eric W. \"Noncentral F-Distribution.\"\n           From MathWorld--A Wolfram Web Resource.\n           https://mathworld.wolfram.com/NoncentralF-Distribution.html\n    .. [2] Wikipedia, \"Noncentral F-distribution\",\n           https://en.wikipedia.org/wiki/Noncentral_F-distribution\n    \n    Examples\n    --------\n    In a study, testing for a specific alternative to the null hypothesis\n    requires use of the Noncentral F distribution. We need to calculate the\n    area in the tail of the distribution that exceeds the value of the F\n    distribution for the null hypothesis.  We'll plot the two probability\n    distributions for comparison.\n    \n    >>> dfnum = 3 # between group deg of freedom\n    >>> dfden = 20 # within groups degrees of freedom\n    >>> nonc = 3.0\n    >>> nc_vals = np.random.noncentral_f(dfnum, dfden, nonc, 1000000)\n    >>> NF = np.histogram(nc_vals, bins=50, density=True)\n    >>> c_vals = np.random.f(dfnum, dfden, 1000000)\n    >>> F = np.histogram(c_vals, bins=50, density=True)\n    >>> import matplotlib.pyplot as plt\n    >>> plt.plot(F[1][1:], F[0])\n    >>> plt.plot(NF[1][1:], NF[0])\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8976ddbae1b6908032b96679fc348d09394def09483c22067b0314f44a16a7e2",
            "fields": [
                {
                    "id": "cd942et8",
                    "encoding": "",
                    "name": "dfnum",
                    "value": "",
                    "defaultValue": "",
                    "description": "Numerator degrees of freedom, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ytuxstca",
                    "encoding": "",
                    "name": "dfden",
                    "value": "",
                    "defaultValue": "",
                    "description": "Denominator degrees of freedom, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e9d0vqx6",
                    "encoding": "",
                    "name": "nonc",
                    "value": "",
                    "defaultValue": "",
                    "description": "Non-centrality parameter, the sum of the squares of the numerator\nmeans, must be >= 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y89iedb2",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``dfnum``, ``dfden``, and ``nonc``\nare all scalars.  Otherwise, ``np.broadcast(dfnum, dfden, nonc).size``\nsamples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qjdpesw9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.noncentral_f",
                    "defaultValue": "numpy.random.mtrand.noncentral_f",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pdlg233r",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tq7oteuc",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "gzl2vm9r",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "70z5w2_6",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6xh_jm47",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nnxoe049",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "b7mohyvo",
            "name": "mtrand.normal",
            "description": "normal(loc=0.0, scale=1.0, size=None)\n    \n    Draw random samples from a normal (Gaussian) distribution.\n    \n    The probability density function of the normal distribution, first\n    derived by De Moivre and 200 years later by both Gauss and Laplace\n    independently [2]_, is often called the bell curve because of\n    its characteristic shape (see the example below).\n    \n    The normal distributions occurs often in nature.  For example, it\n    describes the commonly occurring distribution of samples influenced\n    by a large number of tiny, random disturbances, each with its own\n    unique distribution [2]_.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.normal`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    loc : float or array_like of floats\n        Mean (\"centre\") of the distribution.\n    scale : float or array_like of floats\n        Standard deviation (spread or \"width\") of the distribution. Must be\n        non-negative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``loc`` and ``scale`` are both scalars.\n        Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized normal distribution.\n    \n    See Also\n    --------\n    scipy.stats.norm : probability density function, distribution or\n        cumulative density function, etc.\n    random.Generator.normal: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density for the Gaussian distribution is\n    \n    .. math:: p(x) = \\frac{1}{\\sqrt{ 2 \\pi \\sigma^2 }}\n                     e^{ - \\frac{ (x - \\mu)^2 } {2 \\sigma^2} },\n    \n    where :math:`\\mu` is the mean and :math:`\\sigma` the standard\n    deviation. The square of the standard deviation, :math:`\\sigma^2`,\n    is called the variance.\n    \n    The function has its peak at the mean, and its \"spread\" increases with\n    the standard deviation (the function reaches 0.607 times its maximum at\n    :math:`x + \\sigma` and :math:`x - \\sigma` [2]_).  This implies that\n    normal is more likely to return samples lying close to the mean, rather\n    than those far away.\n    \n    References\n    ----------\n    .. [1] Wikipedia, \"Normal distribution\",\n           https://en.wikipedia.org/wiki/Normal_distribution\n    .. [2] P. R. Peebles Jr., \"Central Limit Theorem\" in \"Probability,\n           Random Variables and Random Signal Principles\", 4th ed., 2001,\n           pp. 51, 51, 125.\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> mu, sigma = 0, 0.1 # mean and standard deviation\n    >>> s = np.random.normal(mu, sigma, 1000)\n    \n    Verify the mean and the standard deviation:\n    \n    >>> abs(mu - np.mean(s))\n    0.0  # may vary\n    \n    >>> abs(sigma - np.std(s, ddof=1))\n    0.0  # may vary\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, ignored = plt.hist(s, 30, density=True)\n    >>> plt.plot(bins, 1/(sigma * np.sqrt(2 * np.pi)) *\n    ...                np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    ...          linewidth=2, color='r')\n    >>> plt.show()\n    \n    Two-by-four array of samples from the normal distribution with\n    mean 3 and standard deviation 2.5:\n    \n    >>> np.random.normal(3, 2.5, size=(2, 4))\n    array([[-4.49401501,  4.00950034, -1.81814867,  7.29718677],   # random\n           [ 0.39924804,  4.68456316,  4.99394529,  4.84057254]])  # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e6997eea1ace74d0ebc659f625fa96b037f9bffe12749ce085f1dacbfae5d610",
            "fields": [
                {
                    "id": "jv9qxoy7",
                    "encoding": "",
                    "name": "loc",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Mean (\"centre\") of the distribution.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yj1xtd6w",
                    "encoding": "",
                    "name": "scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Standard deviation (spread or \"width\") of the distribution. Must be\nnon-negative.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ybnnfxng",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``loc`` and ``scale`` are both scalars.\nOtherwise, ``np.broadcast(loc, scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sgewz7j7",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.normal",
                    "defaultValue": "numpy.random.mtrand.normal",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kux7bnze",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8tusrg9j",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ljjl53zd",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9f5auw3m",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "siri1mrt",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "__lyf52k",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "_7fg5xyp",
            "name": "mtrand.pareto",
            "description": "pareto(a, size=None)\n    \n    Draw samples from a Pareto II or Lomax distribution with\n    specified shape.\n    \n    The Lomax or Pareto II distribution is a shifted Pareto\n    distribution. The classical Pareto distribution can be\n    obtained from the Lomax distribution by adding 1 and\n    multiplying by the scale parameter ``m`` (see Notes).  The\n    smallest value of the Lomax distribution is zero while for the\n    classical Pareto distribution it is ``mu``, where the standard\n    Pareto distribution has location ``mu = 1``.  Lomax can also\n    be considered as a simplified version of the Generalized\n    Pareto distribution (available in SciPy), with the scale set\n    to one and the location set to zero.\n    \n    The Pareto distribution must be greater than zero, and is\n    unbounded above.  It is also known as the \"80-20 rule\".  In\n    this distribution, 80 percent of the weights are in the lowest\n    20 percent of the range, while the other 20 percent fill the\n    remaining 80 percent of the range.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.pareto`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    a : float or array_like of floats\n        Shape of the distribution. Must be positive.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``a`` is a scalar.  Otherwise,\n        ``np.array(a).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Pareto distribution.\n    \n    See Also\n    --------\n    scipy.stats.lomax : probability density function, distribution or\n        cumulative density function, etc.\n    scipy.stats.genpareto : probability density function, distribution or\n        cumulative density function, etc.\n    random.Generator.pareto: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density for the Pareto distribution is\n    \n    .. math:: p(x) = \\frac{am^a}{x^{a+1}}\n    \n    where :math:`a` is the shape and :math:`m` the scale.\n    \n    The Pareto distribution, named after the Italian economist\n    Vilfredo Pareto, is a power law probability distribution\n    useful in many real world problems.  Outside the field of\n    economics it is generally referred to as the Bradford\n    distribution. Pareto developed the distribution to describe\n    the distribution of wealth in an economy.  It has also found\n    use in insurance, web page access statistics, oil field sizes,\n    and many other problems, including the download frequency for\n    projects in Sourceforge [1]_.  It is one of the so-called\n    \"fat-tailed\" distributions.\n    \n    References\n    ----------\n    .. [1] Francis Hunt and Paul Johnson, On the Pareto Distribution of\n           Sourceforge projects.\n    .. [2] Pareto, V. (1896). Course of Political Economy. Lausanne.\n    .. [3] Reiss, R.D., Thomas, M.(2001), Statistical Analysis of Extreme\n           Values, Birkhauser Verlag, Basel, pp 23-30.\n    .. [4] Wikipedia, \"Pareto distribution\",\n           https://en.wikipedia.org/wiki/Pareto_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> a, m = 3., 2.  # shape and mode\n    >>> s = (np.random.pareto(a, 1000) + 1) * m\n    \n    Display the histogram of the samples, along with the probability\n    density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, _ = plt.hist(s, 100, density=True)\n    >>> fit = a*m**a / bins**(a+1)\n    >>> plt.plot(bins, max(count)*fit/max(fit), linewidth=2, color='r')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "442f4a56fb1f175dccb996249447bea68ca3a356d323d861887412b787a6241a",
            "fields": [
                {
                    "id": "c2u9_6_g",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape of the distribution. Must be positive.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1jyk1p7r",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``a`` is a scalar.  Otherwise,\n``np.array(a).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dhpf8wla",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.pareto",
                    "defaultValue": "numpy.random.mtrand.pareto",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tw8352a0",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "168kpred",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "v7nuieoh",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7pobrccl",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "azgqxgb9",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mmhztmwf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "5n600dyf",
            "name": "mtrand.permutation",
            "description": "permutation(x)\n    \n    Randomly permute a sequence, or return a permuted range.\n    \n    If `x` is a multi-dimensional array, it is only shuffled along its\n    first index.\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.permutation`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    x : int or array_like\n        If `x` is an integer, randomly permute ``np.arange(x)``.\n        If `x` is an array, make a copy and shuffle the elements\n        randomly.\n    \n    Returns\n    -------\n    out : ndarray\n        Permuted sequence or array range.\n    \n    See Also\n    --------\n    random.Generator.permutation: which should be used for new code.\n    \n    Examples\n    --------\n    >>> np.random.permutation(10)\n    array([1, 7, 4, 3, 0, 9, 2, 5, 8, 6]) # random\n    \n    >>> np.random.permutation([1, 4, 9, 12, 15])\n    array([15,  1,  9,  4, 12]) # random\n    \n    >>> arr = np.arange(9).reshape((3, 3))\n    >>> np.random.permutation(arr)\n    array([[6, 7, 8], # random\n           [0, 1, 2],\n           [3, 4, 5]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bcc93e8058ba223f16374af164df52c6af4b16906892f92807a19714864b5da2",
            "fields": [
                {
                    "id": "9oupfa_8",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "If `x` is an integer, randomly permute ``np.arange(x)``.\nIf `x` is an array, make a copy and shuffle the elements\nrandomly.",
                    "type": "int or arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ceh0ehr0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.permutation",
                    "defaultValue": "numpy.random.mtrand.permutation",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3bvhly7a",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x6_lzs4c",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9cujhvcw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ckajmudn",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x4rmdvrj",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c4k5n1ly",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "aphi7c__",
            "name": "mtrand.poisson",
            "description": "poisson(lam=1.0, size=None)\n    \n    Draw samples from a Poisson distribution.\n    \n    The Poisson distribution is the limit of the binomial distribution\n    for large N.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.poisson`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    lam : float or array_like of floats\n        Expected number of events occurring in a fixed-time interval,\n        must be >= 0. A sequence must be broadcastable over the requested\n        size.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``lam`` is a scalar. Otherwise,\n        ``np.array(lam).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Poisson distribution.\n    \n    See Also\n    --------\n    random.Generator.poisson: which should be used for new code.\n    \n    Notes\n    -----\n    The probability mass function (PMF) of Poisson distribution is\n    \n    .. math:: f(k; \\lambda)=\\frac{\\lambda^k e^{-\\lambda}}{k!}\n    \n    For events with an expected separation :math:`\\lambda` the Poisson\n    distribution :math:`f(k; \\lambda)` describes the probability of\n    :math:`k` events occurring within the observed\n    interval :math:`\\lambda`.\n    \n    Because the output is limited to the range of the C int64 type, a\n    ValueError is raised when `lam` is within 10 sigma of the maximum\n    representable value.\n    \n    References\n    ----------\n    .. [1] Weisstein, Eric W. \"Poisson Distribution.\"\n           From MathWorld--A Wolfram Web Resource.\n           https://mathworld.wolfram.com/PoissonDistribution.html\n    .. [2] Wikipedia, \"Poisson distribution\",\n           https://en.wikipedia.org/wiki/Poisson_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> import numpy as np\n    >>> s = np.random.poisson(5, 10000)\n    \n    Display histogram of the sample:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, ignored = plt.hist(s, 14, density=True)\n    >>> plt.show()\n    \n    Draw each 100 values for lambda 100 and 500:\n    \n    >>> s = np.random.poisson(lam=(100., 500.), size=(100, 2))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8dbbb753607a48fd591de7f1b6b9bd39ecc530a632b6944eb493b2795e593354",
            "fields": [
                {
                    "id": "srfa7ngd",
                    "encoding": "",
                    "name": "lam",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Expected number of events occurring in a fixed-time interval,\nmust be >= 0. A sequence must be broadcastable over the requested\nsize.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d_loxqu6",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``lam`` is a scalar. Otherwise,\n``np.array(lam).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "78t9538h",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.poisson",
                    "defaultValue": "numpy.random.mtrand.poisson",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ady9wflp",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "odzfe3hh",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "clcd1hw0",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5os14f13",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7ga9rnnp",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mjecagzo",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "p2nwjq2v",
            "name": "mtrand.power",
            "description": "power(a, size=None)\n    \n    Draws samples in [0, 1] from a power distribution with positive\n    exponent a - 1.\n    \n    Also known as the power function distribution.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.power`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    a : float or array_like of floats\n        Parameter of the distribution. Must be non-negative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``a`` is a scalar.  Otherwise,\n        ``np.array(a).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized power distribution.\n    \n    Raises\n    ------\n    ValueError\n        If a <= 0.\n    \n    See Also\n    --------\n    random.Generator.power: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density function is\n    \n    .. math:: P(x; a) = ax^{a-1}, 0 \\le x \\le 1, a>0.\n    \n    The power function distribution is just the inverse of the Pareto\n    distribution. It may also be seen as a special case of the Beta\n    distribution.\n    \n    It is used, for example, in modeling the over-reporting of insurance\n    claims.\n    \n    References\n    ----------\n    .. [1] Christian Kleiber, Samuel Kotz, \"Statistical size distributions\n           in economics and actuarial sciences\", Wiley, 2003.\n    .. [2] Heckert, N. A. and Filliben, James J. \"NIST Handbook 148:\n           Dataplot Reference Manual, Volume 2: Let Subcommands and Library\n           Functions\", National Institute of Standards and Technology\n           Handbook Series, June 2003.\n           https://www.itl.nist.gov/div898/software/dataplot/refman2/auxillar/powpdf.pdf\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> a = 5. # shape\n    >>> samples = 1000\n    >>> s = np.random.power(a, samples)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, ignored = plt.hist(s, bins=30)\n    >>> x = np.linspace(0, 1, 100)\n    >>> y = a*x**(a-1.)\n    >>> normed_y = samples*np.diff(bins)[0]*y\n    >>> plt.plot(x, normed_y)\n    >>> plt.show()\n    \n    Compare the power function distribution to the inverse of the Pareto.\n    \n    >>> from scipy import stats # doctest: +SKIP\n    >>> rvs = np.random.power(5, 1000000)\n    >>> rvsp = np.random.pareto(5, 1000000)\n    >>> xx = np.linspace(0,1,100)\n    >>> powpdf = stats.powerlaw.pdf(xx,5)  # doctest: +SKIP\n    \n    >>> plt.figure()\n    >>> plt.hist(rvs, bins=50, density=True)\n    >>> plt.plot(xx,powpdf,'r-')  # doctest: +SKIP\n    >>> plt.title('np.random.power(5)')\n    \n    >>> plt.figure()\n    >>> plt.hist(1./(1.+rvsp), bins=50, density=True)\n    >>> plt.plot(xx,powpdf,'r-')  # doctest: +SKIP\n    >>> plt.title('inverse of 1 + np.random.pareto(5)')\n    \n    >>> plt.figure()\n    >>> plt.hist(1./(1.+rvsp), bins=50, density=True)\n    >>> plt.plot(xx,powpdf,'r-')  # doctest: +SKIP\n    >>> plt.title('inverse of stats.pareto(5)')",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "40c742211fc3e0682103ffd446fc573ca04b39ab587be65908e272854ad17e2d",
            "fields": [
                {
                    "id": "a8p7ycov",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Parameter of the distribution. Must be non-negative.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x8aq9501",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``a`` is a scalar.  Otherwise,\n``np.array(a).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hqtk4nsa",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.power",
                    "defaultValue": "numpy.random.mtrand.power",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3y3309ym",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n23trw9a",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "77klv8jg",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5ooydkwx",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eip9xxuy",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qxxzc397",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "w6ol9fnv",
            "name": "mtrand.rand",
            "description": "rand(d0, d1, ..., dn)\n    \n    Random values in a given shape.\n    \n    .. note::\n        This is a convenience function for users porting code from Matlab,\n        and wraps `random_sample`. That function takes a\n        tuple to specify the size of the output, which is consistent with\n        other NumPy functions like `numpy.zeros` and `numpy.ones`.\n    \n    Create an array of the given shape and populate it with\n    random samples from a uniform distribution\n    over ``[0, 1)``.\n    \n    Parameters\n    ----------\n    d0, d1, ..., dn : int, optional\n        The dimensions of the returned array, must be non-negative.\n        If no argument is given a single Python float is returned.\n    \n    Returns\n    -------\n    out : ndarray, shape ``(d0, d1, ..., dn)``\n        Random values.\n    \n    See Also\n    --------\n    random\n    \n    Examples\n    --------\n    >>> np.random.rand(3,2)\n    array([[ 0.14022471,  0.96360618],  #random\n           [ 0.37601032,  0.25528411],  #random\n           [ 0.49313049,  0.94909878]]) #random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3fb4b4579e2b77170e58a3720ae929b4d1e38ff62ab0cae7f2d2c934a87bc73c",
            "fields": [
                {
                    "id": "0eieqx2o",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sydc6hdc",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.rand",
                    "defaultValue": "numpy.random.mtrand.rand",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cwx3yi8m",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6tqrm2wf",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "lw9_sc0z",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4_qp_ok2",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2_7wrh9y",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rkfs5j1u",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "dj6yckfl",
            "name": "mtrand.randint",
            "description": "randint(low, high=None, size=None, dtype=int)\n    \n    Return random integers from `low` (inclusive) to `high` (exclusive).\n    \n    Return random integers from the \"discrete uniform\" distribution of\n    the specified dtype in the \"half-open\" interval [`low`, `high`). If\n    `high` is None (the default), then results are from [0, `low`).\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.integers`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    low : int or array-like of ints\n        Lowest (signed) integers to be drawn from the distribution (unless\n        ``high=None``, in which case this parameter is one above the\n        *highest* such integer).\n    high : int or array-like of ints, optional\n        If provided, one above the largest (signed) integer to be drawn\n        from the distribution (see above for behavior if ``high=None``).\n        If array-like, must contain integer values\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    dtype : dtype, optional\n        Desired dtype of the result. Byteorder must be native.\n        The default value is long.\n    \n        .. warning::\n          This function defaults to the C-long dtype, which is 32bit on windows\n          and otherwise 64bit on 64bit platforms (and 32bit on 32bit ones).\n          Since NumPy 2.0, NumPy's default integer is 32bit on 32bit platforms\n          and 64bit on 64bit platforms.  Which corresponds to `np.intp`.\n          (`dtype=int` is not the same as in most NumPy functions.)\n    \n    Returns\n    -------\n    out : int or ndarray of ints\n        `size`-shaped array of random integers from the appropriate\n        distribution, or a single such random int if `size` not provided.\n    \n    See Also\n    --------\n    random_integers : similar to `randint`, only for the closed\n        interval [`low`, `high`], and 1 is the lowest value if `high` is\n        omitted.\n    random.Generator.integers: which should be used for new code.\n    \n    Examples\n    --------\n    >>> np.random.randint(2, size=10)\n    array([1, 0, 0, 0, 1, 1, 0, 0, 1, 0]) # random\n    >>> np.random.randint(1, size=10)\n    array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    \n    Generate a 2 x 4 array of ints between 0 and 4, inclusive:\n    \n    >>> np.random.randint(5, size=(2, 4))\n    array([[4, 0, 2, 1], # random\n           [3, 2, 2, 0]])\n    \n    Generate a 1 x 3 array with 3 different upper bounds\n    \n    >>> np.random.randint(1, [3, 5, 10])\n    array([2, 2, 9]) # random\n    \n    Generate a 1 by 3 array with 3 different lower bounds\n    \n    >>> np.random.randint([1, 5, 7], 10)\n    array([9, 8, 7]) # random\n    \n    Generate a 2 by 4 array using broadcasting with dtype of uint8\n    \n    >>> np.random.randint([1, 3, 5, 7], [[10], [20]], dtype=np.uint8)\n    array([[ 8,  6,  9,  7], # random\n           [ 1, 16,  9, 12]], dtype=uint8)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "036692f6ff839673dfdbb2c8f66114ea6ba908e1f3c57eec240c6c349981e6fd",
            "fields": [
                {
                    "id": "s3hlp7at",
                    "encoding": "",
                    "name": "low",
                    "value": "",
                    "defaultValue": "",
                    "description": "Lowest (signed) integers to be drawn from the distribution (unless\n``high=None``, in which case this parameter is one above the\n*highest* such integer).",
                    "type": "int or array-like of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "akr_lrke",
                    "encoding": "",
                    "name": "high",
                    "value": "",
                    "defaultValue": "",
                    "description": "If provided, one above the largest (signed) integer to be drawn\nfrom the distribution (see above for behavior if ``high=None``).\nIf array-like, must contain integer values",
                    "type": "int or array-like of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mv6qdenh",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w4nrdzes",
                    "encoding": "",
                    "name": "dtype",
                    "value": "builtins.type",
                    "defaultValue": "builtins.type",
                    "description": "Desired dtype of the result. Byteorder must be native.\nThe default value is long.\n\n.. warning::\n  This function defaults to the C-long dtype, which is 32bit on windows\n  and otherwise 64bit on 64bit platforms (and 32bit on 32bit ones).\n  Since NumPy 2.0, NumPy's default integer is 32bit on 32bit platforms\n  and 64bit on 64bit platforms.  Which corresponds to `np.intp`.\n  (`dtype=int` is not the same as in most NumPy functions.)",
                    "type": "builtins.type",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bg_4wzq1",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.randint",
                    "defaultValue": "numpy.random.mtrand.randint",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0p5w4iyh",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5eatpblq",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "05w3ia7o",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s_i4csi4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "956b__6e",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "26a3fw5s",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "so1npt1b",
            "name": "mtrand.randn",
            "description": "randn(d0, d1, ..., dn)\n    \n    Return a sample (or samples) from the \"standard normal\" distribution.\n    \n    .. note::\n        This is a convenience function for users porting code from Matlab,\n        and wraps `standard_normal`. That function takes a\n        tuple to specify the size of the output, which is consistent with\n        other NumPy functions like `numpy.zeros` and `numpy.ones`.\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.standard_normal`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    If positive int_like arguments are provided, `randn` generates an array\n    of shape ``(d0, d1, ..., dn)``, filled\n    with random floats sampled from a univariate \"normal\" (Gaussian)\n    distribution of mean 0 and variance 1. A single float randomly sampled\n    from the distribution is returned if no argument is provided.\n    \n    Parameters\n    ----------\n    d0, d1, ..., dn : int, optional\n        The dimensions of the returned array, must be non-negative.\n        If no argument is given a single Python float is returned.\n    \n    Returns\n    -------\n    Z : ndarray or float\n        A ``(d0, d1, ..., dn)``-shaped array of floating-point samples from\n        the standard normal distribution, or a single such float if\n        no parameters were supplied.\n    \n    See Also\n    --------\n    standard_normal : Similar, but takes a tuple as its argument.\n    normal : Also accepts mu and sigma arguments.\n    random.Generator.standard_normal: which should be used for new code.\n    \n    Notes\n    -----\n    For random samples from the normal distribution with mean ``mu`` and\n    standard deviation ``sigma``, use::\n    \n        sigma * np.random.randn(...) + mu\n    \n    Examples\n    --------\n    >>> np.random.randn()\n    2.1923875335537315  # random\n    \n    Two-by-four array of samples from the normal distribution with\n    mean 3 and standard deviation 2.5:\n    \n    >>> 3 + 2.5 * np.random.randn(2, 4)\n    array([[-4.49401501,  4.00950034, -1.81814867,  7.29718677],   # random\n           [ 0.39924804,  4.68456316,  4.99394529,  4.84057254]])  # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ce993c3a183f0e4f22e50b762282b5228de7641d0a1b4e7eb2d4a03260324951",
            "fields": [
                {
                    "id": "opr87dk2",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "toiu9h3k",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.randn",
                    "defaultValue": "numpy.random.mtrand.randn",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vjyw4uct",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ahq9vjri",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "wlozi04t",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wcfl9k9l",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6slizkr1",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8inw4b63",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "92tc1rgh",
            "name": "mtrand.random",
            "description": "random(size=None)\n    \n    Return random floats in the half-open interval [0.0, 1.0). Alias for\n    `random_sample` to ease forward-porting to the new random API.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ce680f5dc353c7facf2513cf8d07b46846ee6834f1d7b6d077af44c014c77bb6",
            "fields": [
                {
                    "id": "e5bpvh4g",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uxs0xqfu",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.random",
                    "defaultValue": "numpy.random.mtrand.random",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2t2b3uyy",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mko4zk4r",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "v__z50z6",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ec8r9v96",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3oy3sgb5",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ygrl63gs",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "rp9_8mux",
            "name": "mtrand.random_integers",
            "description": "random_integers(low, high=None, size=None)\n    \n    Random integers of type `numpy.int_` between `low` and `high`, inclusive.\n    \n    Return random integers of type `numpy.int_` from the \"discrete uniform\"\n    distribution in the closed interval [`low`, `high`].  If `high` is\n    None (the default), then results are from [1, `low`]. The `numpy.int_`\n    type translates to the C long integer type and its precision\n    is platform dependent.\n    \n    This function has been deprecated. Use randint instead.\n    \n    .. deprecated:: 1.11.0\n    \n    Parameters\n    ----------\n    low : int\n        Lowest (signed) integer to be drawn from the distribution (unless\n        ``high=None``, in which case this parameter is the *highest* such\n        integer).\n    high : int, optional\n        If provided, the largest (signed) integer to be drawn from the\n        distribution (see above for behavior if ``high=None``).\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    \n    Returns\n    -------\n    out : int or ndarray of ints\n        `size`-shaped array of random integers from the appropriate\n        distribution, or a single such random int if `size` not provided.\n    \n    See Also\n    --------\n    randint : Similar to `random_integers`, only for the half-open\n        interval [`low`, `high`), and 0 is the lowest value if `high` is\n        omitted.\n    \n    Notes\n    -----\n    To sample from N evenly spaced floating-point numbers between a and b,\n    use::\n    \n      a + (b - a) * (np.random.random_integers(N) - 1) / (N - 1.)\n    \n    Examples\n    --------\n    >>> np.random.random_integers(5)\n    4 # random\n    >>> type(np.random.random_integers(5))\n    <class 'numpy.int64'>\n    >>> np.random.random_integers(5, size=(3,2))\n    array([[5, 4], # random\n           [3, 3],\n           [4, 5]])\n    \n    Choose five random numbers from the set of five evenly-spaced\n    numbers between 0 and 2.5, inclusive (*i.e.*, from the set\n    :math:`{0, 5/8, 10/8, 15/8, 20/8}`):\n    \n    >>> 2.5 * (np.random.random_integers(5, size=(5,)) - 1) / 4.\n    array([ 0.625,  1.25 ,  0.625,  0.625,  2.5  ]) # random\n    \n    Roll two six sided dice 1000 times and sum the results:\n    \n    >>> d1 = np.random.random_integers(1, 6, 1000)\n    >>> d2 = np.random.random_integers(1, 6, 1000)\n    >>> dsums = d1 + d2\n    \n    Display results as a histogram:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, ignored = plt.hist(dsums, 11, density=True)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e484451f2a85bfd211b6e1a36b7250ab8f9cd6bf74e2cc7b6e796b04cb40b433",
            "fields": [
                {
                    "id": "juf_bx8_",
                    "encoding": "",
                    "name": "low",
                    "value": "",
                    "defaultValue": "",
                    "description": "Lowest (signed) integer to be drawn from the distribution (unless\n``high=None``, in which case this parameter is the *highest* such\ninteger).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zfabo3ll",
                    "encoding": "",
                    "name": "high",
                    "value": "",
                    "defaultValue": "",
                    "description": "If provided, the largest (signed) integer to be drawn from the\ndistribution (see above for behavior if ``high=None``).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9xkgfbji",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uvpy6ric",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.random_integers",
                    "defaultValue": "numpy.random.mtrand.random_integers",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "39zha10f",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4627txx5",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "8l1urmrg",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w8h3lpsz",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_5kcj9aj",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lrghycjp",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "_l9g9pi4",
            "name": "mtrand.random_sample",
            "description": "random_sample(size=None)\n    \n    Return random floats in the half-open interval [0.0, 1.0).\n    \n    Results are from the \"continuous uniform\" distribution over the\n    stated interval.  To sample :math:`Unif[a, b), b > a` multiply\n    the output of `random_sample` by `(b-a)` and add `a`::\n    \n      (b - a) * random_sample() + a\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.random`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    \n    Returns\n    -------\n    out : float or ndarray of floats\n        Array of random floats of shape `size` (unless ``size=None``, in which\n        case a single float is returned).\n    \n    See Also\n    --------\n    random.Generator.random: which should be used for new code.\n    \n    Examples\n    --------\n    >>> np.random.random_sample()\n    0.47108547995356098 # random\n    >>> type(np.random.random_sample())\n    <class 'float'>\n    >>> np.random.random_sample((5,))\n    array([ 0.30220482,  0.86820401,  0.1654503 ,  0.11659149,  0.54323428]) # random\n    \n    Three-by-two array of random numbers from [-5, 0):\n    \n    >>> 5 * np.random.random_sample((3, 2)) - 5\n    array([[-3.99149989, -0.52338984], # random\n           [-2.99091858, -0.79479508],\n           [-1.23204345, -1.75224494]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "89c346a531a389f95f85707d60742b1e5788bcf94455f804d72f01407abe0a1a",
            "fields": [
                {
                    "id": "nf8se82a",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0fenamiz",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.random_sample",
                    "defaultValue": "numpy.random.mtrand.random_sample",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gthk_9ps",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6sdi0syh",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "chlg2tva",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ws82_ptq",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "98tmuoky",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rr0_x7bf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "30jfe58p",
            "name": "mtrand.ranf",
            "description": "This is an alias of `random_sample`. See `random_sample`  for the complete\n    documentation.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "72db2d482dfb408672be9db3afa7eb66ab38028efe755a2634d081f775227119",
            "fields": [
                {
                    "id": "g8lcsrwl",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_ks_yw4t",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l7cq0ys0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.ranf",
                    "defaultValue": "numpy.random.mtrand.ranf",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "06igtpi1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "grhz1_ev",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "hpv3ix8v",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ns5zui5a",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z7gh6yw6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zryqnri8",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "en4rbbpk",
            "name": "mtrand.rayleigh",
            "description": "rayleigh(scale=1.0, size=None)\n    \n    Draw samples from a Rayleigh distribution.\n    \n    The :math:`\\chi` and Weibull distributions are generalizations of the\n    Rayleigh.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.rayleigh`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    scale : float or array_like of floats, optional\n        Scale, also equals the mode. Must be non-negative. Default is 1.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``scale`` is a scalar.  Otherwise,\n        ``np.array(scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Rayleigh distribution.\n    \n    See Also\n    --------\n    random.Generator.rayleigh: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density function for the Rayleigh distribution is\n    \n    .. math:: P(x;scale) = \\frac{x}{scale^2}e^{\\frac{-x^2}{2 \\cdotp scale^2}}\n    \n    The Rayleigh distribution would arise, for example, if the East\n    and North components of the wind velocity had identical zero-mean\n    Gaussian distributions.  Then the wind speed would have a Rayleigh\n    distribution.\n    \n    References\n    ----------\n    .. [1] Brighton Webs Ltd., \"Rayleigh Distribution,\"\n           https://web.archive.org/web/20090514091424/http://brighton-webs.co.uk:80/distributions/rayleigh.asp\n    .. [2] Wikipedia, \"Rayleigh distribution\"\n           https://en.wikipedia.org/wiki/Rayleigh_distribution\n    \n    Examples\n    --------\n    Draw values from the distribution and plot the histogram\n    \n    >>> from matplotlib.pyplot import hist\n    >>> values = hist(np.random.rayleigh(3, 100000), bins=200, density=True)\n    \n    Wave heights tend to follow a Rayleigh distribution. If the mean wave\n    height is 1 meter, what fraction of waves are likely to be larger than 3\n    meters?\n    \n    >>> meanvalue = 1\n    >>> modevalue = np.sqrt(2 / np.pi) * meanvalue\n    >>> s = np.random.rayleigh(modevalue, 1000000)\n    \n    The percentage of waves larger than 3 meters is:\n    \n    >>> 100.*sum(s>3)/1000000.\n    0.087300000000000003 # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "41050b4ce003d135fbc26df1535f68df0b10f0c78b4b794d05a2b17847c85ed9",
            "fields": [
                {
                    "id": "wrha8_t6",
                    "encoding": "",
                    "name": "scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Scale, also equals the mode. Must be non-negative. Default is 1.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2d4sn4qi",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``scale`` is a scalar.  Otherwise,\n``np.array(scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g1b3edie",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.rayleigh",
                    "defaultValue": "numpy.random.mtrand.rayleigh",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yk0ot4om",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hgd8i4pj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "vochh2q7",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8nwnw6sk",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d0ortoza",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e3i7swbb",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "t0ulwnag",
            "name": "mtrand.sample",
            "description": "This is an alias of `random_sample`. See `random_sample`  for the complete\n    documentation.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "55307fb9049a012c5699c0cfc3e2d99b63e89b520a4d901fd97440e1bb32a4b4",
            "fields": [
                {
                    "id": "zsm3pze1",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mahc31tg",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "epruvt7c",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.sample",
                    "defaultValue": "numpy.random.mtrand.sample",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9tgot1ds",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xkidv4v5",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "iwgipk32",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kr_b6c_8",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xrbq8txj",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o0mf1hj0",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "vocjkx5c",
            "name": "mtrand.seed",
            "description": "seed(seed=None)\n    \n    Reseed the singleton RandomState instance.\n    \n    Notes\n    -----\n    This is a convenience, legacy function that exists to support\n    older code that uses the singleton RandomState. Best practice\n    is to use a dedicated ``Generator`` instance rather than\n    the random variate generation methods exposed directly in\n    the random module.\n    \n    See Also\n    --------\n    numpy.random.Generator",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e18076d9c33d482eea9022883349854e899894be31221cb4b14fc3425798a3ba",
            "fields": [
                {
                    "id": "6kxz6ddz",
                    "encoding": "",
                    "name": "seed",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9zj7tno0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.seed",
                    "defaultValue": "numpy.random.mtrand.seed",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6ehb_71s",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lcq1_ypt",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "3ymk7jbp",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "db_g5_9b",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8n9t3irm",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6acqdkww",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "juhfyz5p",
            "name": "mtrand.set_bit_generator",
            "description": "Sets the singleton RandomState's bit generator\n    \n    Parameters\n    ----------\n    bitgen\n        A bit generator instance\n    \n    Notes\n    -----\n    The singleton RandomState provides the random variate generators in the\n    ``numpy.random``namespace. This function, and its counterpart get method,\n    provides a path to hot-swap the default MT19937 bit generator with a\n    user provided alternative. These function are intended to provide\n    a continuous path where a single underlying bit generator can be\n    used both with an instance of ``Generator`` and with the singleton\n    instance of RandomState.\n    \n    See Also\n    --------\n    get_bit_generator\n    numpy.random.Generator",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "94986824099335d4e81a33f94128b46919f963ff2658900d873a57e9d0c7405f",
            "fields": [
                {
                    "id": "_d3tpszt",
                    "encoding": "",
                    "name": "bitgen",
                    "value": "",
                    "defaultValue": "",
                    "description": "A bit generator instance",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gt1lmduh",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.set_bit_generator",
                    "defaultValue": "numpy.random.mtrand.set_bit_generator",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qa14swt9",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ngh6kohp",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "h5dn6lar",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i50q5z1a",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6qvm8hzc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2153t91_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "8qdp347t",
            "name": "mtrand.set_state",
            "description": "set_state(state)\n    \n    Set the internal state of the generator from a tuple.\n    \n    For use if one has reason to manually (re-)set the internal state of\n    the bit generator used by the RandomState instance. By default,\n    RandomState uses the \"Mersenne Twister\"[1]_ pseudo-random number\n    generating algorithm.\n    \n    Parameters\n    ----------\n    state : {tuple(str, ndarray of 624 uints, int, int, float), dict}\n        The `state` tuple has the following items:\n    \n        1. the string 'MT19937', specifying the Mersenne Twister algorithm.\n        2. a 1-D array of 624 unsigned integers ``keys``.\n        3. an integer ``pos``.\n        4. an integer ``has_gauss``.\n        5. a float ``cached_gaussian``.\n    \n        If state is a dictionary, it is directly set using the BitGenerators\n        `state` property.\n    \n    Returns\n    -------\n    out : None\n        Returns 'None' on success.\n    \n    See Also\n    --------\n    get_state\n    \n    Notes\n    -----\n    `set_state` and `get_state` are not needed to work with any of the\n    random distributions in NumPy. If the internal state is manually altered,\n    the user should know exactly what he/she is doing.\n    \n    For backwards compatibility, the form (str, array of 624 uints, int) is\n    also accepted although it is missing some information about the cached\n    Gaussian value: ``state = ('MT19937', keys, pos)``.\n    \n    References\n    ----------\n    .. [1] M. Matsumoto and T. Nishimura, \"Mersenne Twister: A\n       623-dimensionally equidistributed uniform pseudorandom number\n       generator,\" *ACM Trans. on Modeling and Computer Simulation*,\n       Vol. 8, No. 1, pp. 3-30, Jan. 1998.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1309129b5b0251f1c7987bba3bbe6d65f59c3b43a59d2a665edee78472febee8",
            "fields": [
                {
                    "id": "ci0bi8s8",
                    "encoding": "",
                    "name": "state",
                    "value": "",
                    "defaultValue": "",
                    "description": "The `state` tuple has the following items:\n\n1. the string 'MT19937', specifying the Mersenne Twister algorithm.\n2. a 1-D array of 624 unsigned integers ``keys``.\n3. an integer ``pos``.\n4. an integer ``has_gauss``.\n5. a float ``cached_gaussian``.\n\nIf state is a dictionary, it is directly set using the BitGenerators\n`state` property.",
                    "type": "{tuple(str, ndarray of 624 uints, int, int, float), dict}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i1yqp0u1",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.set_state",
                    "defaultValue": "numpy.random.mtrand.set_state",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lgm1osoa",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ebj4enpb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "mmgy0u_2",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z_xi1zay",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zks09nz3",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hza65qg9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "s446zh_9",
            "name": "mtrand.shuffle",
            "description": "shuffle(x)\n    \n    Modify a sequence in-place by shuffling its contents.\n    \n    This function only shuffles the array along the first axis of a\n    multi-dimensional array. The order of sub-arrays is changed but\n    their contents remains the same.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.shuffle`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    x : ndarray or MutableSequence\n        The array, list or mutable sequence to be shuffled.\n    \n    Returns\n    -------\n    None\n    \n    See Also\n    --------\n    random.Generator.shuffle: which should be used for new code.\n    \n    Examples\n    --------\n    >>> arr = np.arange(10)\n    >>> np.random.shuffle(arr)\n    >>> arr\n    [1 7 5 2 9 4 3 6 0 8] # random\n    \n    Multi-dimensional arrays are only shuffled along the first axis:\n    \n    >>> arr = np.arange(9).reshape((3, 3))\n    >>> np.random.shuffle(arr)\n    >>> arr\n    array([[3, 4, 5], # random\n           [6, 7, 8],\n           [0, 1, 2]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5e08ec4fc88ec015e9bed7f93d5a3b340c06efb9dfb525489c9792879cac6242",
            "fields": [
                {
                    "id": "nfdie04o",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array, list or mutable sequence to be shuffled.",
                    "type": "ndarray or MutableSequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ruee06dk",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.shuffle",
                    "defaultValue": "numpy.random.mtrand.shuffle",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5t_9jtpo",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "179sc7zh",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "o2hfmbxu",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xgv4_0sl",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5lt6gyvm",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ma6x0oce",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "cu4lk3uf",
            "name": "mtrand.standard_cauchy",
            "description": "standard_cauchy(size=None)\n    \n    Draw samples from a standard Cauchy distribution with mode = 0.\n    \n    Also known as the Lorentz distribution.\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.standard_cauchy`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    \n    Returns\n    -------\n    samples : ndarray or scalar\n        The drawn samples.\n    \n    See Also\n    --------\n    random.Generator.standard_cauchy: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density function for the full Cauchy distribution is\n    \n    .. math:: P(x; x_0, \\gamma) = \\frac{1}{\\pi \\gamma \\bigl[ 1+\n              (\\frac{x-x_0}{\\gamma})^2 \\bigr] }\n    \n    and the Standard Cauchy distribution just sets :math:`x_0=0` and\n    :math:`\\gamma=1`\n    \n    The Cauchy distribution arises in the solution to the driven harmonic\n    oscillator problem, and also describes spectral line broadening. It\n    also describes the distribution of values at which a line tilted at\n    a random angle will cut the x axis.\n    \n    When studying hypothesis tests that assume normality, seeing how the\n    tests perform on data from a Cauchy distribution is a good indicator of\n    their sensitivity to a heavy-tailed distribution, since the Cauchy looks\n    very much like a Gaussian distribution, but with heavier tails.\n    \n    References\n    ----------\n    .. [1] NIST/SEMATECH e-Handbook of Statistical Methods, \"Cauchy\n          Distribution\",\n          https://www.itl.nist.gov/div898/handbook/eda/section3/eda3663.htm\n    .. [2] Weisstein, Eric W. \"Cauchy Distribution.\" From MathWorld--A\n          Wolfram Web Resource.\n          https://mathworld.wolfram.com/CauchyDistribution.html\n    .. [3] Wikipedia, \"Cauchy distribution\"\n          https://en.wikipedia.org/wiki/Cauchy_distribution\n    \n    Examples\n    --------\n    Draw samples and plot the distribution:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> s = np.random.standard_cauchy(1000000)\n    >>> s = s[(s>-25) & (s<25)]  # truncate distribution so it plots well\n    >>> plt.hist(s, bins=100)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3fc0e3969485537f8073456afb753237278116440a70636d502d1d6a263e2902",
            "fields": [
                {
                    "id": "mgy7qrrw",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ymxt9rre",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.standard_cauchy",
                    "defaultValue": "numpy.random.mtrand.standard_cauchy",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iica4iof",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l9yvz7l7",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "5_yrb3dp",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c30r4szw",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zqo5mgf4",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jhrl0jq8",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "v7xe3kr_",
            "name": "mtrand.standard_exponential",
            "description": "standard_exponential(size=None)\n    \n    Draw samples from the standard exponential distribution.\n    \n    `standard_exponential` is identical to the exponential distribution\n    with a scale parameter of 1.\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.standard_exponential`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    \n    Returns\n    -------\n    out : float or ndarray\n        Drawn samples.\n    \n    See Also\n    --------\n    random.Generator.standard_exponential: which should be used for new code.\n    \n    Examples\n    --------\n    Output a 3x8000 array:\n    \n    >>> n = np.random.standard_exponential((3, 8000))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ed9591ea5273056659cdf1d196a733c9ff745f9e940c167dabd720c015cf95fa",
            "fields": [
                {
                    "id": "tlm6zpz9",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3y3pha98",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.standard_exponential",
                    "defaultValue": "numpy.random.mtrand.standard_exponential",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "688ati3x",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "euqjr402",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "n65yedaa",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "syju1hzs",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2xgog47t",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2qoio43j",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "nji1dvnn",
            "name": "mtrand.standard_gamma",
            "description": "standard_gamma(shape, size=None)\n    \n    Draw samples from a standard Gamma distribution.\n    \n    Samples are drawn from a Gamma distribution with specified parameters,\n    shape (sometimes designated \"k\") and scale=1.\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.standard_gamma`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    shape : float or array_like of floats\n        Parameter, must be non-negative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``shape`` is a scalar.  Otherwise,\n        ``np.array(shape).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized standard gamma distribution.\n    \n    See Also\n    --------\n    scipy.stats.gamma : probability density function, distribution or\n        cumulative density function, etc.\n    random.Generator.standard_gamma: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density for the Gamma distribution is\n    \n    .. math:: p(x) = x^{k-1}\\frac{e^{-x/\\theta}}{\\theta^k\\Gamma(k)},\n    \n    where :math:`k` is the shape and :math:`\\theta` the scale,\n    and :math:`\\Gamma` is the Gamma function.\n    \n    The Gamma distribution is often used to model the times to failure of\n    electronic components, and arises naturally in processes for which the\n    waiting times between Poisson distributed events are relevant.\n    \n    References\n    ----------\n    .. [1] Weisstein, Eric W. \"Gamma Distribution.\" From MathWorld--A\n           Wolfram Web Resource.\n           https://mathworld.wolfram.com/GammaDistribution.html\n    .. [2] Wikipedia, \"Gamma distribution\",\n           https://en.wikipedia.org/wiki/Gamma_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> shape, scale = 2., 1. # mean and width\n    >>> s = np.random.standard_gamma(shape, 1000000)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> import scipy.special as sps  # doctest: +SKIP\n    >>> count, bins, ignored = plt.hist(s, 50, density=True)\n    >>> y = bins**(shape-1) * ((np.exp(-bins/scale))/  # doctest: +SKIP\n    ...                       (sps.gamma(shape) * scale**shape))\n    >>> plt.plot(bins, y, linewidth=2, color='r')  # doctest: +SKIP\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1ca3758e4f19495ec204b6938e11e72cfc1b91159fba80bc15de027d2b28c613",
            "fields": [
                {
                    "id": "kr2akuu8",
                    "encoding": "",
                    "name": "shape",
                    "value": "",
                    "defaultValue": "",
                    "description": "Parameter, must be non-negative.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s_8d5k1g",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``shape`` is a scalar.  Otherwise,\n``np.array(shape).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i88_og23",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.standard_gamma",
                    "defaultValue": "numpy.random.mtrand.standard_gamma",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iuecgil4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "79gjxaj5",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "82qfaq_4",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "by6la550",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t6r8gswo",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0jk0mvfq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "zvgemury",
            "name": "mtrand.standard_normal",
            "description": "standard_normal(size=None)\n    \n    Draw samples from a standard Normal distribution (mean=0, stdev=1).\n    \n    .. note::\n        New code should use the\n        `~numpy.random.Generator.standard_normal`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  Default is None, in which case a\n        single value is returned.\n    \n    Returns\n    -------\n    out : float or ndarray\n        A floating-point array of shape ``size`` of drawn samples, or a\n        single sample if ``size`` was not specified.\n    \n    See Also\n    --------\n    normal :\n        Equivalent function with additional ``loc`` and ``scale`` arguments\n        for setting the mean and standard deviation.\n    random.Generator.standard_normal: which should be used for new code.\n    \n    Notes\n    -----\n    For random samples from the normal distribution with mean ``mu`` and\n    standard deviation ``sigma``, use one of::\n    \n        mu + sigma * np.random.standard_normal(size=...)\n        np.random.normal(mu, sigma, size=...)\n    \n    Examples\n    --------\n    >>> np.random.standard_normal()\n    2.1923875335537315 #random\n    \n    >>> s = np.random.standard_normal(8000)\n    >>> s\n    array([ 0.6888893 ,  0.78096262, -0.89086505, ...,  0.49876311,  # random\n           -0.38672696, -0.4685006 ])                                # random\n    >>> s.shape\n    (8000,)\n    >>> s = np.random.standard_normal(size=(3, 4, 2))\n    >>> s.shape\n    (3, 4, 2)\n    \n    Two-by-four array of samples from the normal distribution with\n    mean 3 and standard deviation 2.5:\n    \n    >>> 3 + 2.5 * np.random.standard_normal(size=(2, 4))\n    array([[-4.49401501,  4.00950034, -1.81814867,  7.29718677],   # random\n           [ 0.39924804,  4.68456316,  4.99394529,  4.84057254]])  # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "47e7c99f16beaba0d4481268b1eabe52ca64802b06478fb0ab958a8076279263",
            "fields": [
                {
                    "id": "ye5h1o7h",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  Default is None, in which case a\nsingle value is returned.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "65slkt55",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.standard_normal",
                    "defaultValue": "numpy.random.mtrand.standard_normal",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yyhiv3qe",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_3too0g1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "j51_e48r",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a25ofqo9",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_h45sitm",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_edx2dvg",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "s380kfb4",
            "name": "mtrand.standard_t",
            "description": "standard_t(df, size=None)\n    \n    Draw samples from a standard Student's t distribution with `df` degrees\n    of freedom.\n    \n    A special case of the hyperbolic distribution.  As `df` gets\n    large, the result resembles that of the standard normal\n    distribution (`standard_normal`).\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.standard_t`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    df : float or array_like of floats\n        Degrees of freedom, must be > 0.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``df`` is a scalar.  Otherwise,\n        ``np.array(df).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized standard Student's t distribution.\n    \n    See Also\n    --------\n    random.Generator.standard_t: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density function for the t distribution is\n    \n    .. math:: P(x, df) = \\frac{\\Gamma(\\frac{df+1}{2})}{\\sqrt{\\pi df}\n              \\Gamma(\\frac{df}{2})}\\Bigl( 1+\\frac{x^2}{df} \\Bigr)^{-(df+1)/2}\n    \n    The t test is based on an assumption that the data come from a\n    Normal distribution. The t test provides a way to test whether\n    the sample mean (that is the mean calculated from the data) is\n    a good estimate of the true mean.\n    \n    The derivation of the t-distribution was first published in\n    1908 by William Gosset while working for the Guinness Brewery\n    in Dublin. Due to proprietary issues, he had to publish under\n    a pseudonym, and so he used the name Student.\n    \n    References\n    ----------\n    .. [1] Dalgaard, Peter, \"Introductory Statistics With R\",\n           Springer, 2002.\n    .. [2] Wikipedia, \"Student's t-distribution\"\n           https://en.wikipedia.org/wiki/Student's_t-distribution\n    \n    Examples\n    --------\n    From Dalgaard page 83 [1]_, suppose the daily energy intake for 11\n    women in kilojoules (kJ) is:\n    \n    >>> intake = np.array([5260., 5470, 5640, 6180, 6390, 6515, 6805, 7515, \\\n    ...                    7515, 8230, 8770])\n    \n    Does their energy intake deviate systematically from the recommended\n    value of 7725 kJ? Our null hypothesis will be the absence of deviation,\n    and the alternate hypothesis will be the presence of an effect that could be\n    either positive or negative, hence making our test 2-tailed. \n    \n    Because we are estimating the mean and we have N=11 values in our sample,\n    we have N-1=10 degrees of freedom. We set our significance level to 95% and \n    compute the t statistic using the empirical mean and empirical standard \n    deviation of our intake. We use a ddof of 1 to base the computation of our \n    empirical standard deviation on an unbiased estimate of the variance (note:\n    the final estimate is not unbiased due to the concave nature of the square \n    root).\n    \n    >>> np.mean(intake)\n    6753.636363636364\n    >>> intake.std(ddof=1)\n    1142.1232221373727\n    >>> t = (np.mean(intake)-7725)/(intake.std(ddof=1)/np.sqrt(len(intake)))\n    >>> t\n    -2.8207540608310198\n    \n    We draw 1000000 samples from Student's t distribution with the adequate\n    degrees of freedom.\n    \n    >>> import matplotlib.pyplot as plt\n    >>> s = np.random.standard_t(10, size=1000000)\n    >>> h = plt.hist(s, bins=100, density=True)\n    \n    Does our t statistic land in one of the two critical regions found at \n    both tails of the distribution?\n    \n    >>> np.sum(np.abs(t) < np.abs(s)) / float(len(s))\n    0.018318  #random < 0.05, statistic is in critical region\n    \n    The probability value for this 2-tailed test is about 1.83%, which is \n    lower than the 5% pre-determined significance threshold. \n    \n    Therefore, the probability of observing values as extreme as our intake\n    conditionally on the null hypothesis being true is too low, and we reject \n    the null hypothesis of no deviation.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "fafd34db6bee61f834d282f81405793d61ca3b2fc4d8ee92fb6c06429e971ace",
            "fields": [
                {
                    "id": "mu_alnos",
                    "encoding": "",
                    "name": "df",
                    "value": "",
                    "defaultValue": "",
                    "description": "Degrees of freedom, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "knmlkoe2",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``df`` is a scalar.  Otherwise,\n``np.array(df).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "71q7zlhj",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.standard_t",
                    "defaultValue": "numpy.random.mtrand.standard_t",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0h8fhw9g",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ryx17rga",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "14p1dajx",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z4ildsub",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3zzrfev7",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "04slguqh",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "pvielj0k",
            "name": "mtrand.triangular",
            "description": "triangular(left, mode, right, size=None)\n    \n    Draw samples from the triangular distribution over the\n    interval ``[left, right]``.\n    \n    The triangular distribution is a continuous probability\n    distribution with lower limit left, peak at mode, and upper\n    limit right. Unlike the other distributions, these parameters\n    directly define the shape of the pdf.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.triangular`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    left : float or array_like of floats\n        Lower limit.\n    mode : float or array_like of floats\n        The value where the peak of the distribution occurs.\n        The value must fulfill the condition ``left <= mode <= right``.\n    right : float or array_like of floats\n        Upper limit, must be larger than `left`.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``left``, ``mode``, and ``right``\n        are all scalars.  Otherwise, ``np.broadcast(left, mode, right).size``\n        samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized triangular distribution.\n    \n    See Also\n    --------\n    random.Generator.triangular: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density function for the triangular distribution is\n    \n    .. math:: P(x;l, m, r) = \\begin{cases}\n              \\frac{2(x-l)}{(r-l)(m-l)}& \\text{for $l \\leq x \\leq m$},\\\\\n              \\frac{2(r-x)}{(r-l)(r-m)}& \\text{for $m \\leq x \\leq r$},\\\\\n              0& \\text{otherwise}.\n              \\end{cases}\n    \n    The triangular distribution is often used in ill-defined\n    problems where the underlying distribution is not known, but\n    some knowledge of the limits and mode exists. Often it is used\n    in simulations.\n    \n    References\n    ----------\n    .. [1] Wikipedia, \"Triangular distribution\"\n           https://en.wikipedia.org/wiki/Triangular_distribution\n    \n    Examples\n    --------\n    Draw values from the distribution and plot the histogram:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> h = plt.hist(np.random.triangular(-3, 0, 8, 100000), bins=200,\n    ...              density=True)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9f1c29997c2c581a685bebbbbb2478714a2b97af67c84fe99c29230cd150ae20",
            "fields": [
                {
                    "id": "14d7gh7s",
                    "encoding": "",
                    "name": "left",
                    "value": "",
                    "defaultValue": "",
                    "description": "Lower limit.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_yeda4q5",
                    "encoding": "",
                    "name": "mode",
                    "value": "",
                    "defaultValue": "",
                    "description": "The value where the peak of the distribution occurs.\nThe value must fulfill the condition ``left <= mode <= right``.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r0s4q2ff",
                    "encoding": "",
                    "name": "right",
                    "value": "",
                    "defaultValue": "",
                    "description": "Upper limit, must be larger than `left`.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bw5a1v1b",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``left``, ``mode``, and ``right``\nare all scalars.  Otherwise, ``np.broadcast(left, mode, right).size``\nsamples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hd_9fi6x",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.triangular",
                    "defaultValue": "numpy.random.mtrand.triangular",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0junlfg_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ice9qagu",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "cy2629no",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kcrlbxys",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m19h7vja",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7hzgys4c",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ac2szepq",
            "name": "mtrand.uniform",
            "description": "uniform(low=0.0, high=1.0, size=None)\n    \n    Draw samples from a uniform distribution.\n    \n    Samples are uniformly distributed over the half-open interval\n    ``[low, high)`` (includes low, but excludes high).  In other words,\n    any value within the given interval is equally likely to be drawn\n    by `uniform`.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.uniform`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    low : float or array_like of floats, optional\n        Lower boundary of the output interval.  All values generated will be\n        greater than or equal to low.  The default value is 0.\n    high : float or array_like of floats\n        Upper boundary of the output interval.  All values generated will be\n        less than or equal to high.  The high limit may be included in the \n        returned array of floats due to floating-point rounding in the \n        equation ``low + (high-low) * random_sample()``.  The default value \n        is 1.0.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``low`` and ``high`` are both scalars.\n        Otherwise, ``np.broadcast(low, high).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized uniform distribution.\n    \n    See Also\n    --------\n    randint : Discrete uniform distribution, yielding integers.\n    random_integers : Discrete uniform distribution over the closed\n                      interval ``[low, high]``.\n    random_sample : Floats uniformly distributed over ``[0, 1)``.\n    random : Alias for `random_sample`.\n    rand : Convenience function that accepts dimensions as input, e.g.,\n           ``rand(2,2)`` would generate a 2-by-2 array of floats,\n           uniformly distributed over ``[0, 1)``.\n    random.Generator.uniform: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density function of the uniform distribution is\n    \n    .. math:: p(x) = \\frac{1}{b - a}\n    \n    anywhere within the interval ``[a, b)``, and zero elsewhere.\n    \n    When ``high`` == ``low``, values of ``low`` will be returned.\n    If ``high`` < ``low``, the results are officially undefined\n    and may eventually raise an error, i.e. do not rely on this\n    function to behave when passed arguments satisfying that\n    inequality condition. The ``high`` limit may be included in the\n    returned array of floats due to floating-point rounding in the\n    equation ``low + (high-low) * random_sample()``. For example:\n    \n    >>> x = np.float32(5*0.99999999)\n    >>> x\n    np.float32(5.0)\n    \n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> s = np.random.uniform(-1,0,1000)\n    \n    All values are within the given interval:\n    \n    >>> np.all(s >= -1)\n    True\n    >>> np.all(s < 0)\n    True\n    \n    Display the histogram of the samples, along with the\n    probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> count, bins, ignored = plt.hist(s, 15, density=True)\n    >>> plt.plot(bins, np.ones_like(bins), linewidth=2, color='r')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f58a74a441369ecdfe09fbfd407776379cecf2249c0357fbacb965ae8075d0b7",
            "fields": [
                {
                    "id": "x2rxei1j",
                    "encoding": "",
                    "name": "low",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Lower boundary of the output interval.  All values generated will be\ngreater than or equal to low.  The default value is 0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bxk6jxg1",
                    "encoding": "",
                    "name": "high",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Upper boundary of the output interval.  All values generated will be\nless than or equal to high.  The high limit may be included in the \nreturned array of floats due to floating-point rounding in the \nequation ``low + (high-low) * random_sample()``.  The default value \nis 1.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n9ft_q1z",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``low`` and ``high`` are both scalars.\nOtherwise, ``np.broadcast(low, high).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lokg28hk",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.uniform",
                    "defaultValue": "numpy.random.mtrand.uniform",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r3tu9q8s",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8i_8if8q",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "okatt1pp",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s_aanh_4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hlrnax1b",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b390i0y9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "idxwd9w9",
            "name": "mtrand.vonmises",
            "description": "vonmises(mu, kappa, size=None)\n    \n    Draw samples from a von Mises distribution.\n    \n    Samples are drawn from a von Mises distribution with specified mode\n    (mu) and concentration (kappa), on the interval [-pi, pi].\n    \n    The von Mises distribution (also known as the circular normal\n    distribution) is a continuous probability distribution on the unit\n    circle.  It may be thought of as the circular analogue of the normal\n    distribution.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.vonmises`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    mu : float or array_like of floats\n        Mode (\"center\") of the distribution.\n    kappa : float or array_like of floats\n        Concentration of the distribution, has to be >=0.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``mu`` and ``kappa`` are both scalars.\n        Otherwise, ``np.broadcast(mu, kappa).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized von Mises distribution.\n    \n    See Also\n    --------\n    scipy.stats.vonmises : probability density function, distribution, or\n        cumulative density function, etc.\n    random.Generator.vonmises: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density for the von Mises distribution is\n    \n    .. math:: p(x) = \\frac{e^{\\kappa cos(x-\\mu)}}{2\\pi I_0(\\kappa)},\n    \n    where :math:`\\mu` is the mode and :math:`\\kappa` the concentration,\n    and :math:`I_0(\\kappa)` is the modified Bessel function of order 0.\n    \n    The von Mises is named for Richard Edler von Mises, who was born in\n    Austria-Hungary, in what is now the Ukraine.  He fled to the United\n    States in 1939 and became a professor at Harvard.  He worked in\n    probability theory, aerodynamics, fluid mechanics, and philosophy of\n    science.\n    \n    References\n    ----------\n    .. [1] Abramowitz, M. and Stegun, I. A. (Eds.). \"Handbook of\n           Mathematical Functions with Formulas, Graphs, and Mathematical\n           Tables, 9th printing,\" New York: Dover, 1972.\n    .. [2] von Mises, R., \"Mathematical Theory of Probability\n           and Statistics\", New York: Academic Press, 1964.\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> mu, kappa = 0.0, 4.0 # mean and concentration\n    >>> s = np.random.vonmises(mu, kappa, 1000)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.special import i0  # doctest: +SKIP\n    >>> plt.hist(s, 50, density=True)\n    >>> x = np.linspace(-np.pi, np.pi, num=51)\n    >>> y = np.exp(kappa*np.cos(x-mu))/(2*np.pi*i0(kappa))  # doctest: +SKIP\n    >>> plt.plot(x, y, linewidth=2, color='r')  # doctest: +SKIP\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f7077a1b7db6d044f196a74ce79a3d5c725cc01c28100fe9a4afc958d7e6510b",
            "fields": [
                {
                    "id": "l_ivbeim",
                    "encoding": "",
                    "name": "mu",
                    "value": "",
                    "defaultValue": "",
                    "description": "Mode (\"center\") of the distribution.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4yd3mezm",
                    "encoding": "",
                    "name": "kappa",
                    "value": "",
                    "defaultValue": "",
                    "description": "Concentration of the distribution, has to be >=0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zarmz7ag",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``mu`` and ``kappa`` are both scalars.\nOtherwise, ``np.broadcast(mu, kappa).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7hknxte9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.vonmises",
                    "defaultValue": "numpy.random.mtrand.vonmises",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ovgfs00s",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7abkppwj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "8ev_kazk",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c09kr43m",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_khv7vj5",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tt5qd3_e",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "9del81pt",
            "name": "mtrand.wald",
            "description": "wald(mean, scale, size=None)\n    \n    Draw samples from a Wald, or inverse Gaussian, distribution.\n    \n    As the scale approaches infinity, the distribution becomes more like a\n    Gaussian. Some references claim that the Wald is an inverse Gaussian\n    with mean equal to 1, but this is by no means universal.\n    \n    The inverse Gaussian distribution was first studied in relationship to\n    Brownian motion. In 1956 M.C.K. Tweedie used the name inverse Gaussian\n    because there is an inverse relationship between the time to cover a\n    unit distance and distance covered in unit time.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.wald`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    mean : float or array_like of floats\n        Distribution mean, must be > 0.\n    scale : float or array_like of floats\n        Scale parameter, must be > 0.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``mean`` and ``scale`` are both scalars.\n        Otherwise, ``np.broadcast(mean, scale).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Wald distribution.\n    \n    See Also\n    --------\n    random.Generator.wald: which should be used for new code.\n    \n    Notes\n    -----\n    The probability density function for the Wald distribution is\n    \n    .. math:: P(x;mean,scale) = \\sqrt{\\frac{scale}{2\\pi x^3}}e^\n                                \\frac{-scale(x-mean)^2}{2\\cdotp mean^2x}\n    \n    As noted above the inverse Gaussian distribution first arise\n    from attempts to model Brownian motion. It is also a\n    competitor to the Weibull for use in reliability modeling and\n    modeling stock returns and interest rate processes.\n    \n    References\n    ----------\n    .. [1] Brighton Webs Ltd., Wald Distribution,\n           https://web.archive.org/web/20090423014010/http://www.brighton-webs.co.uk:80/distributions/wald.asp\n    .. [2] Chhikara, Raj S., and Folks, J. Leroy, \"The Inverse Gaussian\n           Distribution: Theory : Methodology, and Applications\", CRC Press,\n           1988.\n    .. [3] Wikipedia, \"Inverse Gaussian distribution\"\n           https://en.wikipedia.org/wiki/Inverse_Gaussian_distribution\n    \n    Examples\n    --------\n    Draw values from the distribution and plot the histogram:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> h = plt.hist(np.random.wald(3, 2, 100000), bins=200, density=True)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f6ffd82580e3a45a8e32d97366b9d0d4eff2a3da201d408cc11dc1dbb0b8278e",
            "fields": [
                {
                    "id": "kl04maws",
                    "encoding": "",
                    "name": "mean",
                    "value": "",
                    "defaultValue": "",
                    "description": "Distribution mean, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c4qapz5p",
                    "encoding": "",
                    "name": "scale",
                    "value": "",
                    "defaultValue": "",
                    "description": "Scale parameter, must be > 0.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p_6197w3",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``mean`` and ``scale`` are both scalars.\nOtherwise, ``np.broadcast(mean, scale).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wjkpdbd7",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.wald",
                    "defaultValue": "numpy.random.mtrand.wald",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j_1tg32m",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7q84xvzh",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "wnrmrpb5",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_3c07g7c",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1ods_0hs",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zlln7ntb",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "72cqkva3",
            "name": "mtrand.weibull",
            "description": "weibull(a, size=None)\n    \n    Draw samples from a Weibull distribution.\n    \n    Draw samples from a 1-parameter Weibull distribution with the given\n    shape parameter `a`.\n    \n    .. math:: X = (-ln(U))^{1/a}\n    \n    Here, U is drawn from the uniform distribution over (0,1].\n    \n    The more common 2-parameter Weibull, including a scale parameter\n    :math:`\\lambda` is just :math:`X = \\lambda(-ln(U))^{1/a}`.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.weibull`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    a : float or array_like of floats\n        Shape parameter of the distribution.  Must be nonnegative.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``a`` is a scalar.  Otherwise,\n        ``np.array(a).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Weibull distribution.\n    \n    See Also\n    --------\n    scipy.stats.weibull_max\n    scipy.stats.weibull_min\n    scipy.stats.genextreme\n    gumbel\n    random.Generator.weibull: which should be used for new code.\n    \n    Notes\n    -----\n    The Weibull (or Type III asymptotic extreme value distribution\n    for smallest values, SEV Type III, or Rosin-Rammler\n    distribution) is one of a class of Generalized Extreme Value\n    (GEV) distributions used in modeling extreme value problems.\n    This class includes the Gumbel and Frechet distributions.\n    \n    The probability density for the Weibull distribution is\n    \n    .. math:: p(x) = \\frac{a}\n                     {\\lambda}(\\frac{x}{\\lambda})^{a-1}e^{-(x/\\lambda)^a},\n    \n    where :math:`a` is the shape and :math:`\\lambda` the scale.\n    \n    The function has its peak (the mode) at\n    :math:`\\lambda(\\frac{a-1}{a})^{1/a}`.\n    \n    When ``a = 1``, the Weibull distribution reduces to the exponential\n    distribution.\n    \n    References\n    ----------\n    .. [1] Waloddi Weibull, Royal Technical University, Stockholm,\n           1939 \"A Statistical Theory Of The Strength Of Materials\",\n           Ingeniorsvetenskapsakademiens Handlingar Nr 151, 1939,\n           Generalstabens Litografiska Anstalts Forlag, Stockholm.\n    .. [2] Waloddi Weibull, \"A Statistical Distribution Function of\n           Wide Applicability\", Journal Of Applied Mechanics ASME Paper\n           1951.\n    .. [3] Wikipedia, \"Weibull distribution\",\n           https://en.wikipedia.org/wiki/Weibull_distribution\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> a = 5. # shape\n    >>> s = np.random.weibull(a, 1000)\n    \n    Display the histogram of the samples, along with\n    the probability density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> x = np.arange(1,100.)/50.\n    >>> def weib(x,n,a):\n    ...     return (a / n) * (x / n)**(a - 1) * np.exp(-(x / n)**a)\n    \n    >>> count, bins, ignored = plt.hist(np.random.weibull(5.,1000))\n    >>> x = np.arange(1,100.)/50.\n    >>> scale = count.max()/weib(x, 1., 5.).max()\n    >>> plt.plot(x, weib(x, 1., 5.)*scale)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "60092089dfa0ce15db7eb19f55ac5a5fc3b51d739e8b19983462c2c9d2164c7b",
            "fields": [
                {
                    "id": "tlwfz1ev",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape parameter of the distribution.  Must be nonnegative.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bphup6nh",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``a`` is a scalar.  Otherwise,\n``np.array(a).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3xqk2apy",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.weibull",
                    "defaultValue": "numpy.random.mtrand.weibull",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ao5to2tz",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fn_6rzpk",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "wjk4t8n0",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h34hcqz3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aal77g6n",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p58d8gkg",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "avrffgvo",
            "name": "mtrand.zipf",
            "description": "zipf(a, size=None)\n    \n    Draw samples from a Zipf distribution.\n    \n    Samples are drawn from a Zipf distribution with specified parameter\n    `a` > 1.\n    \n    The Zipf distribution (also known as the zeta distribution) is a\n    discrete probability distribution that satisfies Zipf's law: the\n    frequency of an item is inversely proportional to its rank in a\n    frequency table.\n    \n    .. note::\n        New code should use the `~numpy.random.Generator.zipf`\n        method of a `~numpy.random.Generator` instance instead;\n        please see the :ref:`random-quick-start`.\n    \n    Parameters\n    ----------\n    a : float or array_like of floats\n        Distribution parameter. Must be greater than 1.\n    size : int or tuple of ints, optional\n        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n        ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n        a single value is returned if ``a`` is a scalar. Otherwise,\n        ``np.array(a).size`` samples are drawn.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        Drawn samples from the parameterized Zipf distribution.\n    \n    See Also\n    --------\n    scipy.stats.zipf : probability density function, distribution, or\n        cumulative density function, etc.\n    random.Generator.zipf: which should be used for new code.\n    \n    Notes\n    -----\n    The probability mass function (PMF) for the Zipf distribution is\n    \n    .. math:: p(k) = \\frac{k^{-a}}{\\zeta(a)},\n    \n    for integers :math:`k \\geq 1`, where :math:`\\zeta` is the Riemann Zeta\n    function.\n    \n    It is named for the American linguist George Kingsley Zipf, who noted\n    that the frequency of any word in a sample of a language is inversely\n    proportional to its rank in the frequency table.\n    \n    References\n    ----------\n    .. [1] Zipf, G. K., \"Selected Studies of the Principle of Relative\n           Frequency in Language,\" Cambridge, MA: Harvard Univ. Press,\n           1932.\n    \n    Examples\n    --------\n    Draw samples from the distribution:\n    \n    >>> a = 4.0\n    >>> n = 20000\n    >>> s = np.random.zipf(a, n)\n    \n    Display the histogram of the samples, along with\n    the expected histogram based on the probability\n    density function:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.special import zeta  # doctest: +SKIP\n    \n    `bincount` provides a fast histogram for small integers.\n    \n    >>> count = np.bincount(s)\n    >>> k = np.arange(1, s.max() + 1)\n    \n    >>> plt.bar(k, count[1:], alpha=0.5, label='sample count')\n    >>> plt.plot(k, n*(k**-a)/zeta(a), 'k.-', alpha=0.5,\n    ...          label='expected count')   # doctest: +SKIP\n    >>> plt.semilogy()\n    >>> plt.grid(alpha=0.4)\n    >>> plt.legend()\n    >>> plt.title(f'Zipf sample, a={a}, size={n}')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "39b52458c2d83a4f5fcbacb4808450eda2dd619711f9ced9723cdbadd2f128d4",
            "fields": [
                {
                    "id": "4lrrrstp",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Distribution parameter. Must be greater than 1.",
                    "type": "float or arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2hw034an",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n``m * n * k`` samples are drawn.  If size is ``None`` (default),\na single value is returned if ``a`` is a scalar. Otherwise,\n``np.array(a).size`` samples are drawn.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zj8l1hl9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.random.mtrand.zipf",
                    "defaultValue": "numpy.random.mtrand.zipf",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pp68pehz",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2qi9skc2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ji1qvx9k",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lgz_5sqd",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.random.mtrand",
                    "defaultValue": "numpy.random.mtrand",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mo3y7cvx",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bt_bp6dg",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        }
    ],
    "linkDataArray": []
}